{
    "completions": [
        {
            "contents": "Du(${1:float})",
            "trigger": "Du\tfloat\n(float)"
        },
        {
            "contents": "Du(${1:float}, ${2:...})",
            "trigger": "Du\tfloat\n(float; ...)"
        },
        {
            "contents": "Du(${1:vector4})",
            "trigger": "Du\tvector4\n(vector4)"
        },
        {
            "contents": "Du(${1:vector4}, ${2:...})",
            "trigger": "Du\tvector4\n(vector4; ...)"
        },
        {
            "contents": "Du(${1:vector})",
            "trigger": "Du\tvector\n(vector)"
        },
        {
            "contents": "Du(${1:vector}, ${2:...})",
            "trigger": "Du\tvector\n(vector; ...)"
        },
        {
            "contents": "Dv(${1:float})",
            "trigger": "Dv\tfloat\n(float)"
        },
        {
            "contents": "Dv(${1:float}, ${2:...})",
            "trigger": "Dv\tfloat\n(float; ...)"
        },
        {
            "contents": "Dv(${1:vector4})",
            "trigger": "Dv\tvector4\n(vector4)"
        },
        {
            "contents": "Dv(${1:vector4}, ${2:...})",
            "trigger": "Dv\tvector4\n(vector4; ...)"
        },
        {
            "contents": "Dv(${1:vector})",
            "trigger": "Dv\tvector\n(vector)"
        },
        {
            "contents": "Dv(${1:vector}, ${2:...})",
            "trigger": "Dv\tvector\n(vector; ...)"
        },
        {
            "contents": "Dw(${1:float})",
            "trigger": "Dw\tfloat\n(float)"
        },
        {
            "contents": "Dw(${1:float}, ${2:...})",
            "trigger": "Dw\tfloat\n(float; ...)"
        },
        {
            "contents": "Dw(${1:vector4})",
            "trigger": "Dw\tvector4\n(vector4)"
        },
        {
            "contents": "Dw(${1:vector4}, ${2:...})",
            "trigger": "Dw\tvector4\n(vector4; ...)"
        },
        {
            "contents": "Dw(${1:vector})",
            "trigger": "Dw\tvector\n(vector)"
        },
        {
            "contents": "Dw(${1:vector}, ${2:...})",
            "trigger": "Dw\tvector\n(vector; ...)"
        },
        {
            "contents": "abs(${1:float})",
            "trigger": "abs\tfloat\n(float)"
        },
        {
            "contents": "abs(${1:int})",
            "trigger": "abs\tint\n(int)"
        },
        {
            "contents": "abs(${1:vector4})",
            "trigger": "abs\tvector4\n(vector4)"
        },
        {
            "contents": "abs(${1:vector2})",
            "trigger": "abs\tvector2\n(vector2)"
        },
        {
            "contents": "abs(${1:vector})",
            "trigger": "abs\tvector\n(vector)"
        },
        {
            "contents": "acos(${1:float})",
            "trigger": "acos\tfloat\n(float)"
        },
        {
            "contents": "acos(${1:vector4})",
            "trigger": "acos\tvector4\n(vector4)"
        },
        {
            "contents": "acos(${1:vector2})",
            "trigger": "acos\tvector2\n(vector2)"
        },
        {
            "contents": "acos(${1:vector})",
            "trigger": "acos\tvector\n(vector)"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:matrix2})",
            "trigger": "addattrib\tint\n(int; string; string; matrix2)"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:matrix3})",
            "trigger": "addattrib\tint\n(int; string; string; matrix3)"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:matrix})",
            "trigger": "addattrib\tint\n(int; string; string; matrix)"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:float})",
            "trigger": "addattrib\tint\n(int; string; string; float)"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "addattrib\tint\n(int; string; string; int)"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:vector4})",
            "trigger": "addattrib\tint\n(int; string; string; vector4)"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "addattrib\tint\n(int; string; string; string)"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:vector2})",
            "trigger": "addattrib\tint\n(int; string; string; vector2)"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "addattrib\tint\n(int; string; string; vector)"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:matrix2[]})",
            "trigger": "addattrib\tint\n(int; string; string; matrix2[])"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:matrix3[]})",
            "trigger": "addattrib\tint\n(int; string; string; matrix3[])"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:matrix[]})",
            "trigger": "addattrib\tint\n(int; string; string; matrix[])"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:float[]})",
            "trigger": "addattrib\tint\n(int; string; string; float[])"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:int[]})",
            "trigger": "addattrib\tint\n(int; string; string; int[])"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:vector4[]})",
            "trigger": "addattrib\tint\n(int; string; string; vector4[])"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:string[]})",
            "trigger": "addattrib\tint\n(int; string; string; string[])"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:vector2[]})",
            "trigger": "addattrib\tint\n(int; string; string; vector2[])"
        },
        {
            "contents": "addattrib(${1:int}, ${2:string}, ${3:string}, ${4:vector[]})",
            "trigger": "addattrib\tint\n(int; string; string; vector[])"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:matrix2})",
            "trigger": "adddetailattrib\tint\n(int; string; matrix2)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:matrix2}, ${4:string})",
            "trigger": "adddetailattrib\tint\n(int; string; matrix2; string)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:matrix3})",
            "trigger": "adddetailattrib\tint\n(int; string; matrix3)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:matrix3}, ${4:string})",
            "trigger": "adddetailattrib\tint\n(int; string; matrix3; string)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:matrix})",
            "trigger": "adddetailattrib\tint\n(int; string; matrix)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:matrix}, ${4:string})",
            "trigger": "adddetailattrib\tint\n(int; string; matrix; string)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:float})",
            "trigger": "adddetailattrib\tint\n(int; string; float)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:float}, ${4:string})",
            "trigger": "adddetailattrib\tint\n(int; string; float; string)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:int})",
            "trigger": "adddetailattrib\tint\n(int; string; int)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:int}, ${4:string})",
            "trigger": "adddetailattrib\tint\n(int; string; int; string)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:vector4})",
            "trigger": "adddetailattrib\tint\n(int; string; vector4)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:vector4}, ${4:string})",
            "trigger": "adddetailattrib\tint\n(int; string; vector4; string)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:string})",
            "trigger": "adddetailattrib\tint\n(int; string; string)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "adddetailattrib\tint\n(int; string; string; string)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:vector2})",
            "trigger": "adddetailattrib\tint\n(int; string; vector2)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:vector2}, ${4:string})",
            "trigger": "adddetailattrib\tint\n(int; string; vector2; string)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "adddetailattrib\tint\n(int; string; vector)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:vector}, ${4:string})",
            "trigger": "adddetailattrib\tint\n(int; string; vector; string)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:float[]})",
            "trigger": "adddetailattrib\tint\n(int; string; float[])"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:float[]}, ${4:string})",
            "trigger": "adddetailattrib\tint\n(int; string; float[]; string)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:int[]})",
            "trigger": "adddetailattrib\tint\n(int; string; int[])"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:int[]}, ${4:string})",
            "trigger": "adddetailattrib\tint\n(int; string; int[]; string)"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:string[]})",
            "trigger": "adddetailattrib\tint\n(int; string; string[])"
        },
        {
            "contents": "adddetailattrib(${1:int}, ${2:string}, ${3:string[]}, ${4:string})",
            "trigger": "adddetailattrib\tint\n(int; string; string[]; string)"
        },
        {
            "contents": "addpoint(${1:int}, ${2:int})",
            "trigger": "addpoint\tint\n(int; int)"
        },
        {
            "contents": "addpoint(${1:int}, ${2:vector})",
            "trigger": "addpoint\tint\n(int; vector)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:matrix2})",
            "trigger": "addpointattrib\tint\n(int; string; matrix2)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:matrix2}, ${4:string})",
            "trigger": "addpointattrib\tint\n(int; string; matrix2; string)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:matrix3})",
            "trigger": "addpointattrib\tint\n(int; string; matrix3)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:matrix3}, ${4:string})",
            "trigger": "addpointattrib\tint\n(int; string; matrix3; string)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:matrix})",
            "trigger": "addpointattrib\tint\n(int; string; matrix)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:matrix}, ${4:string})",
            "trigger": "addpointattrib\tint\n(int; string; matrix; string)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:float})",
            "trigger": "addpointattrib\tint\n(int; string; float)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:float}, ${4:string})",
            "trigger": "addpointattrib\tint\n(int; string; float; string)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:int})",
            "trigger": "addpointattrib\tint\n(int; string; int)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:string})",
            "trigger": "addpointattrib\tint\n(int; string; int; string)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:vector4})",
            "trigger": "addpointattrib\tint\n(int; string; vector4)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:vector4}, ${4:string})",
            "trigger": "addpointattrib\tint\n(int; string; vector4; string)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:string})",
            "trigger": "addpointattrib\tint\n(int; string; string)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "addpointattrib\tint\n(int; string; string; string)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:vector2})",
            "trigger": "addpointattrib\tint\n(int; string; vector2)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:vector2}, ${4:string})",
            "trigger": "addpointattrib\tint\n(int; string; vector2; string)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "addpointattrib\tint\n(int; string; vector)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:vector}, ${4:string})",
            "trigger": "addpointattrib\tint\n(int; string; vector; string)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:float[]})",
            "trigger": "addpointattrib\tint\n(int; string; float[])"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:float[]}, ${4:string})",
            "trigger": "addpointattrib\tint\n(int; string; float[]; string)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:int[]})",
            "trigger": "addpointattrib\tint\n(int; string; int[])"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:int[]}, ${4:string})",
            "trigger": "addpointattrib\tint\n(int; string; int[]; string)"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:string[]})",
            "trigger": "addpointattrib\tint\n(int; string; string[])"
        },
        {
            "contents": "addpointattrib(${1:int}, ${2:string}, ${3:string[]}, ${4:string})",
            "trigger": "addpointattrib\tint\n(int; string; string[]; string)"
        },
        {
            "contents": "addprim(${1:int}, ${2:string})",
            "trigger": "addprim\tint\n(int; string)"
        },
        {
            "contents": "addprim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "addprim\tint\n(int; string; int)"
        },
        {
            "contents": "addprim(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "addprim\tint\n(int; string; int; int)"
        },
        {
            "contents": "addprim(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int})",
            "trigger": "addprim\tint\n(int; string; int; int; int)"
        },
        {
            "contents": "addprim(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int}, ${6:int})",
            "trigger": "addprim\tint\n(int; string; int; int; int; int)"
        },
        {
            "contents": "addprim(${1:int &}, ${2:int}, ${3:string}, ${4:int}, ${5:int}, ${6:int}, ${7:int}, ${8:int[] &})",
            "trigger": "addprim\tvoid\n(int &; int; string; int; int; int; int; int[] &)"
        },
        {
            "contents": "addprim(${1:int &}, ${2:int}, ${3:string}, ${4:int}, ${5:int}, ${6:int}, ${7:int[] &})",
            "trigger": "addprim\tvoid\n(int &; int; string; int; int; int; int[] &)"
        },
        {
            "contents": "addprim(${1:int &}, ${2:int}, ${3:string}, ${4:int}, ${5:int}, ${6:int[] &})",
            "trigger": "addprim\tvoid\n(int &; int; string; int; int; int[] &)"
        },
        {
            "contents": "addprim(${1:int &}, ${2:int}, ${3:string}, ${4:int}, ${5:int[] &})",
            "trigger": "addprim\tvoid\n(int &; int; string; int; int[] &)"
        },
        {
            "contents": "addprim(${1:int}, ${2:string}, ${3:int[]})",
            "trigger": "addprim\tint\n(int; string; int[])"
        },
        {
            "contents": "addprim(${1:int &}, ${2:int}, ${3:string}, ${4:int[]}, ${5:int[] &})",
            "trigger": "addprim\tvoid\n(int &; int; string; int[]; int[] &)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:matrix2})",
            "trigger": "addprimattrib\tint\n(int; string; matrix2)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:matrix2}, ${4:string})",
            "trigger": "addprimattrib\tint\n(int; string; matrix2; string)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:matrix3})",
            "trigger": "addprimattrib\tint\n(int; string; matrix3)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:matrix3}, ${4:string})",
            "trigger": "addprimattrib\tint\n(int; string; matrix3; string)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:matrix})",
            "trigger": "addprimattrib\tint\n(int; string; matrix)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:matrix}, ${4:string})",
            "trigger": "addprimattrib\tint\n(int; string; matrix; string)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:float})",
            "trigger": "addprimattrib\tint\n(int; string; float)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:float}, ${4:string})",
            "trigger": "addprimattrib\tint\n(int; string; float; string)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:int})",
            "trigger": "addprimattrib\tint\n(int; string; int)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:string})",
            "trigger": "addprimattrib\tint\n(int; string; int; string)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:vector4})",
            "trigger": "addprimattrib\tint\n(int; string; vector4)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:vector4}, ${4:string})",
            "trigger": "addprimattrib\tint\n(int; string; vector4; string)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:string})",
            "trigger": "addprimattrib\tint\n(int; string; string)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "addprimattrib\tint\n(int; string; string; string)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:vector2})",
            "trigger": "addprimattrib\tint\n(int; string; vector2)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:vector2}, ${4:string})",
            "trigger": "addprimattrib\tint\n(int; string; vector2; string)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "addprimattrib\tint\n(int; string; vector)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:vector}, ${4:string})",
            "trigger": "addprimattrib\tint\n(int; string; vector; string)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:float[]})",
            "trigger": "addprimattrib\tint\n(int; string; float[])"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:float[]}, ${4:string})",
            "trigger": "addprimattrib\tint\n(int; string; float[]; string)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:int[]})",
            "trigger": "addprimattrib\tint\n(int; string; int[])"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:int[]}, ${4:string})",
            "trigger": "addprimattrib\tint\n(int; string; int[]; string)"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:string[]})",
            "trigger": "addprimattrib\tint\n(int; string; string[])"
        },
        {
            "contents": "addprimattrib(${1:int}, ${2:string}, ${3:string[]}, ${4:string})",
            "trigger": "addprimattrib\tint\n(int; string; string[]; string)"
        },
        {
            "contents": "addvariablename(${1:int}, ${2:string}, ${3:string})",
            "trigger": "addvariablename\tint\n(int; string; string)"
        },
        {
            "contents": "addvertex(${1:int}, ${2:int}, ${3:int})",
            "trigger": "addvertex\tint\n(int; int; int)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:matrix2})",
            "trigger": "addvertexattrib\tint\n(int; string; matrix2)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:matrix2}, ${4:string})",
            "trigger": "addvertexattrib\tint\n(int; string; matrix2; string)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:matrix3})",
            "trigger": "addvertexattrib\tint\n(int; string; matrix3)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:matrix3}, ${4:string})",
            "trigger": "addvertexattrib\tint\n(int; string; matrix3; string)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:matrix})",
            "trigger": "addvertexattrib\tint\n(int; string; matrix)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:matrix}, ${4:string})",
            "trigger": "addvertexattrib\tint\n(int; string; matrix; string)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:float})",
            "trigger": "addvertexattrib\tint\n(int; string; float)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:float}, ${4:string})",
            "trigger": "addvertexattrib\tint\n(int; string; float; string)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:int})",
            "trigger": "addvertexattrib\tint\n(int; string; int)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:string})",
            "trigger": "addvertexattrib\tint\n(int; string; int; string)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:vector4})",
            "trigger": "addvertexattrib\tint\n(int; string; vector4)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:vector4}, ${4:string})",
            "trigger": "addvertexattrib\tint\n(int; string; vector4; string)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:string})",
            "trigger": "addvertexattrib\tint\n(int; string; string)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "addvertexattrib\tint\n(int; string; string; string)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:vector2})",
            "trigger": "addvertexattrib\tint\n(int; string; vector2)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:vector2}, ${4:string})",
            "trigger": "addvertexattrib\tint\n(int; string; vector2; string)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "addvertexattrib\tint\n(int; string; vector)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:vector}, ${4:string})",
            "trigger": "addvertexattrib\tint\n(int; string; vector; string)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:float[]})",
            "trigger": "addvertexattrib\tint\n(int; string; float[])"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:float[]}, ${4:string})",
            "trigger": "addvertexattrib\tint\n(int; string; float[]; string)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:int[]})",
            "trigger": "addvertexattrib\tint\n(int; string; int[])"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:int[]}, ${4:string})",
            "trigger": "addvertexattrib\tint\n(int; string; int[]; string)"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:string[]})",
            "trigger": "addvertexattrib\tint\n(int; string; string[])"
        },
        {
            "contents": "addvertexattrib(${1:int}, ${2:string}, ${3:string[]}, ${4:string})",
            "trigger": "addvertexattrib\tint\n(int; string; string[]; string)"
        },
        {
            "contents": "addvisualizer(${1:int}, ${2:string})",
            "trigger": "addvisualizer\tint\n(int; string)"
        },
        {
            "contents": "agentaddclip(${1:int}, ${2:int}, ${3:string}, ${4:string}, ${5:int})",
            "trigger": "agentaddclip\tint\n(int; int; string; string; int)"
        },
        {
            "contents": "agentclipcatalog(${1:int}, ${2:int})",
            "trigger": "agentclipcatalog\tstring[]\n(int; int)"
        },
        {
            "contents": "agentclipcatalog(${1:string}, ${2:int})",
            "trigger": "agentclipcatalog\tstring[]\n(string; int)"
        },
        {
            "contents": "agentclipchannel(${1:int}, ${2:int}, ${3:string}, ${4:string})",
            "trigger": "agentclipchannel\tint\n(int; int; string; string)"
        },
        {
            "contents": "agentclipchannel(${1:string}, ${2:int}, ${3:string}, ${4:string})",
            "trigger": "agentclipchannel\tint\n(string; int; string; string)"
        },
        {
            "contents": "agentcliplength(${1:int}, ${2:int}, ${3:string})",
            "trigger": "agentcliplength\tfloat\n(int; int; string)"
        },
        {
            "contents": "agentcliplength(${1:string}, ${2:int}, ${3:string})",
            "trigger": "agentcliplength\tfloat\n(string; int; string)"
        },
        {
            "contents": "agentclipnames(${1:int}, ${2:int})",
            "trigger": "agentclipnames\tstring[]\n(int; int)"
        },
        {
            "contents": "agentclipnames(${1:string}, ${2:int})",
            "trigger": "agentclipnames\tstring[]\n(string; int)"
        },
        {
            "contents": "agentclipsample(${1:int}, ${2:int}, ${3:string}, ${4:float}, ${5:int})",
            "trigger": "agentclipsample\tfloat\n(int; int; string; float; int)"
        },
        {
            "contents": "agentclipsample(${1:int}, ${2:int}, ${3:string}, ${4:float}, ${5:string})",
            "trigger": "agentclipsample\tfloat\n(int; int; string; float; string)"
        },
        {
            "contents": "agentclipsample(${1:string}, ${2:int}, ${3:string}, ${4:float}, ${5:int})",
            "trigger": "agentclipsample\tfloat\n(string; int; string; float; int)"
        },
        {
            "contents": "agentclipsample(${1:string}, ${2:int}, ${3:string}, ${4:float}, ${5:string})",
            "trigger": "agentclipsample\tfloat\n(string; int; string; float; string)"
        },
        {
            "contents": "agentclipsamplelocal(${1:int}, ${2:int}, ${3:string}, ${4:float}, ${5:int})",
            "trigger": "agentclipsamplelocal\tmatrix\n(int; int; string; float; int)"
        },
        {
            "contents": "agentclipsamplelocal(${1:string}, ${2:int}, ${3:string}, ${4:float}, ${5:int})",
            "trigger": "agentclipsamplelocal\tmatrix\n(string; int; string; float; int)"
        },
        {
            "contents": "agentclipsamplelocal(${1:int}, ${2:int}, ${3:string}, ${4:float})",
            "trigger": "agentclipsamplelocal\tmatrix[]\n(int; int; string; float)"
        },
        {
            "contents": "agentclipsamplelocal(${1:string}, ${2:int}, ${3:string}, ${4:float})",
            "trigger": "agentclipsamplelocal\tmatrix[]\n(string; int; string; float)"
        },
        {
            "contents": "agentclipsamplerate(${1:int}, ${2:int}, ${3:string})",
            "trigger": "agentclipsamplerate\tfloat\n(int; int; string)"
        },
        {
            "contents": "agentclipsamplerate(${1:string}, ${2:int}, ${3:string})",
            "trigger": "agentclipsamplerate\tfloat\n(string; int; string)"
        },
        {
            "contents": "agentclipsampleworld(${1:int}, ${2:int}, ${3:string}, ${4:float}, ${5:int})",
            "trigger": "agentclipsampleworld\tmatrix\n(int; int; string; float; int)"
        },
        {
            "contents": "agentclipsampleworld(${1:string}, ${2:int}, ${3:string}, ${4:float}, ${5:int})",
            "trigger": "agentclipsampleworld\tmatrix\n(string; int; string; float; int)"
        },
        {
            "contents": "agentclipsampleworld(${1:int}, ${2:int}, ${3:string}, ${4:float})",
            "trigger": "agentclipsampleworld\tmatrix[]\n(int; int; string; float)"
        },
        {
            "contents": "agentclipsampleworld(${1:string}, ${2:int}, ${3:string}, ${4:float})",
            "trigger": "agentclipsampleworld\tmatrix[]\n(string; int; string; float)"
        },
        {
            "contents": "agentcliptimes(${1:int}, ${2:int})",
            "trigger": "agentcliptimes\tfloat[]\n(int; int)"
        },
        {
            "contents": "agentcliptimes(${1:string}, ${2:int})",
            "trigger": "agentcliptimes\tfloat[]\n(string; int)"
        },
        {
            "contents": "agentcliptransformgroups(${1:int}, ${2:int})",
            "trigger": "agentcliptransformgroups\tstring[]\n(int; int)"
        },
        {
            "contents": "agentcliptransformgroups(${1:string}, ${2:int})",
            "trigger": "agentcliptransformgroups\tstring[]\n(string; int)"
        },
        {
            "contents": "agentclipweights(${1:int}, ${2:int})",
            "trigger": "agentclipweights\tfloat[]\n(int; int)"
        },
        {
            "contents": "agentclipweights(${1:string}, ${2:int})",
            "trigger": "agentclipweights\tfloat[]\n(string; int)"
        },
        {
            "contents": "agentcollisionlayer(${1:int}, ${2:int})",
            "trigger": "agentcollisionlayer\tstring\n(int; int)"
        },
        {
            "contents": "agentcollisionlayer(${1:string}, ${2:int})",
            "trigger": "agentcollisionlayer\tstring\n(string; int)"
        },
        {
            "contents": "agentcurrentlayer(${1:int}, ${2:int})",
            "trigger": "agentcurrentlayer\tstring\n(int; int)"
        },
        {
            "contents": "agentcurrentlayer(${1:string}, ${2:int})",
            "trigger": "agentcurrentlayer\tstring\n(string; int)"
        },
        {
            "contents": "agentlayerbindings(${1:int}, ${2:int}, ${3:string}, ${4:string})",
            "trigger": "agentlayerbindings\tint[]\n(int; int; string; string)"
        },
        {
            "contents": "agentlayerbindings(${1:string}, ${2:int}, ${3:string}, ${4:string})",
            "trigger": "agentlayerbindings\tint[]\n(string; int; string; string)"
        },
        {
            "contents": "agentlayers(${1:int}, ${2:int})",
            "trigger": "agentlayers\tstring[]\n(int; int)"
        },
        {
            "contents": "agentlayers(${1:string}, ${2:int})",
            "trigger": "agentlayers\tstring[]\n(string; int)"
        },
        {
            "contents": "agentlayershapes(${1:int}, ${2:int}, ${3:string}, ${4:int})",
            "trigger": "agentlayershapes\tstring[]\n(int; int; string; int)"
        },
        {
            "contents": "agentlayershapes(${1:int}, ${2:int}, ${3:string}, ${4:string})",
            "trigger": "agentlayershapes\tstring[]\n(int; int; string; string)"
        },
        {
            "contents": "agentlayershapes(${1:string}, ${2:int}, ${3:string}, ${4:int})",
            "trigger": "agentlayershapes\tstring[]\n(string; int; string; int)"
        },
        {
            "contents": "agentlayershapes(${1:string}, ${2:int}, ${3:string}, ${4:string})",
            "trigger": "agentlayershapes\tstring[]\n(string; int; string; string)"
        },
        {
            "contents": "agentlocaltransform(${1:int}, ${2:int}, ${3:int})",
            "trigger": "agentlocaltransform\tmatrix\n(int; int; int)"
        },
        {
            "contents": "agentlocaltransform(${1:string}, ${2:int}, ${3:int})",
            "trigger": "agentlocaltransform\tmatrix\n(string; int; int)"
        },
        {
            "contents": "agentlocaltransforms(${1:int}, ${2:int})",
            "trigger": "agentlocaltransforms\tmatrix[]\n(int; int)"
        },
        {
            "contents": "agentlocaltransforms(${1:string}, ${2:int})",
            "trigger": "agentlocaltransforms\tmatrix[]\n(string; int)"
        },
        {
            "contents": "agentrigchildren(${1:int}, ${2:int}, ${3:int})",
            "trigger": "agentrigchildren\tint[]\n(int; int; int)"
        },
        {
            "contents": "agentrigchildren(${1:string}, ${2:int}, ${3:int})",
            "trigger": "agentrigchildren\tint[]\n(string; int; int)"
        },
        {
            "contents": "agentrigfind(${1:int}, ${2:int}, ${3:string})",
            "trigger": "agentrigfind\tint\n(int; int; string)"
        },
        {
            "contents": "agentrigfind(${1:string}, ${2:int}, ${3:string})",
            "trigger": "agentrigfind\tint\n(string; int; string)"
        },
        {
            "contents": "agentrigparent(${1:int}, ${2:int}, ${3:int})",
            "trigger": "agentrigparent\tint\n(int; int; int)"
        },
        {
            "contents": "agentrigparent(${1:string}, ${2:int}, ${3:int})",
            "trigger": "agentrigparent\tint\n(string; int; int)"
        },
        {
            "contents": "agenttransformcount(${1:int}, ${2:int})",
            "trigger": "agenttransformcount\tint\n(int; int)"
        },
        {
            "contents": "agenttransformcount(${1:string}, ${2:int})",
            "trigger": "agenttransformcount\tint\n(string; int)"
        },
        {
            "contents": "agenttransformgroupmember(${1:int}, ${2:int}, ${3:string}, ${4:int})",
            "trigger": "agenttransformgroupmember\tint\n(int; int; string; int)"
        },
        {
            "contents": "agenttransformgroupmember(${1:string}, ${2:int}, ${3:string}, ${4:int})",
            "trigger": "agenttransformgroupmember\tint\n(string; int; string; int)"
        },
        {
            "contents": "agenttransformgroups(${1:int}, ${2:int})",
            "trigger": "agenttransformgroups\tstring[]\n(int; int)"
        },
        {
            "contents": "agenttransformgroups(${1:string}, ${2:int})",
            "trigger": "agenttransformgroups\tstring[]\n(string; int)"
        },
        {
            "contents": "agenttransformnames(${1:int}, ${2:int})",
            "trigger": "agenttransformnames\tstring[]\n(int; int)"
        },
        {
            "contents": "agenttransformnames(${1:string}, ${2:int})",
            "trigger": "agenttransformnames\tstring[]\n(string; int)"
        },
        {
            "contents": "agenttransformtolocal(${1:int}, ${2:int}, ${3:matrix[] &})",
            "trigger": "agenttransformtolocal\tint\n(int; int; matrix[] &)"
        },
        {
            "contents": "agenttransformtolocal(${1:string}, ${2:int}, ${3:matrix[] &})",
            "trigger": "agenttransformtolocal\tint\n(string; int; matrix[] &)"
        },
        {
            "contents": "agenttransformtoworld(${1:int}, ${2:int}, ${3:matrix[] &})",
            "trigger": "agenttransformtoworld\tint\n(int; int; matrix[] &)"
        },
        {
            "contents": "agenttransformtoworld(${1:string}, ${2:int}, ${3:matrix[] &})",
            "trigger": "agenttransformtoworld\tint\n(string; int; matrix[] &)"
        },
        {
            "contents": "agentworldtransform(${1:int}, ${2:int}, ${3:int})",
            "trigger": "agentworldtransform\tmatrix\n(int; int; int)"
        },
        {
            "contents": "agentworldtransform(${1:string}, ${2:int}, ${3:int})",
            "trigger": "agentworldtransform\tmatrix\n(string; int; int)"
        },
        {
            "contents": "agentworldtransforms(${1:int}, ${2:int})",
            "trigger": "agentworldtransforms\tmatrix[]\n(int; int)"
        },
        {
            "contents": "agentworldtransforms(${1:string}, ${2:int})",
            "trigger": "agentworldtransforms\tmatrix[]\n(string; int)"
        },
        {
            "contents": "albedo(${1:bsdf}, ${2:int})",
            "trigger": "albedo\tvector\n(bsdf; int)"
        },
        {
            "contents": "albedo(${1:bsdf}, ${2:int}, ${3:...})",
            "trigger": "albedo\tvector\n(bsdf; int; ...)"
        },
        {
            "contents": "albedo(${1:bsdf}, ${2:vector}, ${3:int})",
            "trigger": "albedo\tvector\n(bsdf; vector; int)"
        },
        {
            "contents": "albedo(${1:bsdf}, ${2:vector}, ${3:int}, ${4:...})",
            "trigger": "albedo\tvector\n(bsdf; vector; int; ...)"
        },
        {
            "contents": "albedo(${1:bsdf}, ${2:vector})",
            "trigger": "albedo\tvector\n(bsdf; vector)"
        },
        {
            "contents": "albedo(${1:bsdf}, ${2:vector}, ${3:...})",
            "trigger": "albedo\tvector\n(bsdf; vector; ...)"
        },
        {
            "contents": "albedo(${1:bsdf})",
            "trigger": "albedo\tvector\n(bsdf)"
        },
        {
            "contents": "albedo(${1:bsdf}, ${2:...})",
            "trigger": "albedo\tvector\n(bsdf; ...)"
        },
        {
            "contents": "anoise(${1:vector})",
            "trigger": "anoise\tfloat\n(vector)"
        },
        {
            "contents": "anoise(${1:vector}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "anoise\tfloat\n(vector; int; float; float)"
        },
        {
            "contents": "anoise(${1:vector})",
            "trigger": "anoise\tvector\n(vector)"
        },
        {
            "contents": "anoise(${1:vector}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "anoise\tvector\n(vector; int; float; float)"
        },
        {
            "contents": "append(${1:string &}, ${2:string})",
            "trigger": "append\tvoid\n(string &; string)"
        },
        {
            "contents": "append(${1:matrix2[] &}, ${2:matrix2})",
            "trigger": "append\tvoid\n(matrix2[] &; matrix2)"
        },
        {
            "contents": "append(${1:matrix2[] &}, ${2:matrix2[]})",
            "trigger": "append\tvoid\n(matrix2[] &; matrix2[])"
        },
        {
            "contents": "append(${1:matrix3[] &}, ${2:matrix3})",
            "trigger": "append\tvoid\n(matrix3[] &; matrix3)"
        },
        {
            "contents": "append(${1:matrix3[] &}, ${2:matrix3[]})",
            "trigger": "append\tvoid\n(matrix3[] &; matrix3[])"
        },
        {
            "contents": "append(${1:matrix[] &}, ${2:matrix})",
            "trigger": "append\tvoid\n(matrix[] &; matrix)"
        },
        {
            "contents": "append(${1:matrix[] &}, ${2:matrix[]})",
            "trigger": "append\tvoid\n(matrix[] &; matrix[])"
        },
        {
            "contents": "append(${1:float[] &}, ${2:float})",
            "trigger": "append\tvoid\n(float[] &; float)"
        },
        {
            "contents": "append(${1:float[] &}, ${2:float[]})",
            "trigger": "append\tvoid\n(float[] &; float[])"
        },
        {
            "contents": "append(${1:int[] &}, ${2:int})",
            "trigger": "append\tvoid\n(int[] &; int)"
        },
        {
            "contents": "append(${1:int[] &}, ${2:int[]})",
            "trigger": "append\tvoid\n(int[] &; int[])"
        },
        {
            "contents": "append(${1:vector4[] &}, ${2:vector4})",
            "trigger": "append\tvoid\n(vector4[] &; vector4)"
        },
        {
            "contents": "append(${1:vector4[] &}, ${2:vector4[]})",
            "trigger": "append\tvoid\n(vector4[] &; vector4[])"
        },
        {
            "contents": "append(${1:string[] &}, ${2:string})",
            "trigger": "append\tvoid\n(string[] &; string)"
        },
        {
            "contents": "append(${1:string[] &}, ${2:string[]})",
            "trigger": "append\tvoid\n(string[] &; string[])"
        },
        {
            "contents": "append(${1:vector2[] &}, ${2:vector2})",
            "trigger": "append\tvoid\n(vector2[] &; vector2)"
        },
        {
            "contents": "append(${1:vector2[] &}, ${2:vector2[]})",
            "trigger": "append\tvoid\n(vector2[] &; vector2[])"
        },
        {
            "contents": "append(${1:vector[] &}, ${2:vector})",
            "trigger": "append\tvoid\n(vector[] &; vector)"
        },
        {
            "contents": "append(${1:vector[] &}, ${2:vector[]})",
            "trigger": "append\tvoid\n(vector[] &; vector[])"
        },
        {
            "contents": "area(${1:vector})",
            "trigger": "area\tfloat\n(vector)"
        },
        {
            "contents": "area(${1:vector}, ${2:...})",
            "trigger": "area\tfloat\n(vector; ...)"
        },
        {
            "contents": "argsort(${1:float[]})",
            "trigger": "argsort\tint[]\n(float[])"
        },
        {
            "contents": "argsort(${1:int[]})",
            "trigger": "argsort\tint[]\n(int[])"
        },
        {
            "contents": "argsort(${1:string[]})",
            "trigger": "argsort\tint[]\n(string[])"
        },
        {
            "contents": "array()",
            "trigger": "array\tmatrix2[]\n()"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tmatrix2[]\n(...)"
        },
        {
            "contents": "array()",
            "trigger": "array\tmatrix3[]\n()"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tmatrix3[]\n(...)"
        },
        {
            "contents": "array()",
            "trigger": "array\tmatrix[]\n()"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tmatrix[]\n(...)"
        },
        {
            "contents": "array()",
            "trigger": "array\tfloat[]\n()"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tfloat[]\n(...)"
        },
        {
            "contents": "array()",
            "trigger": "array\tint[]\n()"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tint[]\n(...)"
        },
        {
            "contents": "array()",
            "trigger": "array\tvector4[]\n()"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tvector4[]\n(...)"
        },
        {
            "contents": "array()",
            "trigger": "array\tstring[]\n()"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tstring[]\n(...)"
        },
        {
            "contents": "array()",
            "trigger": "array\tvector2[]\n()"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tvector2[]\n(...)"
        },
        {
            "contents": "array()",
            "trigger": "array\tvector[]\n()"
        },
        {
            "contents": "array(${1:...})",
            "trigger": "array\tvector[]\n(...)"
        },
        {
            "contents": "ashikhmin(${1:vector}, ${2:float}, ${3:float}, ${4:vector}, ${5:vector})",
            "trigger": "ashikhmin\tbsdf\n(vector; float; float; vector; vector)"
        },
        {
            "contents": "ashikhmin(${1:vector}, ${2:float}, ${3:float}, ${4:vector}, ${5:vector}, ${6:...})",
            "trigger": "ashikhmin\tbsdf\n(vector; float; float; vector; vector; ...)"
        },
        {
            "contents": "asin(${1:float})",
            "trigger": "asin\tfloat\n(float)"
        },
        {
            "contents": "asin(${1:vector4})",
            "trigger": "asin\tvector4\n(vector4)"
        },
        {
            "contents": "asin(${1:vector2})",
            "trigger": "asin\tvector2\n(vector2)"
        },
        {
            "contents": "asin(${1:vector})",
            "trigger": "asin\tvector\n(vector)"
        },
        {
            "contents": "assert_enabled()",
            "trigger": "assert_enabled\tint\n(void)"
        },
        {
            "contents": "assign(${1:float &}, ${2:float &}, ${3:float &}, ${4:float &}, ${5:matrix2})",
            "trigger": "assign\tvoid\n(float &; float &; float &; float &; matrix2)"
        },
        {
            "contents": "assign(${1:float &}, ${2:float &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:float &}, ${8:float &}, ${9:float &}, ${10:matrix3})",
            "trigger": "assign\tvoid\n(float &; float &; float &; float &; float &; float &; float &; float &; float &; matrix3)"
        },
        {
            "contents": "assign(${1:float &}, ${2:float &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:float &}, ${8:float &}, ${9:float &}, ${10:float &}, ${11:float &}, ${12:float &}, ${13:float &}, ${14:float &}, ${15:float &}, ${16:float &}, ${17:matrix})",
            "trigger": "assign\tvoid\n(float &; float &; float &; float &; float &; float &; float &; float &; float &; float &; float &; float &; float &; float &; float &; float &; matrix)"
        },
        {
            "contents": "assign(${1:float &}, ${2:float &}, ${3:float &}, ${4:float &}, ${5:vector4})",
            "trigger": "assign\tvoid\n(float &; float &; float &; float &; vector4)"
        },
        {
            "contents": "assign(${1:float &}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "assign\tvoid\n(float &; float &; float &; vector)"
        },
        {
            "contents": "assign(${1:float &}, ${2:float &}, ${3:vector2})",
            "trigger": "assign\tvoid\n(float &; float &; vector2)"
        },
        {
            "contents": "atan(${1:float})",
            "trigger": "atan\tfloat\n(float)"
        },
        {
            "contents": "atan(${1:float}, ${2:float})",
            "trigger": "atan\tfloat\n(float; float)"
        },
        {
            "contents": "atan(${1:vector4})",
            "trigger": "atan\tvector4\n(vector4)"
        },
        {
            "contents": "atan(${1:vector2})",
            "trigger": "atan\tvector2\n(vector2)"
        },
        {
            "contents": "atan(${1:vector})",
            "trigger": "atan\tvector\n(vector)"
        },
        {
            "contents": "atan2(${1:float}, ${2:float})",
            "trigger": "atan2\tfloat\n(float; float)"
        },
        {
            "contents": "atof(${1:string})",
            "trigger": "atof\tfloat\n(string)"
        },
        {
            "contents": "atoi(${1:string})",
            "trigger": "atoi\tint\n(string)"
        },
        {
            "contents": "atten(${1:float}, ${2:float})",
            "trigger": "atten\tfloat\n(float; float)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tmatrix2\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tmatrix2\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tmatrix3\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tmatrix3\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tmatrix\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tmatrix\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tfloat\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tfloat\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tint\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tint\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tvector4\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tvector4\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tstring\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tstring\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tvector2\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tvector2\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tvector\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tvector\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tmatrix2[]\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tmatrix2[]\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tmatrix3[]\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tmatrix3[]\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tmatrix[]\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tmatrix[]\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tfloat[]\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tfloat[]\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tint[]\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tint[]\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tvector4[]\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tvector4[]\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tstring[]\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tstring[]\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tvector2[]\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tvector2[]\n(string; string; string; int)"
        },
        {
            "contents": "attrib(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tvector[]\n(int; string; string; int)"
        },
        {
            "contents": "attrib(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "attrib\tvector[]\n(string; string; string; int)"
        },
        {
            "contents": "attribclass(${1:int}, ${2:string})",
            "trigger": "attribclass\tstring\n(int; string)"
        },
        {
            "contents": "attribclass(${1:string}, ${2:string})",
            "trigger": "attribclass\tstring\n(string; string)"
        },
        {
            "contents": "attribsize(${1:int}, ${2:string}, ${3:string})",
            "trigger": "attribsize\tint\n(int; string; string)"
        },
        {
            "contents": "attribsize(${1:string}, ${2:string}, ${3:string})",
            "trigger": "attribsize\tint\n(string; string; string)"
        },
        {
            "contents": "attribtype(${1:int}, ${2:string}, ${3:string})",
            "trigger": "attribtype\tint\n(int; string; string)"
        },
        {
            "contents": "attribtype(${1:string}, ${2:string}, ${3:string})",
            "trigger": "attribtype\tint\n(string; string; string)"
        },
        {
            "contents": "attribtypeinfo(${1:int}, ${2:string}, ${3:string})",
            "trigger": "attribtypeinfo\tstring\n(int; string; string)"
        },
        {
            "contents": "attribtypeinfo(${1:string}, ${2:string}, ${3:string})",
            "trigger": "attribtypeinfo\tstring\n(string; string; string)"
        },
        {
            "contents": "avg(${1:float})",
            "trigger": "avg\tfloat\n(float)"
        },
        {
            "contents": "avg(${1:float}, ${2:float})",
            "trigger": "avg\tfloat\n(float; float)"
        },
        {
            "contents": "avg(${1:float}, ${2:float}, ${3:...})",
            "trigger": "avg\tfloat\n(float; float; ...)"
        },
        {
            "contents": "avg(${1:vector4})",
            "trigger": "avg\tfloat\n(vector4)"
        },
        {
            "contents": "avg(${1:vector2})",
            "trigger": "avg\tfloat\n(vector2)"
        },
        {
            "contents": "avg(${1:vector})",
            "trigger": "avg\tfloat\n(vector)"
        },
        {
            "contents": "avg(${1:float[]})",
            "trigger": "avg\tfloat\n(float[])"
        },
        {
            "contents": "avg(${1:int})",
            "trigger": "avg\tint\n(int)"
        },
        {
            "contents": "avg(${1:int[]})",
            "trigger": "avg\tint\n(int[])"
        },
        {
            "contents": "avg(${1:vector4}, ${2:vector4})",
            "trigger": "avg\tvector4\n(vector4; vector4)"
        },
        {
            "contents": "avg(${1:vector4}, ${2:vector4}, ${3:...})",
            "trigger": "avg\tvector4\n(vector4; vector4; ...)"
        },
        {
            "contents": "avg(${1:vector4[]})",
            "trigger": "avg\tvector4\n(vector4[])"
        },
        {
            "contents": "avg(${1:vector2}, ${2:vector2})",
            "trigger": "avg\tvector2\n(vector2; vector2)"
        },
        {
            "contents": "avg(${1:vector2}, ${2:vector2}, ${3:...})",
            "trigger": "avg\tvector2\n(vector2; vector2; ...)"
        },
        {
            "contents": "avg(${1:vector2[]})",
            "trigger": "avg\tvector2\n(vector2[])"
        },
        {
            "contents": "avg(${1:vector}, ${2:vector})",
            "trigger": "avg\tvector\n(vector; vector)"
        },
        {
            "contents": "avg(${1:vector}, ${2:vector}, ${3:...})",
            "trigger": "avg\tvector\n(vector; vector; ...)"
        },
        {
            "contents": "avg(${1:vector[]})",
            "trigger": "avg\tvector\n(vector[])"
        },
        {
            "contents": "blackbody(${1:float}, ${2:float})",
            "trigger": "blackbody\tvector\n(float; float)"
        },
        {
            "contents": "blinn(${1:vector}, ${2:float})",
            "trigger": "blinn\tbsdf\n(vector; float)"
        },
        {
            "contents": "blinn(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "blinn\tbsdf\n(vector; float; ...)"
        },
        {
            "contents": "blinnBRDF(${1:vector}, ${2:vector}, ${3:vector}, ${4:float})",
            "trigger": "blinnBRDF\tfloat\n(vector; vector; vector; float)"
        },
        {
            "contents": "bouncelabel(${1:int})",
            "trigger": "bouncelabel\tstring\n(int)"
        },
        {
            "contents": "bouncemask(${1:string})",
            "trigger": "bouncemask\tint\n(string)"
        },
        {
            "contents": "bumpmap(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "bumpmap\tvoid\n(string; float &; float &; float; float)"
        },
        {
            "contents": "bumpmap(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "bumpmap\tvoid\n(string; float &; float &; vector)"
        },
        {
            "contents": "bumpmapA(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "bumpmapA\tvoid\n(string; float &; float &; float; float)"
        },
        {
            "contents": "bumpmapA(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "bumpmapA\tvoid\n(string; float &; float &; vector)"
        },
        {
            "contents": "bumpmapB(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "bumpmapB\tvoid\n(string; float &; float &; float; float)"
        },
        {
            "contents": "bumpmapB(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "bumpmapB\tvoid\n(string; float &; float &; vector)"
        },
        {
            "contents": "bumpmapG(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "bumpmapG\tvoid\n(string; float &; float &; float; float)"
        },
        {
            "contents": "bumpmapG(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "bumpmapG\tvoid\n(string; float &; float &; vector)"
        },
        {
            "contents": "bumpmapL(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "bumpmapL\tvoid\n(string; float &; float &; float; float)"
        },
        {
            "contents": "bumpmapL(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "bumpmapL\tvoid\n(string; float &; float &; vector)"
        },
        {
            "contents": "bumpmapR(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "bumpmapR\tvoid\n(string; float &; float &; float; float)"
        },
        {
            "contents": "bumpmapR(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "bumpmapR\tvoid\n(string; float &; float &; vector)"
        },
        {
            "contents": "cbrt(${1:float})",
            "trigger": "cbrt\tfloat\n(float)"
        },
        {
            "contents": "cbrt(${1:vector4})",
            "trigger": "cbrt\tvector4\n(vector4)"
        },
        {
            "contents": "cbrt(${1:vector2})",
            "trigger": "cbrt\tvector2\n(vector2)"
        },
        {
            "contents": "cbrt(${1:vector})",
            "trigger": "cbrt\tvector\n(vector)"
        },
        {
            "contents": "ceil(${1:float})",
            "trigger": "ceil\tfloat\n(float)"
        },
        {
            "contents": "ceil(${1:vector4})",
            "trigger": "ceil\tvector4\n(vector4)"
        },
        {
            "contents": "ceil(${1:vector2})",
            "trigger": "ceil\tvector2\n(vector2)"
        },
        {
            "contents": "ceil(${1:vector})",
            "trigger": "ceil\tvector\n(vector)"
        },
        {
            "contents": "ch(${1:string})",
            "trigger": "ch\tfloat\n(string)"
        },
        {
            "contents": "ch(${1:string}, ${2:float})",
            "trigger": "ch\tfloat\n(string; float)"
        },
        {
            "contents": "ch(${1:string})",
            "trigger": "ch\tstring\n(string)"
        },
        {
            "contents": "ch(${1:string}, ${2:float})",
            "trigger": "ch\tstring\n(string; float)"
        },
        {
            "contents": "ch3(${1:string})",
            "trigger": "ch3\tmatrix3\n(string)"
        },
        {
            "contents": "ch3(${1:string}, ${2:float})",
            "trigger": "ch3\tmatrix3\n(string; float)"
        },
        {
            "contents": "ch4(${1:string})",
            "trigger": "ch4\tmatrix\n(string)"
        },
        {
            "contents": "ch4(${1:string}, ${2:float})",
            "trigger": "ch4\tmatrix\n(string; float)"
        },
        {
            "contents": "chadd(${1:string})",
            "trigger": "chadd\tint\n(string)"
        },
        {
            "contents": "chadd(${1:string[]})",
            "trigger": "chadd\tint\n(string[])"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int &})",
            "trigger": "chattr\tmatrix2\n(int; string; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tmatrix2\n(int; string; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tmatrix2\n(int; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:int &})",
            "trigger": "chattr\tmatrix2\n(int; string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int &})",
            "trigger": "chattr\tmatrix2\n(string; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int &})",
            "trigger": "chattr\tmatrix2\n(string; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tmatrix2\n(string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tmatrix2\n(string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int &})",
            "trigger": "chattr\tmatrix3\n(int; string; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tmatrix3\n(int; string; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tmatrix3\n(int; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:int &})",
            "trigger": "chattr\tmatrix3\n(int; string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int &})",
            "trigger": "chattr\tmatrix3\n(string; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int &})",
            "trigger": "chattr\tmatrix3\n(string; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tmatrix3\n(string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tmatrix3\n(string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int &})",
            "trigger": "chattr\tmatrix\n(int; string; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tmatrix\n(int; string; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tmatrix\n(int; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:int &})",
            "trigger": "chattr\tmatrix\n(int; string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int &})",
            "trigger": "chattr\tmatrix\n(string; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int &})",
            "trigger": "chattr\tmatrix\n(string; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tmatrix\n(string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tmatrix\n(string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int &})",
            "trigger": "chattr\tfloat\n(int; string; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tfloat\n(int; string; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tfloat\n(int; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:int &})",
            "trigger": "chattr\tfloat\n(int; string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int &})",
            "trigger": "chattr\tfloat\n(string; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int &})",
            "trigger": "chattr\tfloat\n(string; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tfloat\n(string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tfloat\n(string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int &})",
            "trigger": "chattr\tint\n(int; string; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tint\n(int; string; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tint\n(int; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:int &})",
            "trigger": "chattr\tint\n(int; string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int &})",
            "trigger": "chattr\tint\n(string; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int &})",
            "trigger": "chattr\tint\n(string; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tint\n(string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tint\n(string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int &})",
            "trigger": "chattr\tvector4\n(int; string; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tvector4\n(int; string; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tvector4\n(int; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:int &})",
            "trigger": "chattr\tvector4\n(int; string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int &})",
            "trigger": "chattr\tvector4\n(string; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int &})",
            "trigger": "chattr\tvector4\n(string; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tvector4\n(string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tvector4\n(string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int &})",
            "trigger": "chattr\tstring\n(int; string; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tstring\n(int; string; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tstring\n(int; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:int &})",
            "trigger": "chattr\tstring\n(int; string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int &})",
            "trigger": "chattr\tstring\n(string; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int &})",
            "trigger": "chattr\tstring\n(string; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tstring\n(string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tstring\n(string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int &})",
            "trigger": "chattr\tvector2\n(int; string; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tvector2\n(int; string; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tvector2\n(int; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:int &})",
            "trigger": "chattr\tvector2\n(int; string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int &})",
            "trigger": "chattr\tvector2\n(string; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int &})",
            "trigger": "chattr\tvector2\n(string; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tvector2\n(string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tvector2\n(string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int &})",
            "trigger": "chattr\tvector\n(int; string; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tvector\n(int; string; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tvector\n(int; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:int &})",
            "trigger": "chattr\tvector\n(int; string; string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int &})",
            "trigger": "chattr\tvector\n(string; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int &})",
            "trigger": "chattr\tvector\n(string; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:int}, ${3:int}, ${4:int &})",
            "trigger": "chattr\tvector\n(string; int; int; int &)"
        },
        {
            "contents": "chattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:int &})",
            "trigger": "chattr\tvector\n(string; string; int; int; int &)"
        },
        {
            "contents": "chattrnames(${1:int}, ${2:string})",
            "trigger": "chattrnames\tstring[]\n(int; string)"
        },
        {
            "contents": "chattrnames(${1:string})",
            "trigger": "chattrnames\tstring[]\n(string)"
        },
        {
            "contents": "chend()",
            "trigger": "chend\tint\n(void)"
        },
        {
            "contents": "chend(${1:int})",
            "trigger": "chend\tint\n(int)"
        },
        {
            "contents": "chendf()",
            "trigger": "chendf\tfloat\n(void)"
        },
        {
            "contents": "chendf(${1:int})",
            "trigger": "chendf\tfloat\n(int)"
        },
        {
            "contents": "chendt()",
            "trigger": "chendt\tfloat\n(void)"
        },
        {
            "contents": "chendt(${1:int})",
            "trigger": "chendt\tfloat\n(int)"
        },
        {
            "contents": "chf(${1:string})",
            "trigger": "chf\tfloat\n(string)"
        },
        {
            "contents": "chf(${1:string}, ${2:float})",
            "trigger": "chf\tfloat\n(string; float)"
        },
        {
            "contents": "chi(${1:string})",
            "trigger": "chi\tint\n(string)"
        },
        {
            "contents": "chi(${1:string}, ${2:float})",
            "trigger": "chi\tint\n(string; float)"
        },
        {
            "contents": "chindex(${1:int}, ${2:string})",
            "trigger": "chindex\tint\n(int; string)"
        },
        {
            "contents": "chindex(${1:string})",
            "trigger": "chindex\tint\n(string)"
        },
        {
            "contents": "chindex(${1:string[]})",
            "trigger": "chindex\tint[]\n(string[])"
        },
        {
            "contents": "chinput(${1:int}, ${2:float})",
            "trigger": "chinput\tmatrix2\n(int; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int})",
            "trigger": "chinput\tmatrix2\n(int; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int}, ${3:float})",
            "trigger": "chinput\tmatrix2\n(int; int; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int}, ${3:int})",
            "trigger": "chinput\tmatrix2\n(int; int; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:string}, ${3:float})",
            "trigger": "chinput\tmatrix2\n(int; string; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:string}, ${3:int})",
            "trigger": "chinput\tmatrix2\n(int; string; int)"
        },
        {
            "contents": "chinput(${1:string}, ${2:float})",
            "trigger": "chinput\tmatrix2\n(string; float)"
        },
        {
            "contents": "chinput(${1:string}, ${2:int})",
            "trigger": "chinput\tmatrix2\n(string; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:float})",
            "trigger": "chinput\tmatrix3\n(int; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int})",
            "trigger": "chinput\tmatrix3\n(int; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int}, ${3:float})",
            "trigger": "chinput\tmatrix3\n(int; int; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int}, ${3:int})",
            "trigger": "chinput\tmatrix3\n(int; int; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:string}, ${3:float})",
            "trigger": "chinput\tmatrix3\n(int; string; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:string}, ${3:int})",
            "trigger": "chinput\tmatrix3\n(int; string; int)"
        },
        {
            "contents": "chinput(${1:string}, ${2:float})",
            "trigger": "chinput\tmatrix3\n(string; float)"
        },
        {
            "contents": "chinput(${1:string}, ${2:int})",
            "trigger": "chinput\tmatrix3\n(string; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:float})",
            "trigger": "chinput\tmatrix\n(int; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int})",
            "trigger": "chinput\tmatrix\n(int; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int}, ${3:float})",
            "trigger": "chinput\tmatrix\n(int; int; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int}, ${3:int})",
            "trigger": "chinput\tmatrix\n(int; int; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:string}, ${3:float})",
            "trigger": "chinput\tmatrix\n(int; string; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:string}, ${3:int})",
            "trigger": "chinput\tmatrix\n(int; string; int)"
        },
        {
            "contents": "chinput(${1:string}, ${2:float})",
            "trigger": "chinput\tmatrix\n(string; float)"
        },
        {
            "contents": "chinput(${1:string}, ${2:int})",
            "trigger": "chinput\tmatrix\n(string; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:float})",
            "trigger": "chinput\tfloat\n(int; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int})",
            "trigger": "chinput\tfloat\n(int; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int}, ${3:float})",
            "trigger": "chinput\tfloat\n(int; int; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int}, ${3:int})",
            "trigger": "chinput\tfloat\n(int; int; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:string}, ${3:float})",
            "trigger": "chinput\tfloat\n(int; string; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:string}, ${3:int})",
            "trigger": "chinput\tfloat\n(int; string; int)"
        },
        {
            "contents": "chinput(${1:string}, ${2:float})",
            "trigger": "chinput\tfloat\n(string; float)"
        },
        {
            "contents": "chinput(${1:string}, ${2:int})",
            "trigger": "chinput\tfloat\n(string; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:float})",
            "trigger": "chinput\tvector4\n(int; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int})",
            "trigger": "chinput\tvector4\n(int; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int}, ${3:float})",
            "trigger": "chinput\tvector4\n(int; int; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int}, ${3:int})",
            "trigger": "chinput\tvector4\n(int; int; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:string}, ${3:float})",
            "trigger": "chinput\tvector4\n(int; string; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:string}, ${3:int})",
            "trigger": "chinput\tvector4\n(int; string; int)"
        },
        {
            "contents": "chinput(${1:string}, ${2:float})",
            "trigger": "chinput\tvector4\n(string; float)"
        },
        {
            "contents": "chinput(${1:string}, ${2:int})",
            "trigger": "chinput\tvector4\n(string; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:float})",
            "trigger": "chinput\tvector2\n(int; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int})",
            "trigger": "chinput\tvector2\n(int; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int}, ${3:float})",
            "trigger": "chinput\tvector2\n(int; int; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int}, ${3:int})",
            "trigger": "chinput\tvector2\n(int; int; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:string}, ${3:float})",
            "trigger": "chinput\tvector2\n(int; string; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:string}, ${3:int})",
            "trigger": "chinput\tvector2\n(int; string; int)"
        },
        {
            "contents": "chinput(${1:string}, ${2:float})",
            "trigger": "chinput\tvector2\n(string; float)"
        },
        {
            "contents": "chinput(${1:string}, ${2:int})",
            "trigger": "chinput\tvector2\n(string; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:float})",
            "trigger": "chinput\tvector\n(int; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int})",
            "trigger": "chinput\tvector\n(int; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int}, ${3:float})",
            "trigger": "chinput\tvector\n(int; int; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:int}, ${3:int})",
            "trigger": "chinput\tvector\n(int; int; int)"
        },
        {
            "contents": "chinput(${1:int}, ${2:string}, ${3:float})",
            "trigger": "chinput\tvector\n(int; string; float)"
        },
        {
            "contents": "chinput(${1:int}, ${2:string}, ${3:int})",
            "trigger": "chinput\tvector\n(int; string; int)"
        },
        {
            "contents": "chinput(${1:string}, ${2:float})",
            "trigger": "chinput\tvector\n(string; float)"
        },
        {
            "contents": "chinput(${1:string}, ${2:int})",
            "trigger": "chinput\tvector\n(string; int)"
        },
        {
            "contents": "chinputlimits(${1:int}, ${2:int}, ${3:float &}, ${4:float &})",
            "trigger": "chinputlimits\tint\n(int; int; float &; float &)"
        },
        {
            "contents": "chname(${1:int})",
            "trigger": "chname\tstring\n(int)"
        },
        {
            "contents": "chname(${1:int}, ${2:int})",
            "trigger": "chname\tstring\n(int; int)"
        },
        {
            "contents": "chnames()",
            "trigger": "chnames\tstring[]\n(void)"
        },
        {
            "contents": "chnames(${1:int})",
            "trigger": "chnames\tstring[]\n(int)"
        },
        {
            "contents": "chnumchan()",
            "trigger": "chnumchan\tint\n(void)"
        },
        {
            "contents": "chnumchan(${1:int})",
            "trigger": "chnumchan\tint\n(int)"
        },
        {
            "contents": "chp(${1:string})",
            "trigger": "chp\tvector4\n(string)"
        },
        {
            "contents": "chp(${1:string}, ${2:float})",
            "trigger": "chp\tvector4\n(string; float)"
        },
        {
            "contents": "chr(${1:int})",
            "trigger": "chr\tstring\n(int)"
        },
        {
            "contents": "chramp(${1:string}, ${2:float})",
            "trigger": "chramp\tfloat\n(string; float)"
        },
        {
            "contents": "chramp(${1:string}, ${2:float}, ${3:float})",
            "trigger": "chramp\tfloat\n(string; float; float)"
        },
        {
            "contents": "chramp(${1:string}, ${2:float})",
            "trigger": "chramp\tvector\n(string; float)"
        },
        {
            "contents": "chramp(${1:string}, ${2:float}, ${3:float})",
            "trigger": "chramp\tvector\n(string; float; float)"
        },
        {
            "contents": "chrate()",
            "trigger": "chrate\tfloat\n(void)"
        },
        {
            "contents": "chrate(${1:int})",
            "trigger": "chrate\tfloat\n(int)"
        },
        {
            "contents": "chreadbuf(${1:int})",
            "trigger": "chreadbuf\tfloat\n(int)"
        },
        {
            "contents": "chremove(${1:int})",
            "trigger": "chremove\tint\n(int)"
        },
        {
            "contents": "chremove(${1:string})",
            "trigger": "chremove\tint\n(string)"
        },
        {
            "contents": "chremove(${1:int[]})",
            "trigger": "chremove\tint\n(int[])"
        },
        {
            "contents": "chremove(${1:string[]})",
            "trigger": "chremove\tint\n(string[])"
        },
        {
            "contents": "chremoveattr(${1:string})",
            "trigger": "chremoveattr\tint\n(string)"
        },
        {
            "contents": "chremoveattr(${1:string}, ${2:string})",
            "trigger": "chremoveattr\tint\n(string; string)"
        },
        {
            "contents": "chremoveattr(${1:string}, ${2:string[]})",
            "trigger": "chremoveattr\tint\n(string; string[])"
        },
        {
            "contents": "chremoveattr(${1:string[]})",
            "trigger": "chremoveattr\tint\n(string[])"
        },
        {
            "contents": "chrename(${1:int}, ${2:string})",
            "trigger": "chrename\tint\n(int; string)"
        },
        {
            "contents": "chrename(${1:string}, ${2:string})",
            "trigger": "chrename\tint\n(string; string)"
        },
        {
            "contents": "chresizebuf(${1:int})",
            "trigger": "chresizebuf\tint\n(int)"
        },
        {
            "contents": "chs(${1:string})",
            "trigger": "chs\tstring\n(string)"
        },
        {
            "contents": "chs(${1:string}, ${2:float})",
            "trigger": "chs\tstring\n(string; float)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:int}, ${3:int}, ${4:matrix2})",
            "trigger": "chsetattr\tint\n(string; int; int; matrix2)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:int}, ${3:int}, ${4:matrix3})",
            "trigger": "chsetattr\tint\n(string; int; int; matrix3)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:int}, ${3:int}, ${4:matrix})",
            "trigger": "chsetattr\tint\n(string; int; int; matrix)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:int}, ${3:int}, ${4:float})",
            "trigger": "chsetattr\tint\n(string; int; int; float)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "chsetattr\tint\n(string; int; int; int)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:int}, ${3:int}, ${4:vector4})",
            "trigger": "chsetattr\tint\n(string; int; int; vector4)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:int}, ${3:int}, ${4:string})",
            "trigger": "chsetattr\tint\n(string; int; int; string)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:int}, ${3:int}, ${4:vector2})",
            "trigger": "chsetattr\tint\n(string; int; int; vector2)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:int}, ${3:int}, ${4:vector})",
            "trigger": "chsetattr\tint\n(string; int; int; vector)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix2})",
            "trigger": "chsetattr\tint\n(string; string; int; int; matrix2)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix3})",
            "trigger": "chsetattr\tint\n(string; string; int; int; matrix3)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix})",
            "trigger": "chsetattr\tint\n(string; string; int; int; matrix)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:float})",
            "trigger": "chsetattr\tint\n(string; string; int; int; float)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:int})",
            "trigger": "chsetattr\tint\n(string; string; int; int; int)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:vector4})",
            "trigger": "chsetattr\tint\n(string; string; int; int; vector4)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:string})",
            "trigger": "chsetattr\tint\n(string; string; int; int; string)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:vector2})",
            "trigger": "chsetattr\tint\n(string; string; int; int; vector2)"
        },
        {
            "contents": "chsetattr(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:vector})",
            "trigger": "chsetattr\tint\n(string; string; int; int; vector)"
        },
        {
            "contents": "chsetlength(${1:int})",
            "trigger": "chsetlength\tint\n(int)"
        },
        {
            "contents": "chsetrate(${1:float})",
            "trigger": "chsetrate\tint\n(float)"
        },
        {
            "contents": "chsetrate(${1:int})",
            "trigger": "chsetrate\tint\n(int)"
        },
        {
            "contents": "chsetstart(${1:float})",
            "trigger": "chsetstart\tint\n(float)"
        },
        {
            "contents": "chsetstart(${1:int})",
            "trigger": "chsetstart\tint\n(int)"
        },
        {
            "contents": "chsraw(${1:string})",
            "trigger": "chsraw\tstring\n(string)"
        },
        {
            "contents": "chstart()",
            "trigger": "chstart\tint\n(void)"
        },
        {
            "contents": "chstart(${1:int})",
            "trigger": "chstart\tint\n(int)"
        },
        {
            "contents": "chstartf()",
            "trigger": "chstartf\tfloat\n(void)"
        },
        {
            "contents": "chstartf(${1:int})",
            "trigger": "chstartf\tfloat\n(int)"
        },
        {
            "contents": "chstartt()",
            "trigger": "chstartt\tfloat\n(void)"
        },
        {
            "contents": "chstartt(${1:int})",
            "trigger": "chstartt\tfloat\n(int)"
        },
        {
            "contents": "chv(${1:string})",
            "trigger": "chv\tvector\n(string)"
        },
        {
            "contents": "chv(${1:string}, ${2:float})",
            "trigger": "chv\tvector\n(string; float)"
        },
        {
            "contents": "chwritebuf(${1:int}, ${2:float})",
            "trigger": "chwritebuf\tint\n(int; float)"
        },
        {
            "contents": "ckspline(${1:float}, ${2:float}, ${3:float})",
            "trigger": "ckspline\tfloat\n(float; float; float)"
        },
        {
            "contents": "ckspline(${1:float}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "ckspline\tfloat\n(float; float; float; ...)"
        },
        {
            "contents": "ckspline(${1:float}, ${2:vector4}, ${3:float})",
            "trigger": "ckspline\tvector4\n(float; vector4; float)"
        },
        {
            "contents": "ckspline(${1:float}, ${2:vector4}, ${3:float}, ${4:...})",
            "trigger": "ckspline\tvector4\n(float; vector4; float; ...)"
        },
        {
            "contents": "ckspline(${1:float}, ${2:vector}, ${3:float})",
            "trigger": "ckspline\tvector\n(float; vector; float)"
        },
        {
            "contents": "ckspline(${1:float}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "ckspline\tvector\n(float; vector; float; ...)"
        },
        {
            "contents": "clamp(${1:float}, ${2:float}, ${3:float})",
            "trigger": "clamp\tfloat\n(float; float; float)"
        },
        {
            "contents": "clamp(${1:int}, ${2:int}, ${3:int})",
            "trigger": "clamp\tint\n(int; int; int)"
        },
        {
            "contents": "clamp(${1:vector4}, ${2:vector4}, ${3:vector4})",
            "trigger": "clamp\tvector4\n(vector4; vector4; vector4)"
        },
        {
            "contents": "clamp(${1:vector2}, ${2:vector2}, ${3:vector2})",
            "trigger": "clamp\tvector2\n(vector2; vector2; vector2)"
        },
        {
            "contents": "clamp(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "clamp\tvector\n(vector; vector; vector)"
        },
        {
            "contents": "clip(${1:int &}, ${2:vector &}, ${3:vector &}, ${4:vector4})",
            "trigger": "clip\tvoid\n(int &; vector &; vector &; vector4)"
        },
        {
            "contents": "clip(${1:int &}, ${2:vector &}, ${3:vector &}, ${4:vector}, ${5:vector})",
            "trigger": "clip\tvoid\n(int &; vector &; vector &; vector; vector)"
        },
        {
            "contents": "colormap(${1:string}, ${2:float}, ${3:float})",
            "trigger": "colormap\tvector4\n(string; float; float)"
        },
        {
            "contents": "colormap(${1:string}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "colormap\tvector4\n(string; float; float; ...)"
        },
        {
            "contents": "colormap(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:int})",
            "trigger": "colormap\tvector4\n(string; float; float; float; float; float; float; float; float; int)"
        },
        {
            "contents": "colormap(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:int}, ${11:...})",
            "trigger": "colormap\tvector4\n(string; float; float; float; float; float; float; float; float; int; ...)"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector})",
            "trigger": "colormap\tvector4\n(string; vector)"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:...})",
            "trigger": "colormap\tvector4\n(string; vector; ...)"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:int})",
            "trigger": "colormap\tvector4\n(string; vector; vector; vector; int)"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:int}, ${6:...})",
            "trigger": "colormap\tvector4\n(string; vector; vector; vector; int; ...)"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector})",
            "trigger": "colormap\tvector4\n(string; vector; vector; vector; vector)"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:...})",
            "trigger": "colormap\tvector4\n(string; vector; vector; vector; vector; ...)"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:int})",
            "trigger": "colormap\tvector4\n(string; vector; vector; vector; vector; int)"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:int}, ${7:...})",
            "trigger": "colormap\tvector4\n(string; vector; vector; vector; vector; int; ...)"
        },
        {
            "contents": "colormap(${1:string}, ${2:float}, ${3:float})",
            "trigger": "colormap\tvector\n(string; float; float)"
        },
        {
            "contents": "colormap(${1:string}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "colormap\tvector\n(string; float; float; ...)"
        },
        {
            "contents": "colormap(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:int})",
            "trigger": "colormap\tvector\n(string; float; float; float; float; float; float; float; float; int)"
        },
        {
            "contents": "colormap(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:int}, ${11:...})",
            "trigger": "colormap\tvector\n(string; float; float; float; float; float; float; float; float; int; ...)"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector})",
            "trigger": "colormap\tvector\n(string; vector)"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:...})",
            "trigger": "colormap\tvector\n(string; vector; ...)"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:int})",
            "trigger": "colormap\tvector\n(string; vector; vector; vector; int)"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:int}, ${6:...})",
            "trigger": "colormap\tvector\n(string; vector; vector; vector; int; ...)"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector})",
            "trigger": "colormap\tvector\n(string; vector; vector; vector; vector)"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:...})",
            "trigger": "colormap\tvector\n(string; vector; vector; vector; vector; ...)"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:int})",
            "trigger": "colormap\tvector\n(string; vector; vector; vector; vector; int)"
        },
        {
            "contents": "colormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:int}, ${7:...})",
            "trigger": "colormap\tvector\n(string; vector; vector; vector; vector; int; ...)"
        },
        {
            "contents": "computenormal(${1:vector})",
            "trigger": "computenormal\tvector\n(vector)"
        },
        {
            "contents": "computenormal(${1:vector}, ${2:...})",
            "trigger": "computenormal\tvector\n(vector; ...)"
        },
        {
            "contents": "computenormal(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "computenormal\tvector\n(vector; vector; vector)"
        },
        {
            "contents": "computenormal(${1:vector}, ${2:vector}, ${3:vector}, ${4:...})",
            "trigger": "computenormal\tvector\n(vector; vector; vector; ...)"
        },
        {
            "contents": "concat(${1:string}, ${2:string})",
            "trigger": "concat\tstring\n(string; string)"
        },
        {
            "contents": "concat(${1:string}, ${2:string}, ${3:...})",
            "trigger": "concat\tstring\n(string; string; ...)"
        },
        {
            "contents": "cone(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "cone\tbsdf\n(vector; vector; float)"
        },
        {
            "contents": "cone(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "cone\tbsdf\n(vector; vector; float; ...)"
        },
        {
            "contents": "cos(${1:float})",
            "trigger": "cos\tfloat\n(float)"
        },
        {
            "contents": "cos(${1:vector4})",
            "trigger": "cos\tvector4\n(vector4)"
        },
        {
            "contents": "cos(${1:vector2})",
            "trigger": "cos\tvector2\n(vector2)"
        },
        {
            "contents": "cos(${1:vector})",
            "trigger": "cos\tvector\n(vector)"
        },
        {
            "contents": "cosh(${1:float})",
            "trigger": "cosh\tfloat\n(float)"
        },
        {
            "contents": "cosh(${1:vector4})",
            "trigger": "cosh\tvector4\n(vector4)"
        },
        {
            "contents": "cosh(${1:vector2})",
            "trigger": "cosh\tvector2\n(vector2)"
        },
        {
            "contents": "cosh(${1:vector})",
            "trigger": "cosh\tvector\n(vector)"
        },
        {
            "contents": "cracktransform(${1:int}, ${2:int}, ${3:int}, ${4:vector}, ${5:matrix})",
            "trigger": "cracktransform\tvector\n(int; int; int; vector; matrix)"
        },
        {
            "contents": "create_cdf(${1:float[]})",
            "trigger": "create_cdf\tfloat[]\n(float[])"
        },
        {
            "contents": "create_pdf(${1:float[]})",
            "trigger": "create_pdf\tfloat[]\n(float[])"
        },
        {
            "contents": "cross(${1:vector}, ${2:vector})",
            "trigger": "cross\tvector\n(vector; vector)"
        },
        {
            "contents": "cspline(${1:float}, ${2:float})",
            "trigger": "cspline\tfloat\n(float; float)"
        },
        {
            "contents": "cspline(${1:float}, ${2:float}, ${3:...})",
            "trigger": "cspline\tfloat\n(float; float; ...)"
        },
        {
            "contents": "cspline(${1:float}, ${2:vector4})",
            "trigger": "cspline\tvector4\n(float; vector4)"
        },
        {
            "contents": "cspline(${1:float}, ${2:vector4}, ${3:...})",
            "trigger": "cspline\tvector4\n(float; vector4; ...)"
        },
        {
            "contents": "cspline(${1:float}, ${2:vector})",
            "trigger": "cspline\tvector\n(float; vector)"
        },
        {
            "contents": "cspline(${1:float}, ${2:vector}, ${3:...})",
            "trigger": "cspline\tvector\n(float; vector; ...)"
        },
        {
            "contents": "ctransform(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "ctransform\tvector\n(string; string; vector)"
        },
        {
            "contents": "ctransform(${1:string}, ${2:vector})",
            "trigger": "ctransform\tvector\n(string; vector)"
        },
        {
            "contents": "curlnoise(${1:vector4})",
            "trigger": "curlnoise\tvector\n(vector4)"
        },
        {
            "contents": "curlnoise(${1:vector})",
            "trigger": "curlnoise\tvector\n(vector)"
        },
        {
            "contents": "curlnoise2d(${1:float}, ${2:float})",
            "trigger": "curlnoise2d\tvector\n(float; float)"
        },
        {
            "contents": "curlnoise2d(${1:vector})",
            "trigger": "curlnoise2d\tvector\n(vector)"
        },
        {
            "contents": "curlxnoise(${1:vector4})",
            "trigger": "curlxnoise\tvector\n(vector4)"
        },
        {
            "contents": "curlxnoise(${1:vector})",
            "trigger": "curlxnoise\tvector\n(vector)"
        },
        {
            "contents": "curlxnoise2d(${1:float}, ${2:float})",
            "trigger": "curlxnoise2d\tvector\n(float; float)"
        },
        {
            "contents": "curlxnoise2d(${1:vector})",
            "trigger": "curlxnoise2d\tvector\n(vector)"
        },
        {
            "contents": "cvex_bsdf(${1:string}, ${2:string})",
            "trigger": "cvex_bsdf\tbsdf\n(string; string)"
        },
        {
            "contents": "cvex_bsdf(${1:string}, ${2:string}, ${3:...})",
            "trigger": "cvex_bsdf\tbsdf\n(string; string; ...)"
        },
        {
            "contents": "degrees(${1:float})",
            "trigger": "degrees\tfloat\n(float)"
        },
        {
            "contents": "degrees(${1:vector4})",
            "trigger": "degrees\tvector4\n(vector4)"
        },
        {
            "contents": "degrees(${1:vector2})",
            "trigger": "degrees\tvector2\n(vector2)"
        },
        {
            "contents": "degrees(${1:vector})",
            "trigger": "degrees\tvector\n(vector)"
        },
        {
            "contents": "depthmap(${1:string}, ${2:float}, ${3:float})",
            "trigger": "depthmap\tfloat\n(string; float; float)"
        },
        {
            "contents": "depthmap(${1:string}, ${2:vector})",
            "trigger": "depthmap\tfloat\n(string; vector)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tmatrix2\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix2\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tmatrix2\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix2\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tmatrix3\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix3\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tmatrix3\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix3\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tmatrix\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tmatrix\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tfloat\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tfloat\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tfloat\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tfloat\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tint\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tint\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tint\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tint\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tvector4\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector4\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tvector4\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector4\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tstring\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tstring\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tstring\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tstring\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tvector2\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector2\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tvector2\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector2\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tvector\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tvector\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tmatrix2[]\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix2[]\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tmatrix2[]\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix2[]\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tmatrix3[]\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix3[]\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tmatrix3[]\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix3[]\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tmatrix[]\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix[]\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tmatrix[]\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tmatrix[]\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tfloat[]\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tfloat[]\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tfloat[]\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tfloat[]\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tint[]\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tint[]\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tint[]\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tint[]\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tvector4[]\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector4[]\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tvector4[]\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector4[]\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tstring[]\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tstring[]\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tstring[]\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tstring[]\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tvector2[]\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector2[]\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tvector2[]\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector2[]\n(string; string; int)"
        },
        {
            "contents": "detail(${1:int}, ${2:string})",
            "trigger": "detail\tvector[]\n(int; string)"
        },
        {
            "contents": "detail(${1:int}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector[]\n(int; string; int)"
        },
        {
            "contents": "detail(${1:string}, ${2:string})",
            "trigger": "detail\tvector[]\n(string; string)"
        },
        {
            "contents": "detail(${1:string}, ${2:string}, ${3:int})",
            "trigger": "detail\tvector[]\n(string; string; int)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix2\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix2\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix3\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix3\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tfloat\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tfloat\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tint\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tint\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector4\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector4\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tstring\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tstring\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector2\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector2\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix2[]\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix2[]\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix3[]\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix3[]\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix[]\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tmatrix[]\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tfloat[]\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tfloat[]\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tint[]\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tint[]\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector4[]\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector4[]\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tstring[]\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tstring[]\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector2[]\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector2[]\n(string; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector[]\n(int; string; int; int &)"
        },
        {
            "contents": "detailattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "detailattrib\tvector[]\n(string; string; int; int &)"
        },
        {
            "contents": "detailattribsize(${1:int}, ${2:string})",
            "trigger": "detailattribsize\tint\n(int; string)"
        },
        {
            "contents": "detailattribsize(${1:string}, ${2:string})",
            "trigger": "detailattribsize\tint\n(string; string)"
        },
        {
            "contents": "detailattribtype(${1:int}, ${2:string})",
            "trigger": "detailattribtype\tint\n(int; string)"
        },
        {
            "contents": "detailattribtype(${1:string}, ${2:string})",
            "trigger": "detailattribtype\tint\n(string; string)"
        },
        {
            "contents": "detailattribtypeinfo(${1:int}, ${2:string})",
            "trigger": "detailattribtypeinfo\tstring\n(int; string)"
        },
        {
            "contents": "detailattribtypeinfo(${1:string}, ${2:string})",
            "trigger": "detailattribtypeinfo\tstring\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix2\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix2\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix3\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix3\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tfloat\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tfloat\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tint\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tint\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tvector4\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tvector4\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tstring\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tstring\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tvector2\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tvector2\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tvector\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tvector\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix2[]\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix2[]\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix3[]\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix3[]\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix[]\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tmatrix[]\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tfloat[]\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tfloat[]\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tint[]\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tint[]\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tvector4[]\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tvector4[]\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tstring[]\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tstring[]\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tvector2[]\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tvector2[]\n(string; string)"
        },
        {
            "contents": "detailintrinsic(${1:int}, ${2:string})",
            "trigger": "detailintrinsic\tvector[]\n(int; string)"
        },
        {
            "contents": "detailintrinsic(${1:string}, ${2:string})",
            "trigger": "detailintrinsic\tvector[]\n(string; string)"
        },
        {
            "contents": "determinant(${1:matrix2})",
            "trigger": "determinant\tfloat\n(matrix2)"
        },
        {
            "contents": "determinant(${1:matrix3})",
            "trigger": "determinant\tfloat\n(matrix3)"
        },
        {
            "contents": "determinant(${1:matrix})",
            "trigger": "determinant\tfloat\n(matrix)"
        },
        {
            "contents": "diffuse(${1:vector}, ${2:float})",
            "trigger": "diffuse\tbsdf\n(vector; float)"
        },
        {
            "contents": "diffuse(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "diffuse\tbsdf\n(vector; float; ...)"
        },
        {
            "contents": "diffuse(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "diffuse\tbsdf\n(vector; vector; float)"
        },
        {
            "contents": "diffuse(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "diffuse\tbsdf\n(vector; vector; float; ...)"
        },
        {
            "contents": "diffuse(${1:vector}, ${2:vector})",
            "trigger": "diffuse\tbsdf\n(vector; vector)"
        },
        {
            "contents": "diffuse(${1:vector}, ${2:vector}, ${3:...})",
            "trigger": "diffuse\tbsdf\n(vector; vector; ...)"
        },
        {
            "contents": "diffuse(${1:vector})",
            "trigger": "diffuse\tbsdf\n(vector)"
        },
        {
            "contents": "diffuse(${1:vector}, ${2:...})",
            "trigger": "diffuse\tbsdf\n(vector; ...)"
        },
        {
            "contents": "diffuseBRDF(${1:vector}, ${2:vector})",
            "trigger": "diffuseBRDF\tfloat\n(vector; vector)"
        },
        {
            "contents": "diffuseBRDF(${1:vector}, ${2:vector}, ${3:vector}, ${4:float})",
            "trigger": "diffuseBRDF\tfloat\n(vector; vector; vector; float)"
        },
        {
            "contents": "dihedral(${1:vector}, ${2:vector})",
            "trigger": "dihedral\tmatrix3\n(vector; vector)"
        },
        {
            "contents": "dihedral(${1:vector}, ${2:vector})",
            "trigger": "dihedral\tvector4\n(vector; vector)"
        },
        {
            "contents": "distance(${1:vector4}, ${2:vector4})",
            "trigger": "distance\tfloat\n(vector4; vector4)"
        },
        {
            "contents": "distance(${1:vector2}, ${2:vector2})",
            "trigger": "distance\tfloat\n(vector2; vector2)"
        },
        {
            "contents": "distance(${1:vector}, ${2:vector})",
            "trigger": "distance\tfloat\n(vector; vector)"
        },
        {
            "contents": "distance2(${1:vector4}, ${2:vector4})",
            "trigger": "distance2\tfloat\n(vector4; vector4)"
        },
        {
            "contents": "distance2(${1:vector2}, ${2:vector2})",
            "trigger": "distance2\tfloat\n(vector2; vector2)"
        },
        {
            "contents": "distance2(${1:vector}, ${2:vector})",
            "trigger": "distance2\tfloat\n(vector; vector)"
        },
        {
            "contents": "dot(${1:vector4}, ${2:vector4})",
            "trigger": "dot\tfloat\n(vector4; vector4)"
        },
        {
            "contents": "dot(${1:vector4}, ${2:vector})",
            "trigger": "dot\tfloat\n(vector4; vector)"
        },
        {
            "contents": "dot(${1:vector2}, ${2:vector2})",
            "trigger": "dot\tfloat\n(vector2; vector2)"
        },
        {
            "contents": "dot(${1:vector}, ${2:vector4})",
            "trigger": "dot\tfloat\n(vector; vector4)"
        },
        {
            "contents": "dot(${1:vector}, ${2:vector})",
            "trigger": "dot\tfloat\n(vector; vector)"
        },
        {
            "contents": "dsmpixel(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:float[] &})",
            "trigger": "dsmpixel\tint\n(string; string; int; int; float[] &)"
        },
        {
            "contents": "dsmpixel(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:vector4[] &})",
            "trigger": "dsmpixel\tint\n(string; string; int; int; vector4[] &)"
        },
        {
            "contents": "dsmpixel(${1:string}, ${2:string}, ${3:int}, ${4:int}, ${5:vector[] &})",
            "trigger": "dsmpixel\tint\n(string; string; int; int; vector[] &)"
        },
        {
            "contents": "efit(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float})",
            "trigger": "efit\tfloat\n(float; float; float; float; float)"
        },
        {
            "contents": "efit(${1:vector4}, ${2:vector4}, ${3:vector4}, ${4:float}, ${5:float})",
            "trigger": "efit\tvector4\n(vector4; vector4; vector4; float; float)"
        },
        {
            "contents": "efit(${1:vector4}, ${2:vector4}, ${3:vector4}, ${4:vector4}, ${5:vector4})",
            "trigger": "efit\tvector4\n(vector4; vector4; vector4; vector4; vector4)"
        },
        {
            "contents": "efit(${1:vector2}, ${2:vector2}, ${3:vector2}, ${4:float}, ${5:float})",
            "trigger": "efit\tvector2\n(vector2; vector2; vector2; float; float)"
        },
        {
            "contents": "efit(${1:vector2}, ${2:vector2}, ${3:vector2}, ${4:vector2}, ${5:vector2})",
            "trigger": "efit\tvector2\n(vector2; vector2; vector2; vector2; vector2)"
        },
        {
            "contents": "efit(${1:vector}, ${2:vector}, ${3:vector}, ${4:float}, ${5:float})",
            "trigger": "efit\tvector\n(vector; vector; vector; float; float)"
        },
        {
            "contents": "efit(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector})",
            "trigger": "efit\tvector\n(vector; vector; vector; vector; vector)"
        },
        {
            "contents": "eigenvalues(${1:int &}, ${2:matrix3}, ${3:vector &}, ${4:vector &})",
            "trigger": "eigenvalues\tvoid\n(int &; matrix3; vector &; vector &)"
        },
        {
            "contents": "endswith(${1:string}, ${2:string})",
            "trigger": "endswith\tint\n(string; string)"
        },
        {
            "contents": "environment(${1:string}, ${2:vector})",
            "trigger": "environment\tvector4\n(string; vector)"
        },
        {
            "contents": "environment(${1:string}, ${2:vector}, ${3:...})",
            "trigger": "environment\tvector4\n(string; vector; ...)"
        },
        {
            "contents": "environment(${1:string}, ${2:vector}, ${3:float})",
            "trigger": "environment\tvector4\n(string; vector; float)"
        },
        {
            "contents": "environment(${1:string}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "environment\tvector4\n(string; vector; float; ...)"
        },
        {
            "contents": "environment(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector})",
            "trigger": "environment\tvector4\n(string; vector; vector; vector; vector)"
        },
        {
            "contents": "environment(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:...})",
            "trigger": "environment\tvector4\n(string; vector; vector; vector; vector; ...)"
        },
        {
            "contents": "environment(${1:string}, ${2:vector})",
            "trigger": "environment\tvector\n(string; vector)"
        },
        {
            "contents": "environment(${1:string}, ${2:vector}, ${3:...})",
            "trigger": "environment\tvector\n(string; vector; ...)"
        },
        {
            "contents": "environment(${1:string}, ${2:vector}, ${3:float})",
            "trigger": "environment\tvector\n(string; vector; float)"
        },
        {
            "contents": "environment(${1:string}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "environment\tvector\n(string; vector; float; ...)"
        },
        {
            "contents": "environment(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector})",
            "trigger": "environment\tvector\n(string; vector; vector; vector; vector)"
        },
        {
            "contents": "environment(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:...})",
            "trigger": "environment\tvector\n(string; vector; vector; vector; vector; ...)"
        },
        {
            "contents": "erf(${1:float})",
            "trigger": "erf\tfloat\n(float)"
        },
        {
            "contents": "erf(${1:vector2})",
            "trigger": "erf\tvector2\n(vector2)"
        },
        {
            "contents": "erf_inv(${1:float})",
            "trigger": "erf_inv\tfloat\n(float)"
        },
        {
            "contents": "erfc(${1:float})",
            "trigger": "erfc\tfloat\n(float)"
        },
        {
            "contents": "error(${1:string})",
            "trigger": "error\tvoid\n(string)"
        },
        {
            "contents": "error(${1:string}, ${2:...})",
            "trigger": "error\tvoid\n(string; ...)"
        },
        {
            "contents": "eulertoquaternion(${1:vector}, ${2:int})",
            "trigger": "eulertoquaternion\tvector4\n(vector; int)"
        },
        {
            "contents": "eval_bsdf(${1:bsdf}, ${2:vector}, ${3:vector}, ${4:float &}, ${5:int})",
            "trigger": "eval_bsdf\tvector\n(bsdf; vector; vector; float &; int)"
        },
        {
            "contents": "eval_bsdf(${1:bsdf}, ${2:vector}, ${3:vector}, ${4:float &}, ${5:int}, ${6:...})",
            "trigger": "eval_bsdf\tvector\n(bsdf; vector; vector; float &; int; ...)"
        },
        {
            "contents": "eval_bsdf(${1:bsdf}, ${2:vector}, ${3:vector}, ${4:int})",
            "trigger": "eval_bsdf\tvector\n(bsdf; vector; vector; int)"
        },
        {
            "contents": "eval_bsdf(${1:bsdf}, ${2:vector}, ${3:vector}, ${4:int}, ${5:...})",
            "trigger": "eval_bsdf\tvector\n(bsdf; vector; vector; int; ...)"
        },
        {
            "contents": "eval_bsdf(${1:bsdf}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:float &}, ${6:int})",
            "trigger": "eval_bsdf\tvector\n(bsdf; vector; vector; vector; float &; int)"
        },
        {
            "contents": "eval_bsdf(${1:bsdf}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:float &}, ${6:int}, ${7:...})",
            "trigger": "eval_bsdf\tvector\n(bsdf; vector; vector; vector; float &; int; ...)"
        },
        {
            "contents": "eval_bsdf(${1:bsdf}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:int})",
            "trigger": "eval_bsdf\tvector\n(bsdf; vector; vector; vector; int)"
        },
        {
            "contents": "eval_bsdf(${1:bsdf}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:int}, ${6:...})",
            "trigger": "eval_bsdf\tvector\n(bsdf; vector; vector; vector; int; ...)"
        },
        {
            "contents": "eval_bsdf(${1:bsdf}, ${2:vector}, ${3:vector}, ${4:vector})",
            "trigger": "eval_bsdf\tvector\n(bsdf; vector; vector; vector)"
        },
        {
            "contents": "eval_bsdf(${1:bsdf}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:...})",
            "trigger": "eval_bsdf\tvector\n(bsdf; vector; vector; vector; ...)"
        },
        {
            "contents": "eval_bsdf(${1:bsdf}, ${2:vector}, ${3:vector})",
            "trigger": "eval_bsdf\tvector\n(bsdf; vector; vector)"
        },
        {
            "contents": "eval_bsdf(${1:bsdf}, ${2:vector}, ${3:vector}, ${4:...})",
            "trigger": "eval_bsdf\tvector\n(bsdf; vector; vector; ...)"
        },
        {
            "contents": "exp(${1:float})",
            "trigger": "exp\tfloat\n(float)"
        },
        {
            "contents": "exp(${1:vector4})",
            "trigger": "exp\tvector4\n(vector4)"
        },
        {
            "contents": "exp(${1:vector2})",
            "trigger": "exp\tvector2\n(vector2)"
        },
        {
            "contents": "exp(${1:vector})",
            "trigger": "exp\tvector\n(vector)"
        },
        {
            "contents": "expand_udim(${1:float}, ${2:float}, ${3:string})",
            "trigger": "expand_udim\tstring\n(float; float; string)"
        },
        {
            "contents": "expand_udim(${1:float}, ${2:float}, ${3:string}, ${4:...})",
            "trigger": "expand_udim\tstring\n(float; float; string; ...)"
        },
        {
            "contents": "expandedgegroup(${1:int}, ${2:string})",
            "trigger": "expandedgegroup\tint[]\n(int; string)"
        },
        {
            "contents": "expandedgegroup(${1:string}, ${2:string})",
            "trigger": "expandedgegroup\tint[]\n(string; string)"
        },
        {
            "contents": "expandpointgroup(${1:int}, ${2:string})",
            "trigger": "expandpointgroup\tint[]\n(int; string)"
        },
        {
            "contents": "expandpointgroup(${1:string}, ${2:string})",
            "trigger": "expandpointgroup\tint[]\n(string; string)"
        },
        {
            "contents": "expandprimgroup(${1:int}, ${2:string})",
            "trigger": "expandprimgroup\tint[]\n(int; string)"
        },
        {
            "contents": "expandprimgroup(${1:string}, ${2:string})",
            "trigger": "expandprimgroup\tint[]\n(string; string)"
        },
        {
            "contents": "filamentsample(${1:int}, ${2:vector})",
            "trigger": "filamentsample\tvector\n(int; vector)"
        },
        {
            "contents": "filamentsample(${1:string}, ${2:vector})",
            "trigger": "filamentsample\tvector\n(string; vector)"
        },
        {
            "contents": "file_stat(${1:string}, ${2:int[] &})",
            "trigger": "file_stat\tint\n(string; int[] &)"
        },
        {
            "contents": "file_stat(${1:string}, ${2:int[] &}, ${3:...})",
            "trigger": "file_stat\tint\n(string; int[] &; ...)"
        },
        {
            "contents": "filterstep(${1:float}, ${2:float})",
            "trigger": "filterstep\tfloat\n(float; float)"
        },
        {
            "contents": "filterstep(${1:float}, ${2:float}, ${3:...})",
            "trigger": "filterstep\tfloat\n(float; float; ...)"
        },
        {
            "contents": "filterstep(${1:float}, ${2:float}, ${3:float})",
            "trigger": "filterstep\tfloat\n(float; float; float)"
        },
        {
            "contents": "filterstep(${1:float}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "filterstep\tfloat\n(float; float; float; ...)"
        },
        {
            "contents": "find(${1:string}, ${2:string})",
            "trigger": "find\tint\n(string; string)"
        },
        {
            "contents": "find(${1:string}, ${2:string}, ${3:int})",
            "trigger": "find\tint\n(string; string; int)"
        },
        {
            "contents": "find(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "find\tint\n(string; string; int; int)"
        },
        {
            "contents": "find(${1:matrix2[]}, ${2:matrix2})",
            "trigger": "find\tint\n(matrix2[]; matrix2)"
        },
        {
            "contents": "find(${1:matrix2[]}, ${2:matrix2}, ${3:int})",
            "trigger": "find\tint\n(matrix2[]; matrix2; int)"
        },
        {
            "contents": "find(${1:matrix2[]}, ${2:matrix2}, ${3:int}, ${4:int})",
            "trigger": "find\tint\n(matrix2[]; matrix2; int; int)"
        },
        {
            "contents": "find(${1:matrix3[]}, ${2:matrix3})",
            "trigger": "find\tint\n(matrix3[]; matrix3)"
        },
        {
            "contents": "find(${1:matrix3[]}, ${2:matrix3}, ${3:int})",
            "trigger": "find\tint\n(matrix3[]; matrix3; int)"
        },
        {
            "contents": "find(${1:matrix3[]}, ${2:matrix3}, ${3:int}, ${4:int})",
            "trigger": "find\tint\n(matrix3[]; matrix3; int; int)"
        },
        {
            "contents": "find(${1:matrix[]}, ${2:matrix})",
            "trigger": "find\tint\n(matrix[]; matrix)"
        },
        {
            "contents": "find(${1:matrix[]}, ${2:matrix}, ${3:int})",
            "trigger": "find\tint\n(matrix[]; matrix; int)"
        },
        {
            "contents": "find(${1:matrix[]}, ${2:matrix}, ${3:int}, ${4:int})",
            "trigger": "find\tint\n(matrix[]; matrix; int; int)"
        },
        {
            "contents": "find(${1:float[]}, ${2:float})",
            "trigger": "find\tint\n(float[]; float)"
        },
        {
            "contents": "find(${1:float[]}, ${2:float}, ${3:int})",
            "trigger": "find\tint\n(float[]; float; int)"
        },
        {
            "contents": "find(${1:float[]}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "find\tint\n(float[]; float; int; int)"
        },
        {
            "contents": "find(${1:int[]}, ${2:int})",
            "trigger": "find\tint\n(int[]; int)"
        },
        {
            "contents": "find(${1:int[]}, ${2:int}, ${3:int})",
            "trigger": "find\tint\n(int[]; int; int)"
        },
        {
            "contents": "find(${1:int[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "find\tint\n(int[]; int; int; int)"
        },
        {
            "contents": "find(${1:vector4[]}, ${2:vector4})",
            "trigger": "find\tint\n(vector4[]; vector4)"
        },
        {
            "contents": "find(${1:vector4[]}, ${2:vector4}, ${3:int})",
            "trigger": "find\tint\n(vector4[]; vector4; int)"
        },
        {
            "contents": "find(${1:vector4[]}, ${2:vector4}, ${3:int}, ${4:int})",
            "trigger": "find\tint\n(vector4[]; vector4; int; int)"
        },
        {
            "contents": "find(${1:string[]}, ${2:string})",
            "trigger": "find\tint\n(string[]; string)"
        },
        {
            "contents": "find(${1:string[]}, ${2:string}, ${3:int})",
            "trigger": "find\tint\n(string[]; string; int)"
        },
        {
            "contents": "find(${1:string[]}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "find\tint\n(string[]; string; int; int)"
        },
        {
            "contents": "find(${1:vector2[]}, ${2:vector2})",
            "trigger": "find\tint\n(vector2[]; vector2)"
        },
        {
            "contents": "find(${1:vector2[]}, ${2:vector2}, ${3:int})",
            "trigger": "find\tint\n(vector2[]; vector2; int)"
        },
        {
            "contents": "find(${1:vector2[]}, ${2:vector2}, ${3:int}, ${4:int})",
            "trigger": "find\tint\n(vector2[]; vector2; int; int)"
        },
        {
            "contents": "find(${1:vector[]}, ${2:vector})",
            "trigger": "find\tint\n(vector[]; vector)"
        },
        {
            "contents": "find(${1:vector[]}, ${2:vector}, ${3:int})",
            "trigger": "find\tint\n(vector[]; vector; int)"
        },
        {
            "contents": "find(${1:vector[]}, ${2:vector}, ${3:int}, ${4:int})",
            "trigger": "find\tint\n(vector[]; vector; int; int)"
        },
        {
            "contents": "find(${1:string}, ${2:string})",
            "trigger": "find\tint[]\n(string; string)"
        },
        {
            "contents": "find(${1:string}, ${2:string}, ${3:int})",
            "trigger": "find\tint[]\n(string; string; int)"
        },
        {
            "contents": "find(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "find\tint[]\n(string; string; int; int)"
        },
        {
            "contents": "find(${1:matrix2[]}, ${2:matrix2})",
            "trigger": "find\tint[]\n(matrix2[]; matrix2)"
        },
        {
            "contents": "find(${1:matrix2[]}, ${2:matrix2}, ${3:int})",
            "trigger": "find\tint[]\n(matrix2[]; matrix2; int)"
        },
        {
            "contents": "find(${1:matrix2[]}, ${2:matrix2}, ${3:int}, ${4:int})",
            "trigger": "find\tint[]\n(matrix2[]; matrix2; int; int)"
        },
        {
            "contents": "find(${1:matrix3[]}, ${2:matrix3})",
            "trigger": "find\tint[]\n(matrix3[]; matrix3)"
        },
        {
            "contents": "find(${1:matrix3[]}, ${2:matrix3}, ${3:int})",
            "trigger": "find\tint[]\n(matrix3[]; matrix3; int)"
        },
        {
            "contents": "find(${1:matrix3[]}, ${2:matrix3}, ${3:int}, ${4:int})",
            "trigger": "find\tint[]\n(matrix3[]; matrix3; int; int)"
        },
        {
            "contents": "find(${1:matrix[]}, ${2:matrix})",
            "trigger": "find\tint[]\n(matrix[]; matrix)"
        },
        {
            "contents": "find(${1:matrix[]}, ${2:matrix}, ${3:int})",
            "trigger": "find\tint[]\n(matrix[]; matrix; int)"
        },
        {
            "contents": "find(${1:matrix[]}, ${2:matrix}, ${3:int}, ${4:int})",
            "trigger": "find\tint[]\n(matrix[]; matrix; int; int)"
        },
        {
            "contents": "find(${1:float[]}, ${2:float})",
            "trigger": "find\tint[]\n(float[]; float)"
        },
        {
            "contents": "find(${1:float[]}, ${2:float}, ${3:int})",
            "trigger": "find\tint[]\n(float[]; float; int)"
        },
        {
            "contents": "find(${1:float[]}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "find\tint[]\n(float[]; float; int; int)"
        },
        {
            "contents": "find(${1:int[]}, ${2:int})",
            "trigger": "find\tint[]\n(int[]; int)"
        },
        {
            "contents": "find(${1:int[]}, ${2:int}, ${3:int})",
            "trigger": "find\tint[]\n(int[]; int; int)"
        },
        {
            "contents": "find(${1:int[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "find\tint[]\n(int[]; int; int; int)"
        },
        {
            "contents": "find(${1:vector4[]}, ${2:vector4})",
            "trigger": "find\tint[]\n(vector4[]; vector4)"
        },
        {
            "contents": "find(${1:vector4[]}, ${2:vector4}, ${3:int})",
            "trigger": "find\tint[]\n(vector4[]; vector4; int)"
        },
        {
            "contents": "find(${1:vector4[]}, ${2:vector4}, ${3:int}, ${4:int})",
            "trigger": "find\tint[]\n(vector4[]; vector4; int; int)"
        },
        {
            "contents": "find(${1:string[]}, ${2:string})",
            "trigger": "find\tint[]\n(string[]; string)"
        },
        {
            "contents": "find(${1:string[]}, ${2:string}, ${3:int})",
            "trigger": "find\tint[]\n(string[]; string; int)"
        },
        {
            "contents": "find(${1:string[]}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "find\tint[]\n(string[]; string; int; int)"
        },
        {
            "contents": "find(${1:vector2[]}, ${2:vector2})",
            "trigger": "find\tint[]\n(vector2[]; vector2)"
        },
        {
            "contents": "find(${1:vector2[]}, ${2:vector2}, ${3:int})",
            "trigger": "find\tint[]\n(vector2[]; vector2; int)"
        },
        {
            "contents": "find(${1:vector2[]}, ${2:vector2}, ${3:int}, ${4:int})",
            "trigger": "find\tint[]\n(vector2[]; vector2; int; int)"
        },
        {
            "contents": "find(${1:vector[]}, ${2:vector})",
            "trigger": "find\tint[]\n(vector[]; vector)"
        },
        {
            "contents": "find(${1:vector[]}, ${2:vector}, ${3:int})",
            "trigger": "find\tint[]\n(vector[]; vector; int)"
        },
        {
            "contents": "find(${1:vector[]}, ${2:vector}, ${3:int}, ${4:int})",
            "trigger": "find\tint[]\n(vector[]; vector; int; int)"
        },
        {
            "contents": "findattribval(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "findattribval\tint\n(int; string; string; int)"
        },
        {
            "contents": "findattribval(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int})",
            "trigger": "findattribval\tint\n(int; string; string; int; int)"
        },
        {
            "contents": "findattribval(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "findattribval\tint\n(int; string; string; string)"
        },
        {
            "contents": "findattribval(${1:int}, ${2:string}, ${3:string}, ${4:string}, ${5:int})",
            "trigger": "findattribval\tint\n(int; string; string; string; int)"
        },
        {
            "contents": "findattribval(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "findattribval\tint\n(string; string; string; int)"
        },
        {
            "contents": "findattribval(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int})",
            "trigger": "findattribval\tint\n(string; string; string; int; int)"
        },
        {
            "contents": "findattribval(${1:string}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "findattribval\tint\n(string; string; string; string)"
        },
        {
            "contents": "findattribval(${1:string}, ${2:string}, ${3:string}, ${4:string}, ${5:int})",
            "trigger": "findattribval\tint\n(string; string; string; string; int)"
        },
        {
            "contents": "findattribvalcount(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "findattribvalcount\tint\n(int; string; string; int)"
        },
        {
            "contents": "findattribvalcount(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "findattribvalcount\tint\n(int; string; string; string)"
        },
        {
            "contents": "findattribvalcount(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "findattribvalcount\tint\n(string; string; string; int)"
        },
        {
            "contents": "findattribvalcount(${1:string}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "findattribvalcount\tint\n(string; string; string; string)"
        },
        {
            "contents": "fit(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float})",
            "trigger": "fit\tfloat\n(float; float; float; float; float)"
        },
        {
            "contents": "fit(${1:vector4}, ${2:vector4}, ${3:vector4}, ${4:vector4}, ${5:vector4})",
            "trigger": "fit\tvector4\n(vector4; vector4; vector4; vector4; vector4)"
        },
        {
            "contents": "fit(${1:vector2}, ${2:vector2}, ${3:vector2}, ${4:vector2}, ${5:vector2})",
            "trigger": "fit\tvector2\n(vector2; vector2; vector2; vector2; vector2)"
        },
        {
            "contents": "fit(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector})",
            "trigger": "fit\tvector\n(vector; vector; vector; vector; vector)"
        },
        {
            "contents": "fit01(${1:float}, ${2:float}, ${3:float})",
            "trigger": "fit01\tfloat\n(float; float; float)"
        },
        {
            "contents": "fit01(${1:vector4}, ${2:vector4}, ${3:vector4})",
            "trigger": "fit01\tvector4\n(vector4; vector4; vector4)"
        },
        {
            "contents": "fit01(${1:vector2}, ${2:vector2}, ${3:vector2})",
            "trigger": "fit01\tvector2\n(vector2; vector2; vector2)"
        },
        {
            "contents": "fit01(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "fit01\tvector\n(vector; vector; vector)"
        },
        {
            "contents": "fit10(${1:float}, ${2:float}, ${3:float})",
            "trigger": "fit10\tfloat\n(float; float; float)"
        },
        {
            "contents": "fit10(${1:vector4}, ${2:vector4}, ${3:vector4})",
            "trigger": "fit10\tvector4\n(vector4; vector4; vector4)"
        },
        {
            "contents": "fit10(${1:vector2}, ${2:vector2}, ${3:vector2})",
            "trigger": "fit10\tvector2\n(vector2; vector2; vector2)"
        },
        {
            "contents": "fit10(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "fit10\tvector\n(vector; vector; vector)"
        },
        {
            "contents": "fit11(${1:float}, ${2:float}, ${3:float})",
            "trigger": "fit11\tfloat\n(float; float; float)"
        },
        {
            "contents": "fit11(${1:vector4}, ${2:vector4}, ${3:vector4})",
            "trigger": "fit11\tvector4\n(vector4; vector4; vector4)"
        },
        {
            "contents": "fit11(${1:vector2}, ${2:vector2}, ${3:vector2})",
            "trigger": "fit11\tvector2\n(vector2; vector2; vector2)"
        },
        {
            "contents": "fit11(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "fit11\tvector\n(vector; vector; vector)"
        },
        {
            "contents": "floor(${1:float})",
            "trigger": "floor\tfloat\n(float)"
        },
        {
            "contents": "floor(${1:float})",
            "trigger": "floor\tint\n(float)"
        },
        {
            "contents": "floor(${1:vector4})",
            "trigger": "floor\tvector4\n(vector4)"
        },
        {
            "contents": "floor(${1:vector2})",
            "trigger": "floor\tvector2\n(vector2)"
        },
        {
            "contents": "floor(${1:vector})",
            "trigger": "floor\tvector\n(vector)"
        },
        {
            "contents": "flownoise(${1:float}, ${2:float}, ${3:float})",
            "trigger": "flownoise\tfloat\n(float; float; float)"
        },
        {
            "contents": "flownoise(${1:vector4}, ${2:float})",
            "trigger": "flownoise\tfloat\n(vector4; float)"
        },
        {
            "contents": "flownoise(${1:vector}, ${2:float})",
            "trigger": "flownoise\tfloat\n(vector; float)"
        },
        {
            "contents": "flownoise(${1:float}, ${2:float}, ${3:float})",
            "trigger": "flownoise\tvector\n(float; float; float)"
        },
        {
            "contents": "flownoise(${1:vector4}, ${2:float})",
            "trigger": "flownoise\tvector\n(vector4; float)"
        },
        {
            "contents": "flownoise(${1:vector}, ${2:float})",
            "trigger": "flownoise\tvector\n(vector; float)"
        },
        {
            "contents": "flowpnoise(${1:float}, ${2:float}, ${3:int}, ${4:int}, ${5:float})",
            "trigger": "flowpnoise\tfloat\n(float; float; int; int; float)"
        },
        {
            "contents": "flowpnoise(${1:vector4}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:float})",
            "trigger": "flowpnoise\tfloat\n(vector4; int; int; int; int; float)"
        },
        {
            "contents": "flowpnoise(${1:vector4}, ${2:vector4}, ${3:float})",
            "trigger": "flowpnoise\tfloat\n(vector4; vector4; float)"
        },
        {
            "contents": "flowpnoise(${1:vector}, ${2:int}, ${3:int}, ${4:int}, ${5:float})",
            "trigger": "flowpnoise\tfloat\n(vector; int; int; int; float)"
        },
        {
            "contents": "flowpnoise(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "flowpnoise\tfloat\n(vector; vector; float)"
        },
        {
            "contents": "flowpnoise(${1:float}, ${2:float}, ${3:int}, ${4:int}, ${5:float})",
            "trigger": "flowpnoise\tvector\n(float; float; int; int; float)"
        },
        {
            "contents": "flowpnoise(${1:vector4}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:float})",
            "trigger": "flowpnoise\tvector\n(vector4; int; int; int; int; float)"
        },
        {
            "contents": "flowpnoise(${1:vector4}, ${2:vector4}, ${3:float})",
            "trigger": "flowpnoise\tvector\n(vector4; vector4; float)"
        },
        {
            "contents": "flowpnoise(${1:vector}, ${2:int}, ${3:int}, ${4:int}, ${5:float})",
            "trigger": "flowpnoise\tvector\n(vector; int; int; int; float)"
        },
        {
            "contents": "flowpnoise(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "flowpnoise\tvector\n(vector; vector; float)"
        },
        {
            "contents": "frac(${1:float})",
            "trigger": "frac\tfloat\n(float)"
        },
        {
            "contents": "frac(${1:vector4})",
            "trigger": "frac\tvector4\n(vector4)"
        },
        {
            "contents": "frac(${1:vector2})",
            "trigger": "frac\tvector2\n(vector2)"
        },
        {
            "contents": "frac(${1:vector})",
            "trigger": "frac\tvector\n(vector)"
        },
        {
            "contents": "fresnel(${1:vector}, ${2:vector}, ${3:float}, ${4:float &}, ${5:float &})",
            "trigger": "fresnel\tvoid\n(vector; vector; float; float &; float &)"
        },
        {
            "contents": "fresnel(${1:vector}, ${2:vector}, ${3:float}, ${4:float &}, ${5:float &}, ${6:vector &}, ${7:vector &})",
            "trigger": "fresnel\tvoid\n(vector; vector; float; float &; float &; vector &; vector &)"
        },
        {
            "contents": "fromNDC(${1:string}, ${2:vector})",
            "trigger": "fromNDC\tvector\n(string; vector)"
        },
        {
            "contents": "fromNDC(${1:vector})",
            "trigger": "fromNDC\tvector\n(vector)"
        },
        {
            "contents": "frontface(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "frontface\tvector\n(vector; vector; vector)"
        },
        {
            "contents": "fuzzify(${1:string[]}, ${2:float[]}, ${3:float[]}, ${4:float}, ${5:float}, ${6:float})",
            "trigger": "fuzzify\tfloat\n(string[]; float[]; float[]; float; float; float)"
        },
        {
            "contents": "fuzzy_and(${1:float}, ${2:float})",
            "trigger": "fuzzy_and\tfloat\n(float; float)"
        },
        {
            "contents": "fuzzy_and(${1:float}, ${2:float}, ${3:...})",
            "trigger": "fuzzy_and\tfloat\n(float; float; ...)"
        },
        {
            "contents": "fuzzy_and(${1:int}, ${2:int})",
            "trigger": "fuzzy_and\tint\n(int; int)"
        },
        {
            "contents": "fuzzy_and(${1:int}, ${2:int}, ${3:...})",
            "trigger": "fuzzy_and\tint\n(int; int; ...)"
        },
        {
            "contents": "fuzzy_defuzz_centroid(${1:float[]}, ${2:float}, ${3:float})",
            "trigger": "fuzzy_defuzz_centroid\tfloat\n(float[]; float; float)"
        },
        {
            "contents": "fuzzy_nand(${1:float}, ${2:float})",
            "trigger": "fuzzy_nand\tfloat\n(float; float)"
        },
        {
            "contents": "fuzzy_nand(${1:float}, ${2:float}, ${3:...})",
            "trigger": "fuzzy_nand\tfloat\n(float; float; ...)"
        },
        {
            "contents": "fuzzy_nand(${1:int}, ${2:int})",
            "trigger": "fuzzy_nand\tint\n(int; int)"
        },
        {
            "contents": "fuzzy_nand(${1:int}, ${2:int}, ${3:...})",
            "trigger": "fuzzy_nand\tint\n(int; int; ...)"
        },
        {
            "contents": "fuzzy_nor(${1:float}, ${2:float})",
            "trigger": "fuzzy_nor\tfloat\n(float; float)"
        },
        {
            "contents": "fuzzy_nor(${1:float}, ${2:float}, ${3:...})",
            "trigger": "fuzzy_nor\tfloat\n(float; float; ...)"
        },
        {
            "contents": "fuzzy_nor(${1:int}, ${2:int})",
            "trigger": "fuzzy_nor\tint\n(int; int)"
        },
        {
            "contents": "fuzzy_nor(${1:int}, ${2:int}, ${3:...})",
            "trigger": "fuzzy_nor\tint\n(int; int; ...)"
        },
        {
            "contents": "fuzzy_not(${1:float})",
            "trigger": "fuzzy_not\tfloat\n(float)"
        },
        {
            "contents": "fuzzy_not(${1:int})",
            "trigger": "fuzzy_not\tint\n(int)"
        },
        {
            "contents": "fuzzy_nxor(${1:float}, ${2:float})",
            "trigger": "fuzzy_nxor\tfloat\n(float; float)"
        },
        {
            "contents": "fuzzy_nxor(${1:float}, ${2:float}, ${3:...})",
            "trigger": "fuzzy_nxor\tfloat\n(float; float; ...)"
        },
        {
            "contents": "fuzzy_nxor(${1:int}, ${2:int})",
            "trigger": "fuzzy_nxor\tint\n(int; int)"
        },
        {
            "contents": "fuzzy_nxor(${1:int}, ${2:int}, ${3:...})",
            "trigger": "fuzzy_nxor\tint\n(int; int; ...)"
        },
        {
            "contents": "fuzzy_or(${1:float}, ${2:float})",
            "trigger": "fuzzy_or\tfloat\n(float; float)"
        },
        {
            "contents": "fuzzy_or(${1:float}, ${2:float}, ${3:...})",
            "trigger": "fuzzy_or\tfloat\n(float; float; ...)"
        },
        {
            "contents": "fuzzy_or(${1:int}, ${2:int})",
            "trigger": "fuzzy_or\tint\n(int; int)"
        },
        {
            "contents": "fuzzy_or(${1:int}, ${2:int}, ${3:...})",
            "trigger": "fuzzy_or\tint\n(int; int; ...)"
        },
        {
            "contents": "fuzzy_xor(${1:float}, ${2:float})",
            "trigger": "fuzzy_xor\tfloat\n(float; float)"
        },
        {
            "contents": "fuzzy_xor(${1:float}, ${2:float}, ${3:...})",
            "trigger": "fuzzy_xor\tfloat\n(float; float; ...)"
        },
        {
            "contents": "fuzzy_xor(${1:int}, ${2:int})",
            "trigger": "fuzzy_xor\tint\n(int; int)"
        },
        {
            "contents": "fuzzy_xor(${1:int}, ${2:int}, ${3:...})",
            "trigger": "fuzzy_xor\tint\n(int; int; ...)"
        },
        {
            "contents": "geoself()",
            "trigger": "geoself\tint\n(void)"
        },
        {
            "contents": "geounwrap(${1:int}, ${2:string})",
            "trigger": "geounwrap\tstring\n(int; string)"
        },
        {
            "contents": "geounwrap(${1:string}, ${2:string})",
            "trigger": "geounwrap\tstring\n(string; string)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tmatrix2\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tmatrix2\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tmatrix3\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tmatrix3\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tmatrix\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tmatrix\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tfloat\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tfloat\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tint\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tint\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tvector4\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tvector4\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tstring\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tstring\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tvector2\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tvector2\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tvector\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tvector\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tmatrix2[]\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tmatrix2[]\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tmatrix3[]\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tmatrix3[]\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tmatrix[]\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tmatrix[]\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tfloat[]\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tfloat[]\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tint[]\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tint[]\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tvector4[]\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tvector4[]\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tstring[]\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tstring[]\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tvector2[]\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tvector2[]\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tvector[]\n(int; string; string; int; int &)"
        },
        {
            "contents": "getattrib(${1:string}, ${2:string}, ${3:string}, ${4:int}, ${5:int &})",
            "trigger": "getattrib\tvector[]\n(string; string; string; int; int &)"
        },
        {
            "contents": "getattribute(${1:string}, ${2:matrix3 &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "getattribute\tint\n(string; matrix3 &; string; string; int; int)"
        },
        {
            "contents": "getattribute(${1:string}, ${2:matrix &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "getattribute\tint\n(string; matrix &; string; string; int; int)"
        },
        {
            "contents": "getattribute(${1:string}, ${2:float &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "getattribute\tint\n(string; float &; string; string; int; int)"
        },
        {
            "contents": "getattribute(${1:string}, ${2:int &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "getattribute\tint\n(string; int &; string; string; int; int)"
        },
        {
            "contents": "getattribute(${1:string}, ${2:vector4 &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "getattribute\tint\n(string; vector4 &; string; string; int; int)"
        },
        {
            "contents": "getattribute(${1:string}, ${2:string &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "getattribute\tint\n(string; string &; string; string; int; int)"
        },
        {
            "contents": "getattribute(${1:string}, ${2:vector &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "getattribute\tint\n(string; vector &; string; string; int; int)"
        },
        {
            "contents": "getattribute(${1:string}, ${2:float[] &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "getattribute\tint\n(string; float[] &; string; string; int; int)"
        },
        {
            "contents": "getbbox(${1:int}, ${2:string}, ${3:vector &}, ${4:vector &})",
            "trigger": "getbbox\tvoid\n(int; string; vector &; vector &)"
        },
        {
            "contents": "getbbox(${1:int}, ${2:vector &}, ${3:vector &})",
            "trigger": "getbbox\tvoid\n(int; vector &; vector &)"
        },
        {
            "contents": "getbbox(${1:string}, ${2:string}, ${3:vector &}, ${4:vector &})",
            "trigger": "getbbox\tvoid\n(string; string; vector &; vector &)"
        },
        {
            "contents": "getbbox(${1:string}, ${2:vector &}, ${3:vector &})",
            "trigger": "getbbox\tvoid\n(string; vector &; vector &)"
        },
        {
            "contents": "getbbox(${1:vector &}, ${2:vector &})",
            "trigger": "getbbox\tvoid\n(vector &; vector &)"
        },
        {
            "contents": "getbbox_center(${1:int})",
            "trigger": "getbbox_center\tvector\n(int)"
        },
        {
            "contents": "getbbox_center(${1:int}, ${2:string})",
            "trigger": "getbbox_center\tvector\n(int; string)"
        },
        {
            "contents": "getbbox_center(${1:string})",
            "trigger": "getbbox_center\tvector\n(string)"
        },
        {
            "contents": "getbbox_center(${1:string}, ${2:string})",
            "trigger": "getbbox_center\tvector\n(string; string)"
        },
        {
            "contents": "getbbox_max(${1:int})",
            "trigger": "getbbox_max\tvector\n(int)"
        },
        {
            "contents": "getbbox_max(${1:int}, ${2:string})",
            "trigger": "getbbox_max\tvector\n(int; string)"
        },
        {
            "contents": "getbbox_max(${1:string})",
            "trigger": "getbbox_max\tvector\n(string)"
        },
        {
            "contents": "getbbox_max(${1:string}, ${2:string})",
            "trigger": "getbbox_max\tvector\n(string; string)"
        },
        {
            "contents": "getbbox_min(${1:int})",
            "trigger": "getbbox_min\tvector\n(int)"
        },
        {
            "contents": "getbbox_min(${1:int}, ${2:string})",
            "trigger": "getbbox_min\tvector\n(int; string)"
        },
        {
            "contents": "getbbox_min(${1:string})",
            "trigger": "getbbox_min\tvector\n(string)"
        },
        {
            "contents": "getbbox_min(${1:string}, ${2:string})",
            "trigger": "getbbox_min\tvector\n(string; string)"
        },
        {
            "contents": "getbbox_size(${1:int})",
            "trigger": "getbbox_size\tvector\n(int)"
        },
        {
            "contents": "getbbox_size(${1:int}, ${2:string})",
            "trigger": "getbbox_size\tvector\n(int; string)"
        },
        {
            "contents": "getbbox_size(${1:string})",
            "trigger": "getbbox_size\tvector\n(string)"
        },
        {
            "contents": "getbbox_size(${1:string}, ${2:string})",
            "trigger": "getbbox_size\tvector\n(string; string)"
        },
        {
            "contents": "getbounces(${1:bsdf})",
            "trigger": "getbounces\tint\n(bsdf)"
        },
        {
            "contents": "getbounds(${1:string}, ${2:string}, ${3:vector &}, ${4:vector &})",
            "trigger": "getbounds\tint\n(string; string; vector &; vector &)"
        },
        {
            "contents": "getbounds(${1:string}, ${2:vector &}, ${3:vector &})",
            "trigger": "getbounds\tint\n(string; vector &; vector &)"
        },
        {
            "contents": "getcomp(${1:matrix2[]}, ${2:int})",
            "trigger": "getcomp\tmatrix2\n(matrix2[]; int)"
        },
        {
            "contents": "getcomp(${1:matrix3[]}, ${2:int})",
            "trigger": "getcomp\tmatrix3\n(matrix3[]; int)"
        },
        {
            "contents": "getcomp(${1:matrix[]}, ${2:int})",
            "trigger": "getcomp\tmatrix\n(matrix[]; int)"
        },
        {
            "contents": "getcomp(${1:bsdf[]}, ${2:int})",
            "trigger": "getcomp\tbsdf\n(bsdf[]; int)"
        },
        {
            "contents": "getcomp(${1:matrix2}, ${2:int}, ${3:int})",
            "trigger": "getcomp\tfloat\n(matrix2; int; int)"
        },
        {
            "contents": "getcomp(${1:matrix3}, ${2:int}, ${3:int})",
            "trigger": "getcomp\tfloat\n(matrix3; int; int)"
        },
        {
            "contents": "getcomp(${1:matrix}, ${2:int}, ${3:int})",
            "trigger": "getcomp\tfloat\n(matrix; int; int)"
        },
        {
            "contents": "getcomp(${1:vector4}, ${2:int})",
            "trigger": "getcomp\tfloat\n(vector4; int)"
        },
        {
            "contents": "getcomp(${1:vector2}, ${2:int})",
            "trigger": "getcomp\tfloat\n(vector2; int)"
        },
        {
            "contents": "getcomp(${1:vector}, ${2:int})",
            "trigger": "getcomp\tfloat\n(vector; int)"
        },
        {
            "contents": "getcomp(${1:float[]}, ${2:int})",
            "trigger": "getcomp\tfloat\n(float[]; int)"
        },
        {
            "contents": "getcomp(${1:int[]}, ${2:int})",
            "trigger": "getcomp\tint\n(int[]; int)"
        },
        {
            "contents": "getcomp(${1:vector4[]}, ${2:int})",
            "trigger": "getcomp\tvector4\n(vector4[]; int)"
        },
        {
            "contents": "getcomp(${1:string}, ${2:int})",
            "trigger": "getcomp\tstring\n(string; int)"
        },
        {
            "contents": "getcomp(${1:string[]}, ${2:int})",
            "trigger": "getcomp\tstring\n(string[]; int)"
        },
        {
            "contents": "getcomp(${1:vector2[]}, ${2:int})",
            "trigger": "getcomp\tvector2\n(vector2[]; int)"
        },
        {
            "contents": "getcomp(${1:vector[]}, ${2:int})",
            "trigger": "getcomp\tvector\n(vector[]; int)"
        },
        {
            "contents": "getpointbbox(${1:int}, ${2:string}, ${3:vector &}, ${4:vector &})",
            "trigger": "getpointbbox\tvoid\n(int; string; vector &; vector &)"
        },
        {
            "contents": "getpointbbox(${1:int}, ${2:vector &}, ${3:vector &})",
            "trigger": "getpointbbox\tvoid\n(int; vector &; vector &)"
        },
        {
            "contents": "getpointbbox(${1:string}, ${2:string}, ${3:vector &}, ${4:vector &})",
            "trigger": "getpointbbox\tvoid\n(string; string; vector &; vector &)"
        },
        {
            "contents": "getpointbbox(${1:string}, ${2:vector &}, ${3:vector &})",
            "trigger": "getpointbbox\tvoid\n(string; vector &; vector &)"
        },
        {
            "contents": "getpointbbox_center(${1:int})",
            "trigger": "getpointbbox_center\tvector\n(int)"
        },
        {
            "contents": "getpointbbox_center(${1:int}, ${2:string})",
            "trigger": "getpointbbox_center\tvector\n(int; string)"
        },
        {
            "contents": "getpointbbox_center(${1:string})",
            "trigger": "getpointbbox_center\tvector\n(string)"
        },
        {
            "contents": "getpointbbox_center(${1:string}, ${2:string})",
            "trigger": "getpointbbox_center\tvector\n(string; string)"
        },
        {
            "contents": "getpointbbox_max(${1:int})",
            "trigger": "getpointbbox_max\tvector\n(int)"
        },
        {
            "contents": "getpointbbox_max(${1:int}, ${2:string})",
            "trigger": "getpointbbox_max\tvector\n(int; string)"
        },
        {
            "contents": "getpointbbox_max(${1:string})",
            "trigger": "getpointbbox_max\tvector\n(string)"
        },
        {
            "contents": "getpointbbox_max(${1:string}, ${2:string})",
            "trigger": "getpointbbox_max\tvector\n(string; string)"
        },
        {
            "contents": "getpointbbox_min(${1:int})",
            "trigger": "getpointbbox_min\tvector\n(int)"
        },
        {
            "contents": "getpointbbox_min(${1:int}, ${2:string})",
            "trigger": "getpointbbox_min\tvector\n(int; string)"
        },
        {
            "contents": "getpointbbox_min(${1:string})",
            "trigger": "getpointbbox_min\tvector\n(string)"
        },
        {
            "contents": "getpointbbox_min(${1:string}, ${2:string})",
            "trigger": "getpointbbox_min\tvector\n(string; string)"
        },
        {
            "contents": "getpointbbox_size(${1:int})",
            "trigger": "getpointbbox_size\tvector\n(int)"
        },
        {
            "contents": "getpointbbox_size(${1:int}, ${2:string})",
            "trigger": "getpointbbox_size\tvector\n(int; string)"
        },
        {
            "contents": "getpointbbox_size(${1:string})",
            "trigger": "getpointbbox_size\tvector\n(string)"
        },
        {
            "contents": "getpointbbox_size(${1:string}, ${2:string})",
            "trigger": "getpointbbox_size\tvector\n(string; string)"
        },
        {
            "contents": "getspace(${1:string}, ${2:string})",
            "trigger": "getspace\tmatrix\n(string; string)"
        },
        {
            "contents": "gradient(${1:vector}, ${2:float})",
            "trigger": "gradient\tvector\n(vector; float)"
        },
        {
            "contents": "gradient(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "gradient\tvector\n(vector; float; ...)"
        },
        {
            "contents": "hair(${1:vector}, ${2:vector}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float})",
            "trigger": "hair\tbsdf\n(vector; vector; float; float; float; float; float)"
        },
        {
            "contents": "hair(${1:vector}, ${2:vector}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:...})",
            "trigger": "hair\tbsdf\n(vector; vector; float; float; float; float; float; ...)"
        },
        {
            "contents": "hair(${1:vector}, ${2:vector}, ${3:float}, ${4:float}, ${5:float})",
            "trigger": "hair\tbsdf\n(vector; vector; float; float; float)"
        },
        {
            "contents": "hair(${1:vector}, ${2:vector}, ${3:float}, ${4:float}, ${5:float}, ${6:...})",
            "trigger": "hair\tbsdf\n(vector; vector; float; float; float; ...)"
        },
        {
            "contents": "hair(${1:vector}, ${2:vector}, ${3:float}, ${4:float})",
            "trigger": "hair\tbsdf\n(vector; vector; float; float)"
        },
        {
            "contents": "hair(${1:vector}, ${2:vector}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "hair\tbsdf\n(vector; vector; float; float; ...)"
        },
        {
            "contents": "hasattrib(${1:int}, ${2:string}, ${3:string})",
            "trigger": "hasattrib\tint\n(int; string; string)"
        },
        {
            "contents": "hasattrib(${1:string}, ${2:string}, ${3:string})",
            "trigger": "hasattrib\tint\n(string; string; string)"
        },
        {
            "contents": "hasdetailattrib(${1:int}, ${2:string})",
            "trigger": "hasdetailattrib\tint\n(int; string)"
        },
        {
            "contents": "hasdetailattrib(${1:string}, ${2:string})",
            "trigger": "hasdetailattrib\tint\n(string; string)"
        },
        {
            "contents": "haspointattrib(${1:int}, ${2:string})",
            "trigger": "haspointattrib\tint\n(int; string)"
        },
        {
            "contents": "haspointattrib(${1:string}, ${2:string})",
            "trigger": "haspointattrib\tint\n(string; string)"
        },
        {
            "contents": "hasprimattrib(${1:int}, ${2:string})",
            "trigger": "hasprimattrib\tint\n(int; string)"
        },
        {
            "contents": "hasprimattrib(${1:string}, ${2:string})",
            "trigger": "hasprimattrib\tint\n(string; string)"
        },
        {
            "contents": "hasvertexattrib(${1:int}, ${2:string})",
            "trigger": "hasvertexattrib\tint\n(int; string)"
        },
        {
            "contents": "hasvertexattrib(${1:string}, ${2:string})",
            "trigger": "hasvertexattrib\tint\n(string; string)"
        },
        {
            "contents": "hedge_dstpoint(${1:int}, ${2:int})",
            "trigger": "hedge_dstpoint\tint\n(int; int)"
        },
        {
            "contents": "hedge_dstpoint(${1:string}, ${2:int})",
            "trigger": "hedge_dstpoint\tint\n(string; int)"
        },
        {
            "contents": "hedge_dstvertex(${1:int}, ${2:int})",
            "trigger": "hedge_dstvertex\tint\n(int; int)"
        },
        {
            "contents": "hedge_dstvertex(${1:string}, ${2:int})",
            "trigger": "hedge_dstvertex\tint\n(string; int)"
        },
        {
            "contents": "hedge_equivcount(${1:int}, ${2:int})",
            "trigger": "hedge_equivcount\tint\n(int; int)"
        },
        {
            "contents": "hedge_equivcount(${1:string}, ${2:int})",
            "trigger": "hedge_equivcount\tint\n(string; int)"
        },
        {
            "contents": "hedge_isequiv(${1:int}, ${2:int}, ${3:int})",
            "trigger": "hedge_isequiv\tint\n(int; int; int)"
        },
        {
            "contents": "hedge_isequiv(${1:string}, ${2:int}, ${3:int})",
            "trigger": "hedge_isequiv\tint\n(string; int; int)"
        },
        {
            "contents": "hedge_isprimary(${1:int}, ${2:int})",
            "trigger": "hedge_isprimary\tint\n(int; int)"
        },
        {
            "contents": "hedge_isprimary(${1:string}, ${2:int})",
            "trigger": "hedge_isprimary\tint\n(string; int)"
        },
        {
            "contents": "hedge_isvalid(${1:int}, ${2:int})",
            "trigger": "hedge_isvalid\tint\n(int; int)"
        },
        {
            "contents": "hedge_isvalid(${1:string}, ${2:int})",
            "trigger": "hedge_isvalid\tint\n(string; int)"
        },
        {
            "contents": "hedge_next(${1:int}, ${2:int})",
            "trigger": "hedge_next\tint\n(int; int)"
        },
        {
            "contents": "hedge_next(${1:string}, ${2:int})",
            "trigger": "hedge_next\tint\n(string; int)"
        },
        {
            "contents": "hedge_nextequiv(${1:int}, ${2:int})",
            "trigger": "hedge_nextequiv\tint\n(int; int)"
        },
        {
            "contents": "hedge_nextequiv(${1:string}, ${2:int})",
            "trigger": "hedge_nextequiv\tint\n(string; int)"
        },
        {
            "contents": "hedge_postdstpoint(${1:int}, ${2:int})",
            "trigger": "hedge_postdstpoint\tint\n(int; int)"
        },
        {
            "contents": "hedge_postdstpoint(${1:string}, ${2:int})",
            "trigger": "hedge_postdstpoint\tint\n(string; int)"
        },
        {
            "contents": "hedge_postdstvertex(${1:int}, ${2:int})",
            "trigger": "hedge_postdstvertex\tint\n(int; int)"
        },
        {
            "contents": "hedge_postdstvertex(${1:string}, ${2:int})",
            "trigger": "hedge_postdstvertex\tint\n(string; int)"
        },
        {
            "contents": "hedge_presrcpoint(${1:int}, ${2:int})",
            "trigger": "hedge_presrcpoint\tint\n(int; int)"
        },
        {
            "contents": "hedge_presrcpoint(${1:string}, ${2:int})",
            "trigger": "hedge_presrcpoint\tint\n(string; int)"
        },
        {
            "contents": "hedge_presrcvertex(${1:int}, ${2:int})",
            "trigger": "hedge_presrcvertex\tint\n(int; int)"
        },
        {
            "contents": "hedge_presrcvertex(${1:string}, ${2:int})",
            "trigger": "hedge_presrcvertex\tint\n(string; int)"
        },
        {
            "contents": "hedge_prev(${1:int}, ${2:int})",
            "trigger": "hedge_prev\tint\n(int; int)"
        },
        {
            "contents": "hedge_prev(${1:string}, ${2:int})",
            "trigger": "hedge_prev\tint\n(string; int)"
        },
        {
            "contents": "hedge_prim(${1:int}, ${2:int})",
            "trigger": "hedge_prim\tint\n(int; int)"
        },
        {
            "contents": "hedge_prim(${1:string}, ${2:int})",
            "trigger": "hedge_prim\tint\n(string; int)"
        },
        {
            "contents": "hedge_primary(${1:int}, ${2:int})",
            "trigger": "hedge_primary\tint\n(int; int)"
        },
        {
            "contents": "hedge_primary(${1:string}, ${2:int})",
            "trigger": "hedge_primary\tint\n(string; int)"
        },
        {
            "contents": "hedge_srcpoint(${1:int}, ${2:int})",
            "trigger": "hedge_srcpoint\tint\n(int; int)"
        },
        {
            "contents": "hedge_srcpoint(${1:string}, ${2:int})",
            "trigger": "hedge_srcpoint\tint\n(string; int)"
        },
        {
            "contents": "hedge_srcvertex(${1:int}, ${2:int})",
            "trigger": "hedge_srcvertex\tint\n(int; int)"
        },
        {
            "contents": "hedge_srcvertex(${1:string}, ${2:int})",
            "trigger": "hedge_srcvertex\tint\n(string; int)"
        },
        {
            "contents": "henyeygreenstein(${1:float})",
            "trigger": "henyeygreenstein\tbsdf\n(float)"
        },
        {
            "contents": "henyeygreenstein(${1:float}, ${2:...})",
            "trigger": "henyeygreenstein\tbsdf\n(float; ...)"
        },
        {
            "contents": "hscript_noise(${1:vector})",
            "trigger": "hscript_noise\tfloat\n(vector)"
        },
        {
            "contents": "hscript_rand(${1:float})",
            "trigger": "hscript_rand\tfloat\n(float)"
        },
        {
            "contents": "hscript_rand(${1:float})",
            "trigger": "hscript_rand\tvector4\n(float)"
        },
        {
            "contents": "hscript_rand(${1:float})",
            "trigger": "hscript_rand\tvector\n(float)"
        },
        {
            "contents": "hscript_snoise(${1:vector})",
            "trigger": "hscript_snoise\tfloat\n(vector)"
        },
        {
            "contents": "hscript_sturb(${1:vector}, ${2:int})",
            "trigger": "hscript_sturb\tfloat\n(vector; int)"
        },
        {
            "contents": "hscript_turb(${1:vector}, ${2:int})",
            "trigger": "hscript_turb\tfloat\n(vector; int)"
        },
        {
            "contents": "hsvtorgb(${1:float}, ${2:float}, ${3:float})",
            "trigger": "hsvtorgb\tvector\n(float; float; float)"
        },
        {
            "contents": "hsvtorgb(${1:vector})",
            "trigger": "hsvtorgb\tvector\n(vector)"
        },
        {
            "contents": "ident()",
            "trigger": "ident\tmatrix2\n(void)"
        },
        {
            "contents": "ident()",
            "trigger": "ident\tmatrix3\n(void)"
        },
        {
            "contents": "ident()",
            "trigger": "ident\tmatrix\n(void)"
        },
        {
            "contents": "idtopoint(${1:int}, ${2:int})",
            "trigger": "idtopoint\tint\n(int; int)"
        },
        {
            "contents": "idtopoint(${1:string}, ${2:int})",
            "trigger": "idtopoint\tint\n(string; int)"
        },
        {
            "contents": "idtoprim(${1:int}, ${2:int})",
            "trigger": "idtoprim\tint\n(int; int)"
        },
        {
            "contents": "idtoprim(${1:string}, ${2:int})",
            "trigger": "idtoprim\tint\n(string; int)"
        },
        {
            "contents": "inedgegroup(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "inedgegroup\tint\n(int; string; int; int)"
        },
        {
            "contents": "inedgegroup(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "inedgegroup\tint\n(string; string; int; int)"
        },
        {
            "contents": "inpointgroup(${1:int}, ${2:string}, ${3:int})",
            "trigger": "inpointgroup\tint\n(int; string; int)"
        },
        {
            "contents": "inpointgroup(${1:string}, ${2:string}, ${3:int})",
            "trigger": "inpointgroup\tint\n(string; string; int)"
        },
        {
            "contents": "inprimgroup(${1:int}, ${2:string}, ${3:int})",
            "trigger": "inprimgroup\tint\n(int; string; int)"
        },
        {
            "contents": "inprimgroup(${1:string}, ${2:string}, ${3:int})",
            "trigger": "inprimgroup\tint\n(string; string; int)"
        },
        {
            "contents": "insert(${1:string &}, ${2:int}, ${3:string})",
            "trigger": "insert\tvoid\n(string &; int; string)"
        },
        {
            "contents": "insert(${1:matrix2[] &}, ${2:int}, ${3:matrix2})",
            "trigger": "insert\tvoid\n(matrix2[] &; int; matrix2)"
        },
        {
            "contents": "insert(${1:matrix2[] &}, ${2:int}, ${3:matrix2[]})",
            "trigger": "insert\tvoid\n(matrix2[] &; int; matrix2[])"
        },
        {
            "contents": "insert(${1:matrix3[] &}, ${2:int}, ${3:matrix3})",
            "trigger": "insert\tvoid\n(matrix3[] &; int; matrix3)"
        },
        {
            "contents": "insert(${1:matrix3[] &}, ${2:int}, ${3:matrix3[]})",
            "trigger": "insert\tvoid\n(matrix3[] &; int; matrix3[])"
        },
        {
            "contents": "insert(${1:matrix[] &}, ${2:int}, ${3:matrix})",
            "trigger": "insert\tvoid\n(matrix[] &; int; matrix)"
        },
        {
            "contents": "insert(${1:matrix[] &}, ${2:int}, ${3:matrix[]})",
            "trigger": "insert\tvoid\n(matrix[] &; int; matrix[])"
        },
        {
            "contents": "insert(${1:float[] &}, ${2:int}, ${3:float})",
            "trigger": "insert\tvoid\n(float[] &; int; float)"
        },
        {
            "contents": "insert(${1:float[] &}, ${2:int}, ${3:float[]})",
            "trigger": "insert\tvoid\n(float[] &; int; float[])"
        },
        {
            "contents": "insert(${1:int[] &}, ${2:int}, ${3:int})",
            "trigger": "insert\tvoid\n(int[] &; int; int)"
        },
        {
            "contents": "insert(${1:int[] &}, ${2:int}, ${3:int[]})",
            "trigger": "insert\tvoid\n(int[] &; int; int[])"
        },
        {
            "contents": "insert(${1:vector4[] &}, ${2:int}, ${3:vector4})",
            "trigger": "insert\tvoid\n(vector4[] &; int; vector4)"
        },
        {
            "contents": "insert(${1:vector4[] &}, ${2:int}, ${3:vector4[]})",
            "trigger": "insert\tvoid\n(vector4[] &; int; vector4[])"
        },
        {
            "contents": "insert(${1:string[] &}, ${2:int}, ${3:string})",
            "trigger": "insert\tvoid\n(string[] &; int; string)"
        },
        {
            "contents": "insert(${1:string[] &}, ${2:int}, ${3:string[]})",
            "trigger": "insert\tvoid\n(string[] &; int; string[])"
        },
        {
            "contents": "insert(${1:vector2[] &}, ${2:int}, ${3:vector2})",
            "trigger": "insert\tvoid\n(vector2[] &; int; vector2)"
        },
        {
            "contents": "insert(${1:vector2[] &}, ${2:int}, ${3:vector2[]})",
            "trigger": "insert\tvoid\n(vector2[] &; int; vector2[])"
        },
        {
            "contents": "insert(${1:vector[] &}, ${2:int}, ${3:vector})",
            "trigger": "insert\tvoid\n(vector[] &; int; vector)"
        },
        {
            "contents": "insert(${1:vector[] &}, ${2:int}, ${3:vector[]})",
            "trigger": "insert\tvoid\n(vector[] &; int; vector[])"
        },
        {
            "contents": "instance(${1:vector}, ${2:vector})",
            "trigger": "instance\tmatrix\n(vector; vector)"
        },
        {
            "contents": "instance(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "instance\tmatrix\n(vector; vector; vector)"
        },
        {
            "contents": "instance(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector4}, ${5:vector4})",
            "trigger": "instance\tmatrix\n(vector; vector; vector; vector4; vector4)"
        },
        {
            "contents": "instance(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector4}, ${5:vector4}, ${6:vector})",
            "trigger": "instance\tmatrix\n(vector; vector; vector; vector4; vector4; vector)"
        },
        {
            "contents": "instance(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector4}, ${5:vector})",
            "trigger": "instance\tmatrix\n(vector; vector; vector; vector4; vector)"
        },
        {
            "contents": "instance(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector4}, ${5:vector}, ${6:vector})",
            "trigger": "instance\tmatrix\n(vector; vector; vector; vector4; vector; vector)"
        },
        {
            "contents": "instance(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector})",
            "trigger": "instance\tmatrix\n(vector; vector; vector; vector)"
        },
        {
            "contents": "interpolate(${1:bsdf}, ${2:float}, ${3:float})",
            "trigger": "interpolate\tbsdf\n(bsdf; float; float)"
        },
        {
            "contents": "interpolate(${1:float}, ${2:float}, ${3:float})",
            "trigger": "interpolate\tfloat\n(float; float; float)"
        },
        {
            "contents": "interpolate(${1:vector4}, ${2:float}, ${3:float})",
            "trigger": "interpolate\tvector4\n(vector4; float; float)"
        },
        {
            "contents": "interpolate(${1:vector}, ${2:float}, ${3:float})",
            "trigger": "interpolate\tvector\n(vector; float; float)"
        },
        {
            "contents": "intersect(${1:int}, ${2:string}, ${3:vector}, ${4:vector}, ${5:vector &}, ${6:vector &})",
            "trigger": "intersect\tint\n(int; string; vector; vector; vector &; vector &)"
        },
        {
            "contents": "intersect(${1:int}, ${2:vector}, ${3:vector}, ${4:vector &}, ${5:float &}, ${6:float &})",
            "trigger": "intersect\tint\n(int; vector; vector; vector &; float &; float &)"
        },
        {
            "contents": "intersect(${1:int}, ${2:vector}, ${3:vector}, ${4:vector &}, ${5:vector &})",
            "trigger": "intersect\tint\n(int; vector; vector; vector &; vector &)"
        },
        {
            "contents": "intersect(${1:string}, ${2:string}, ${3:vector}, ${4:vector}, ${5:vector &}, ${6:vector &})",
            "trigger": "intersect\tint\n(string; string; vector; vector; vector &; vector &)"
        },
        {
            "contents": "intersect(${1:string}, ${2:vector}, ${3:vector}, ${4:vector &}, ${5:float &}, ${6:float &})",
            "trigger": "intersect\tint\n(string; vector; vector; vector &; float &; float &)"
        },
        {
            "contents": "intersect(${1:string}, ${2:vector}, ${3:vector}, ${4:vector &}, ${5:float &}, ${6:float &}, ${7:...})",
            "trigger": "intersect\tint\n(string; vector; vector; vector &; float &; float &; ...)"
        },
        {
            "contents": "intersect(${1:string}, ${2:vector}, ${3:vector}, ${4:vector &}, ${5:vector &})",
            "trigger": "intersect\tint\n(string; vector; vector; vector &; vector &)"
        },
        {
            "contents": "intersect_all(${1:int}, ${2:string}, ${3:vector}, ${4:vector}, ${5:vector[] &}, ${6:int[] &}, ${7:vector[] &})",
            "trigger": "intersect_all\tint\n(int; string; vector; vector; vector[] &; int[] &; vector[] &)"
        },
        {
            "contents": "intersect_all(${1:int}, ${2:string}, ${3:vector}, ${4:vector}, ${5:vector[] &}, ${6:int[] &}, ${7:vector[] &}, ${8:float}, ${9:float})",
            "trigger": "intersect_all\tint\n(int; string; vector; vector; vector[] &; int[] &; vector[] &; float; float)"
        },
        {
            "contents": "intersect_all(${1:int}, ${2:vector}, ${3:vector}, ${4:vector[] &}, ${5:int[] &}, ${6:vector[] &})",
            "trigger": "intersect_all\tint\n(int; vector; vector; vector[] &; int[] &; vector[] &)"
        },
        {
            "contents": "intersect_all(${1:int}, ${2:vector}, ${3:vector}, ${4:vector[] &}, ${5:int[] &}, ${6:vector[] &}, ${7:float}, ${8:float})",
            "trigger": "intersect_all\tint\n(int; vector; vector; vector[] &; int[] &; vector[] &; float; float)"
        },
        {
            "contents": "intersect_all(${1:string}, ${2:string}, ${3:vector}, ${4:vector}, ${5:vector[] &}, ${6:int[] &}, ${7:vector[] &})",
            "trigger": "intersect_all\tint\n(string; string; vector; vector; vector[] &; int[] &; vector[] &)"
        },
        {
            "contents": "intersect_all(${1:string}, ${2:string}, ${3:vector}, ${4:vector}, ${5:vector[] &}, ${6:int[] &}, ${7:vector[] &}, ${8:float}, ${9:float})",
            "trigger": "intersect_all\tint\n(string; string; vector; vector; vector[] &; int[] &; vector[] &; float; float)"
        },
        {
            "contents": "intersect_all(${1:string}, ${2:vector}, ${3:vector}, ${4:vector[] &}, ${5:int[] &}, ${6:vector[] &})",
            "trigger": "intersect_all\tint\n(string; vector; vector; vector[] &; int[] &; vector[] &)"
        },
        {
            "contents": "intersect_all(${1:string}, ${2:vector}, ${3:vector}, ${4:vector[] &}, ${5:int[] &}, ${6:vector[] &}, ${7:float}, ${8:float})",
            "trigger": "intersect_all\tint\n(string; vector; vector; vector[] &; int[] &; vector[] &; float; float)"
        },
        {
            "contents": "invert(${1:matrix2})",
            "trigger": "invert\tmatrix2\n(matrix2)"
        },
        {
            "contents": "invert(${1:matrix3})",
            "trigger": "invert\tmatrix3\n(matrix3)"
        },
        {
            "contents": "invert(${1:matrix})",
            "trigger": "invert\tmatrix\n(matrix)"
        },
        {
            "contents": "invertexgroup(${1:int}, ${2:string}, ${3:int})",
            "trigger": "invertexgroup\tint\n(int; string; int)"
        },
        {
            "contents": "invertexgroup(${1:string}, ${2:string}, ${3:int})",
            "trigger": "invertexgroup\tint\n(string; string; int)"
        },
        {
            "contents": "isalpha(${1:string})",
            "trigger": "isalpha\tint\n(string)"
        },
        {
            "contents": "isbound(${1:string})",
            "trigger": "isbound\tint\n(string)"
        },
        {
            "contents": "isconnected(${1:int})",
            "trigger": "isconnected\tint\n(int)"
        },
        {
            "contents": "isdigit(${1:string})",
            "trigger": "isdigit\tint\n(string)"
        },
        {
            "contents": "isfinite(${1:float})",
            "trigger": "isfinite\tint\n(float)"
        },
        {
            "contents": "isframes()",
            "trigger": "isframes\tint\n(void)"
        },
        {
            "contents": "isnan(${1:float})",
            "trigger": "isnan\tint\n(float)"
        },
        {
            "contents": "isotropic()",
            "trigger": "isotropic\tbsdf\n()"
        },
        {
            "contents": "isotropic(${1:...})",
            "trigger": "isotropic\tbsdf\n(...)"
        },
        {
            "contents": "issamples()",
            "trigger": "issamples\tint\n(void)"
        },
        {
            "contents": "isseconds()",
            "trigger": "isseconds\tint\n(void)"
        },
        {
            "contents": "isvalidindex(${1:string}, ${2:int})",
            "trigger": "isvalidindex\tint\n(string; int)"
        },
        {
            "contents": "isvalidindex(${1:matrix2[] &}, ${2:int})",
            "trigger": "isvalidindex\tint\n(matrix2[] &; int)"
        },
        {
            "contents": "isvalidindex(${1:matrix3[] &}, ${2:int})",
            "trigger": "isvalidindex\tint\n(matrix3[] &; int)"
        },
        {
            "contents": "isvalidindex(${1:matrix[] &}, ${2:int})",
            "trigger": "isvalidindex\tint\n(matrix[] &; int)"
        },
        {
            "contents": "isvalidindex(${1:float[] &}, ${2:int})",
            "trigger": "isvalidindex\tint\n(float[] &; int)"
        },
        {
            "contents": "isvalidindex(${1:int[] &}, ${2:int})",
            "trigger": "isvalidindex\tint\n(int[] &; int)"
        },
        {
            "contents": "isvalidindex(${1:vector4[] &}, ${2:int})",
            "trigger": "isvalidindex\tint\n(vector4[] &; int)"
        },
        {
            "contents": "isvalidindex(${1:string[] &}, ${2:int})",
            "trigger": "isvalidindex\tint\n(string[] &; int)"
        },
        {
            "contents": "isvalidindex(${1:vector2[] &}, ${2:int})",
            "trigger": "isvalidindex\tint\n(vector2[] &; int)"
        },
        {
            "contents": "isvalidindex(${1:vector[] &}, ${2:int})",
            "trigger": "isvalidindex\tint\n(vector[] &; int)"
        },
        {
            "contents": "isvarying(${1:matrix2})",
            "trigger": "isvarying\tint\n(matrix2)"
        },
        {
            "contents": "isvarying(${1:matrix3})",
            "trigger": "isvarying\tint\n(matrix3)"
        },
        {
            "contents": "isvarying(${1:matrix})",
            "trigger": "isvarying\tint\n(matrix)"
        },
        {
            "contents": "isvarying(${1:bsdf})",
            "trigger": "isvarying\tint\n(bsdf)"
        },
        {
            "contents": "isvarying(${1:float})",
            "trigger": "isvarying\tint\n(float)"
        },
        {
            "contents": "isvarying(${1:int})",
            "trigger": "isvarying\tint\n(int)"
        },
        {
            "contents": "isvarying(${1:vector4})",
            "trigger": "isvarying\tint\n(vector4)"
        },
        {
            "contents": "isvarying(${1:string})",
            "trigger": "isvarying\tint\n(string)"
        },
        {
            "contents": "isvarying(${1:vector2})",
            "trigger": "isvarying\tint\n(vector2)"
        },
        {
            "contents": "isvarying(${1:vector})",
            "trigger": "isvarying\tint\n(vector)"
        },
        {
            "contents": "isvarying(${1:matrix2[]})",
            "trigger": "isvarying\tint\n(matrix2[])"
        },
        {
            "contents": "isvarying(${1:matrix3[]})",
            "trigger": "isvarying\tint\n(matrix3[])"
        },
        {
            "contents": "isvarying(${1:matrix[]})",
            "trigger": "isvarying\tint\n(matrix[])"
        },
        {
            "contents": "isvarying(${1:bsdf[]})",
            "trigger": "isvarying\tint\n(bsdf[])"
        },
        {
            "contents": "isvarying(${1:float[]})",
            "trigger": "isvarying\tint\n(float[])"
        },
        {
            "contents": "isvarying(${1:int[]})",
            "trigger": "isvarying\tint\n(int[])"
        },
        {
            "contents": "isvarying(${1:vector4[]})",
            "trigger": "isvarying\tint\n(vector4[])"
        },
        {
            "contents": "isvarying(${1:string[]})",
            "trigger": "isvarying\tint\n(string[])"
        },
        {
            "contents": "isvarying(${1:vector2[]})",
            "trigger": "isvarying\tint\n(vector2[])"
        },
        {
            "contents": "isvarying(${1:vector[]})",
            "trigger": "isvarying\tint\n(vector[])"
        },
        {
            "contents": "itoa(${1:int})",
            "trigger": "itoa\tstring\n(int)"
        },
        {
            "contents": "join(${1:string[]}, ${2:string})",
            "trigger": "join\tstring\n(string[]; string)"
        },
        {
            "contents": "kspline(${1:string}, ${2:float}, ${3:float}, ${4:float})",
            "trigger": "kspline\tfloat\n(string; float; float; float)"
        },
        {
            "contents": "kspline(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "kspline\tfloat\n(string; float; float; float; ...)"
        },
        {
            "contents": "kspline(${1:string}, ${2:float}, ${3:vector4}, ${4:float})",
            "trigger": "kspline\tvector4\n(string; float; vector4; float)"
        },
        {
            "contents": "kspline(${1:string}, ${2:float}, ${3:vector4}, ${4:float}, ${5:...})",
            "trigger": "kspline\tvector4\n(string; float; vector4; float; ...)"
        },
        {
            "contents": "kspline(${1:string}, ${2:float}, ${3:vector}, ${4:float})",
            "trigger": "kspline\tvector\n(string; float; vector; float)"
        },
        {
            "contents": "kspline(${1:string}, ${2:float}, ${3:vector}, ${4:float}, ${5:...})",
            "trigger": "kspline\tvector\n(string; float; vector; float; ...)"
        },
        {
            "contents": "len(${1:matrix2})",
            "trigger": "len\tint\n(matrix2)"
        },
        {
            "contents": "len(${1:matrix3})",
            "trigger": "len\tint\n(matrix3)"
        },
        {
            "contents": "len(${1:matrix})",
            "trigger": "len\tint\n(matrix)"
        },
        {
            "contents": "len(${1:vector4})",
            "trigger": "len\tint\n(vector4)"
        },
        {
            "contents": "len(${1:string})",
            "trigger": "len\tint\n(string)"
        },
        {
            "contents": "len(${1:vector2})",
            "trigger": "len\tint\n(vector2)"
        },
        {
            "contents": "len(${1:vector})",
            "trigger": "len\tint\n(vector)"
        },
        {
            "contents": "len(${1:matrix2[]})",
            "trigger": "len\tint\n(matrix2[])"
        },
        {
            "contents": "len(${1:matrix3[]})",
            "trigger": "len\tint\n(matrix3[])"
        },
        {
            "contents": "len(${1:matrix[]})",
            "trigger": "len\tint\n(matrix[])"
        },
        {
            "contents": "len(${1:bsdf[]})",
            "trigger": "len\tint\n(bsdf[])"
        },
        {
            "contents": "len(${1:float[]})",
            "trigger": "len\tint\n(float[])"
        },
        {
            "contents": "len(${1:int[]})",
            "trigger": "len\tint\n(int[])"
        },
        {
            "contents": "len(${1:vector4[]})",
            "trigger": "len\tint\n(vector4[])"
        },
        {
            "contents": "len(${1:string[]})",
            "trigger": "len\tint\n(string[])"
        },
        {
            "contents": "len(${1:vector2[]})",
            "trigger": "len\tint\n(vector2[])"
        },
        {
            "contents": "len(${1:vector[]})",
            "trigger": "len\tint\n(vector[])"
        },
        {
            "contents": "length(${1:float})",
            "trigger": "length\tfloat\n(float)"
        },
        {
            "contents": "length(${1:vector4})",
            "trigger": "length\tfloat\n(vector4)"
        },
        {
            "contents": "length(${1:vector2})",
            "trigger": "length\tfloat\n(vector2)"
        },
        {
            "contents": "length(${1:vector})",
            "trigger": "length\tfloat\n(vector)"
        },
        {
            "contents": "length2(${1:vector4})",
            "trigger": "length2\tfloat\n(vector4)"
        },
        {
            "contents": "length2(${1:vector2})",
            "trigger": "length2\tfloat\n(vector2)"
        },
        {
            "contents": "length2(${1:vector})",
            "trigger": "length2\tfloat\n(vector)"
        },
        {
            "contents": "lerp(${1:bsdf}, ${2:bsdf}, ${3:float})",
            "trigger": "lerp\tbsdf\n(bsdf; bsdf; float)"
        },
        {
            "contents": "lerp(${1:float}, ${2:float}, ${3:float})",
            "trigger": "lerp\tfloat\n(float; float; float)"
        },
        {
            "contents": "lerp(${1:vector4}, ${2:vector4}, ${3:float})",
            "trigger": "lerp\tvector4\n(vector4; vector4; float)"
        },
        {
            "contents": "lerp(${1:vector4}, ${2:vector4}, ${3:vector4})",
            "trigger": "lerp\tvector4\n(vector4; vector4; vector4)"
        },
        {
            "contents": "lerp(${1:vector2}, ${2:vector2}, ${3:float})",
            "trigger": "lerp\tvector2\n(vector2; vector2; float)"
        },
        {
            "contents": "lerp(${1:vector2}, ${2:vector2}, ${3:vector2})",
            "trigger": "lerp\tvector2\n(vector2; vector2; vector2)"
        },
        {
            "contents": "lerp(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "lerp\tvector\n(vector; vector; float)"
        },
        {
            "contents": "lerp(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "lerp\tvector\n(vector; vector; vector)"
        },
        {
            "contents": "limit_sample_space(${1:float}, ${2:float})",
            "trigger": "limit_sample_space\tfloat\n(float; float)"
        },
        {
            "contents": "limit_sample_space(${1:float}, ${2:float}, ${3:float})",
            "trigger": "limit_sample_space\tfloat\n(float; float; float)"
        },
        {
            "contents": "lkspline(${1:float}, ${2:float}, ${3:float})",
            "trigger": "lkspline\tfloat\n(float; float; float)"
        },
        {
            "contents": "lkspline(${1:float}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "lkspline\tfloat\n(float; float; float; ...)"
        },
        {
            "contents": "lkspline(${1:float}, ${2:vector4}, ${3:float})",
            "trigger": "lkspline\tvector4\n(float; vector4; float)"
        },
        {
            "contents": "lkspline(${1:float}, ${2:vector4}, ${3:float}, ${4:...})",
            "trigger": "lkspline\tvector4\n(float; vector4; float; ...)"
        },
        {
            "contents": "lkspline(${1:float}, ${2:vector}, ${3:float})",
            "trigger": "lkspline\tvector\n(float; vector; float)"
        },
        {
            "contents": "lkspline(${1:float}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "lkspline\tvector\n(float; vector; float; ...)"
        },
        {
            "contents": "log(${1:float})",
            "trigger": "log\tfloat\n(float)"
        },
        {
            "contents": "log(${1:vector4})",
            "trigger": "log\tvector4\n(vector4)"
        },
        {
            "contents": "log(${1:vector2})",
            "trigger": "log\tvector2\n(vector2)"
        },
        {
            "contents": "log(${1:vector})",
            "trigger": "log\tvector\n(vector)"
        },
        {
            "contents": "log10(${1:float})",
            "trigger": "log10\tfloat\n(float)"
        },
        {
            "contents": "log10(${1:vector4})",
            "trigger": "log10\tvector4\n(vector4)"
        },
        {
            "contents": "log10(${1:vector2})",
            "trigger": "log10\tvector2\n(vector2)"
        },
        {
            "contents": "log10(${1:vector})",
            "trigger": "log10\tvector\n(vector)"
        },
        {
            "contents": "lookat(${1:vector}, ${2:vector})",
            "trigger": "lookat\tmatrix3\n(vector; vector)"
        },
        {
            "contents": "lookat(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "lookat\tmatrix3\n(vector; vector; float)"
        },
        {
            "contents": "lookat(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "lookat\tmatrix3\n(vector; vector; vector)"
        },
        {
            "contents": "lookat(${1:vector}, ${2:vector}, ${3:float}, ${4:int})",
            "trigger": "lookat\tvector\n(vector; vector; float; int)"
        },
        {
            "contents": "lookat(${1:vector}, ${2:vector}, ${3:vector}, ${4:int})",
            "trigger": "lookat\tvector\n(vector; vector; vector; int)"
        },
        {
            "contents": "lspline(${1:float}, ${2:float})",
            "trigger": "lspline\tfloat\n(float; float)"
        },
        {
            "contents": "lspline(${1:float}, ${2:float}, ${3:...})",
            "trigger": "lspline\tfloat\n(float; float; ...)"
        },
        {
            "contents": "lspline(${1:float}, ${2:vector4})",
            "trigger": "lspline\tvector4\n(float; vector4)"
        },
        {
            "contents": "lspline(${1:float}, ${2:vector4}, ${3:...})",
            "trigger": "lspline\tvector4\n(float; vector4; ...)"
        },
        {
            "contents": "lspline(${1:float}, ${2:vector})",
            "trigger": "lspline\tvector\n(float; vector)"
        },
        {
            "contents": "lspline(${1:float}, ${2:vector}, ${3:...})",
            "trigger": "lspline\tvector\n(float; vector; ...)"
        },
        {
            "contents": "lstrip(${1:string})",
            "trigger": "lstrip\tstring\n(string)"
        },
        {
            "contents": "lstrip(${1:string}, ${2:string})",
            "trigger": "lstrip\tstring\n(string; string)"
        },
        {
            "contents": "luminance(${1:float}, ${2:float}, ${3:float})",
            "trigger": "luminance\tfloat\n(float; float; float)"
        },
        {
            "contents": "luminance(${1:vector4})",
            "trigger": "luminance\tfloat\n(vector4)"
        },
        {
            "contents": "luminance(${1:vector})",
            "trigger": "luminance\tfloat\n(vector)"
        },
        {
            "contents": "makebasis(${1:vector &}, ${2:vector &}, ${3:vector})",
            "trigger": "makebasis\tvoid\n(vector &; vector &; vector)"
        },
        {
            "contents": "makebasis(${1:vector &}, ${2:vector &}, ${3:vector}, ${4:vector})",
            "trigger": "makebasis\tvoid\n(vector &; vector &; vector; vector)"
        },
        {
            "contents": "maketransform(${1:vector}, ${2:vector})",
            "trigger": "maketransform\tmatrix3\n(vector; vector)"
        },
        {
            "contents": "maketransform(${1:int}, ${2:int}, ${3:vector}, ${4:vector}, ${5:vector})",
            "trigger": "maketransform\tmatrix\n(int; int; vector; vector; vector)"
        },
        {
            "contents": "maketransform(${1:int}, ${2:int}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:vector})",
            "trigger": "maketransform\tmatrix\n(int; int; vector; vector; vector; vector)"
        },
        {
            "contents": "maketransform(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "maketransform\tmatrix\n(vector; vector; vector)"
        },
        {
            "contents": "match(${1:string}, ${2:string})",
            "trigger": "match\tint\n(string; string)"
        },
        {
            "contents": "matchvex_blinn(${1:vector}, ${2:float})",
            "trigger": "matchvex_blinn\tbsdf\n(vector; float)"
        },
        {
            "contents": "matchvex_blinn(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "matchvex_blinn\tbsdf\n(vector; float; ...)"
        },
        {
            "contents": "matchvex_specular(${1:vector}, ${2:float})",
            "trigger": "matchvex_specular\tbsdf\n(vector; float)"
        },
        {
            "contents": "matchvex_specular(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "matchvex_specular\tbsdf\n(vector; float; ...)"
        },
        {
            "contents": "max(${1:float})",
            "trigger": "max\tfloat\n(float)"
        },
        {
            "contents": "max(${1:float}, ${2:float})",
            "trigger": "max\tfloat\n(float; float)"
        },
        {
            "contents": "max(${1:float}, ${2:float}, ${3:...})",
            "trigger": "max\tfloat\n(float; float; ...)"
        },
        {
            "contents": "max(${1:vector4})",
            "trigger": "max\tfloat\n(vector4)"
        },
        {
            "contents": "max(${1:vector2})",
            "trigger": "max\tfloat\n(vector2)"
        },
        {
            "contents": "max(${1:vector})",
            "trigger": "max\tfloat\n(vector)"
        },
        {
            "contents": "max(${1:float[]})",
            "trigger": "max\tfloat\n(float[])"
        },
        {
            "contents": "max(${1:int})",
            "trigger": "max\tint\n(int)"
        },
        {
            "contents": "max(${1:int}, ${2:int})",
            "trigger": "max\tint\n(int; int)"
        },
        {
            "contents": "max(${1:int}, ${2:int}, ${3:...})",
            "trigger": "max\tint\n(int; int; ...)"
        },
        {
            "contents": "max(${1:int[]})",
            "trigger": "max\tint\n(int[])"
        },
        {
            "contents": "max(${1:vector4}, ${2:vector4})",
            "trigger": "max\tvector4\n(vector4; vector4)"
        },
        {
            "contents": "max(${1:vector4}, ${2:vector4}, ${3:...})",
            "trigger": "max\tvector4\n(vector4; vector4; ...)"
        },
        {
            "contents": "max(${1:vector4[]})",
            "trigger": "max\tvector4\n(vector4[])"
        },
        {
            "contents": "max(${1:vector2}, ${2:vector2})",
            "trigger": "max\tvector2\n(vector2; vector2)"
        },
        {
            "contents": "max(${1:vector2}, ${2:vector2}, ${3:...})",
            "trigger": "max\tvector2\n(vector2; vector2; ...)"
        },
        {
            "contents": "max(${1:vector2[]})",
            "trigger": "max\tvector2\n(vector2[])"
        },
        {
            "contents": "max(${1:vector}, ${2:vector})",
            "trigger": "max\tvector\n(vector; vector)"
        },
        {
            "contents": "max(${1:vector}, ${2:vector}, ${3:...})",
            "trigger": "max\tvector\n(vector; vector; ...)"
        },
        {
            "contents": "max(${1:vector[]})",
            "trigger": "max\tvector\n(vector[])"
        },
        {
            "contents": "metaimport(${1:int}, ${2:string}, ${3:vector}, ${4:matrix2 &})",
            "trigger": "metaimport\tint\n(int; string; vector; matrix2 &)"
        },
        {
            "contents": "metaimport(${1:int}, ${2:string}, ${3:vector}, ${4:matrix3 &})",
            "trigger": "metaimport\tint\n(int; string; vector; matrix3 &)"
        },
        {
            "contents": "metaimport(${1:int}, ${2:string}, ${3:vector}, ${4:matrix &})",
            "trigger": "metaimport\tint\n(int; string; vector; matrix &)"
        },
        {
            "contents": "metaimport(${1:int}, ${2:string}, ${3:vector}, ${4:float &})",
            "trigger": "metaimport\tint\n(int; string; vector; float &)"
        },
        {
            "contents": "metaimport(${1:int}, ${2:string}, ${3:vector}, ${4:int &})",
            "trigger": "metaimport\tint\n(int; string; vector; int &)"
        },
        {
            "contents": "metaimport(${1:int}, ${2:string}, ${3:vector}, ${4:vector4 &})",
            "trigger": "metaimport\tint\n(int; string; vector; vector4 &)"
        },
        {
            "contents": "metaimport(${1:int}, ${2:string}, ${3:vector}, ${4:vector2 &})",
            "trigger": "metaimport\tint\n(int; string; vector; vector2 &)"
        },
        {
            "contents": "metaimport(${1:int}, ${2:string}, ${3:vector}, ${4:vector &})",
            "trigger": "metaimport\tint\n(int; string; vector; vector &)"
        },
        {
            "contents": "metaimport(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "metaimport\tmatrix3[]\n(string; string; vector)"
        },
        {
            "contents": "metaimport(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "metaimport\tmatrix[]\n(string; string; vector)"
        },
        {
            "contents": "metaimport(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "metaimport\tfloat[]\n(string; string; vector)"
        },
        {
            "contents": "metaimport(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "metaimport\tint[]\n(string; string; vector)"
        },
        {
            "contents": "metaimport(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "metaimport\tvector4[]\n(string; string; vector)"
        },
        {
            "contents": "metaimport(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "metaimport\tvector[]\n(string; string; vector)"
        },
        {
            "contents": "metamarch(${1:int &}, ${2:string}, ${3:vector &}, ${4:vector &}, ${5:float})",
            "trigger": "metamarch\tint\n(int &; string; vector &; vector &; float)"
        },
        {
            "contents": "metanext(${1:int})",
            "trigger": "metanext\tint\n(int)"
        },
        {
            "contents": "metastart(${1:string}, ${2:vector})",
            "trigger": "metastart\tint\n(string; vector)"
        },
        {
            "contents": "metaweight(${1:string}, ${2:vector})",
            "trigger": "metaweight\tfloat\n(string; vector)"
        },
        {
            "contents": "min(${1:float})",
            "trigger": "min\tfloat\n(float)"
        },
        {
            "contents": "min(${1:float}, ${2:float})",
            "trigger": "min\tfloat\n(float; float)"
        },
        {
            "contents": "min(${1:float}, ${2:float}, ${3:...})",
            "trigger": "min\tfloat\n(float; float; ...)"
        },
        {
            "contents": "min(${1:vector4})",
            "trigger": "min\tfloat\n(vector4)"
        },
        {
            "contents": "min(${1:vector2})",
            "trigger": "min\tfloat\n(vector2)"
        },
        {
            "contents": "min(${1:vector})",
            "trigger": "min\tfloat\n(vector)"
        },
        {
            "contents": "min(${1:float[]})",
            "trigger": "min\tfloat\n(float[])"
        },
        {
            "contents": "min(${1:int})",
            "trigger": "min\tint\n(int)"
        },
        {
            "contents": "min(${1:int}, ${2:int})",
            "trigger": "min\tint\n(int; int)"
        },
        {
            "contents": "min(${1:int}, ${2:int}, ${3:...})",
            "trigger": "min\tint\n(int; int; ...)"
        },
        {
            "contents": "min(${1:int[]})",
            "trigger": "min\tint\n(int[])"
        },
        {
            "contents": "min(${1:vector4}, ${2:vector4})",
            "trigger": "min\tvector4\n(vector4; vector4)"
        },
        {
            "contents": "min(${1:vector4}, ${2:vector4}, ${3:...})",
            "trigger": "min\tvector4\n(vector4; vector4; ...)"
        },
        {
            "contents": "min(${1:vector4[]})",
            "trigger": "min\tvector4\n(vector4[])"
        },
        {
            "contents": "min(${1:vector2}, ${2:vector2})",
            "trigger": "min\tvector2\n(vector2; vector2)"
        },
        {
            "contents": "min(${1:vector2}, ${2:vector2}, ${3:...})",
            "trigger": "min\tvector2\n(vector2; vector2; ...)"
        },
        {
            "contents": "min(${1:vector2[]})",
            "trigger": "min\tvector2\n(vector2[])"
        },
        {
            "contents": "min(${1:vector}, ${2:vector})",
            "trigger": "min\tvector\n(vector; vector)"
        },
        {
            "contents": "min(${1:vector}, ${2:vector}, ${3:...})",
            "trigger": "min\tvector\n(vector; vector; ...)"
        },
        {
            "contents": "min(${1:vector[]})",
            "trigger": "min\tvector\n(vector[])"
        },
        {
            "contents": "minpos(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "minpos\tvector\n(int; string; vector)"
        },
        {
            "contents": "minpos(${1:int}, ${2:string}, ${3:vector}, ${4:float})",
            "trigger": "minpos\tvector\n(int; string; vector; float)"
        },
        {
            "contents": "minpos(${1:int}, ${2:vector})",
            "trigger": "minpos\tvector\n(int; vector)"
        },
        {
            "contents": "minpos(${1:int}, ${2:vector}, ${3:float})",
            "trigger": "minpos\tvector\n(int; vector; float)"
        },
        {
            "contents": "minpos(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "minpos\tvector\n(string; string; vector)"
        },
        {
            "contents": "minpos(${1:string}, ${2:string}, ${3:vector}, ${4:float})",
            "trigger": "minpos\tvector\n(string; string; vector; float)"
        },
        {
            "contents": "minpos(${1:string}, ${2:vector})",
            "trigger": "minpos\tvector\n(string; vector)"
        },
        {
            "contents": "minpos(${1:string}, ${2:vector}, ${3:float})",
            "trigger": "minpos\tvector\n(string; vector; float)"
        },
        {
            "contents": "nametopoint(${1:int}, ${2:string})",
            "trigger": "nametopoint\tint\n(int; string)"
        },
        {
            "contents": "nametopoint(${1:string}, ${2:string})",
            "trigger": "nametopoint\tint\n(string; string)"
        },
        {
            "contents": "nametoprim(${1:int}, ${2:string})",
            "trigger": "nametoprim\tint\n(int; string)"
        },
        {
            "contents": "nametoprim(${1:string}, ${2:string})",
            "trigger": "nametoprim\tint\n(string; string)"
        },
        {
            "contents": "nbouncetypes()",
            "trigger": "nbouncetypes\tint\n(void)"
        },
        {
            "contents": "nearpoint(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "nearpoint\tint\n(int; string; vector)"
        },
        {
            "contents": "nearpoint(${1:int}, ${2:string}, ${3:vector}, ${4:float})",
            "trigger": "nearpoint\tint\n(int; string; vector; float)"
        },
        {
            "contents": "nearpoint(${1:int}, ${2:vector})",
            "trigger": "nearpoint\tint\n(int; vector)"
        },
        {
            "contents": "nearpoint(${1:int}, ${2:vector}, ${3:float})",
            "trigger": "nearpoint\tint\n(int; vector; float)"
        },
        {
            "contents": "nearpoint(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "nearpoint\tint\n(string; string; vector)"
        },
        {
            "contents": "nearpoint(${1:string}, ${2:string}, ${3:vector}, ${4:float})",
            "trigger": "nearpoint\tint\n(string; string; vector; float)"
        },
        {
            "contents": "nearpoint(${1:string}, ${2:vector})",
            "trigger": "nearpoint\tint\n(string; vector)"
        },
        {
            "contents": "nearpoint(${1:string}, ${2:vector}, ${3:float})",
            "trigger": "nearpoint\tint\n(string; vector; float)"
        },
        {
            "contents": "nearpoints(${1:int}, ${2:string}, ${3:vector}, ${4:float})",
            "trigger": "nearpoints\tint[]\n(int; string; vector; float)"
        },
        {
            "contents": "nearpoints(${1:int}, ${2:string}, ${3:vector}, ${4:float}, ${5:int})",
            "trigger": "nearpoints\tint[]\n(int; string; vector; float; int)"
        },
        {
            "contents": "nearpoints(${1:int}, ${2:vector}, ${3:float})",
            "trigger": "nearpoints\tint[]\n(int; vector; float)"
        },
        {
            "contents": "nearpoints(${1:int}, ${2:vector}, ${3:float}, ${4:int})",
            "trigger": "nearpoints\tint[]\n(int; vector; float; int)"
        },
        {
            "contents": "nearpoints(${1:string}, ${2:string}, ${3:vector}, ${4:float})",
            "trigger": "nearpoints\tint[]\n(string; string; vector; float)"
        },
        {
            "contents": "nearpoints(${1:string}, ${2:string}, ${3:vector}, ${4:float}, ${5:int})",
            "trigger": "nearpoints\tint[]\n(string; string; vector; float; int)"
        },
        {
            "contents": "nearpoints(${1:string}, ${2:vector}, ${3:float})",
            "trigger": "nearpoints\tint[]\n(string; vector; float)"
        },
        {
            "contents": "nearpoints(${1:string}, ${2:vector}, ${3:float}, ${4:int})",
            "trigger": "nearpoints\tint[]\n(string; vector; float; int)"
        },
        {
            "contents": "nedgesgroup(${1:int}, ${2:string})",
            "trigger": "nedgesgroup\tint\n(int; string)"
        },
        {
            "contents": "nedgesgroup(${1:string}, ${2:string})",
            "trigger": "nedgesgroup\tint\n(string; string)"
        },
        {
            "contents": "neighbour(${1:int}, ${2:int}, ${3:int})",
            "trigger": "neighbour\tint\n(int; int; int)"
        },
        {
            "contents": "neighbour(${1:string}, ${2:int}, ${3:int})",
            "trigger": "neighbour\tint\n(string; int; int)"
        },
        {
            "contents": "neighbourcount(${1:int}, ${2:int})",
            "trigger": "neighbourcount\tint\n(int; int)"
        },
        {
            "contents": "neighbourcount(${1:string}, ${2:int})",
            "trigger": "neighbourcount\tint\n(string; int)"
        },
        {
            "contents": "neighbours(${1:int}, ${2:int})",
            "trigger": "neighbours\tint[]\n(int; int)"
        },
        {
            "contents": "neighbours(${1:string}, ${2:int})",
            "trigger": "neighbours\tint[]\n(string; int)"
        },
        {
            "contents": "ninputs()",
            "trigger": "ninputs\tint\n(void)"
        },
        {
            "contents": "noise(${1:float})",
            "trigger": "noise\tfloat\n(float)"
        },
        {
            "contents": "noise(${1:float}, ${2:float})",
            "trigger": "noise\tfloat\n(float; float)"
        },
        {
            "contents": "noise(${1:vector4})",
            "trigger": "noise\tfloat\n(vector4)"
        },
        {
            "contents": "noise(${1:vector})",
            "trigger": "noise\tfloat\n(vector)"
        },
        {
            "contents": "noise(${1:float})",
            "trigger": "noise\tvector\n(float)"
        },
        {
            "contents": "noise(${1:float}, ${2:float})",
            "trigger": "noise\tvector\n(float; float)"
        },
        {
            "contents": "noise(${1:vector4})",
            "trigger": "noise\tvector\n(vector4)"
        },
        {
            "contents": "noise(${1:vector})",
            "trigger": "noise\tvector\n(vector)"
        },
        {
            "contents": "noised(${1:float}, ${2:float &}, ${3:float &})",
            "trigger": "noised\tvoid\n(float; float &; float &)"
        },
        {
            "contents": "noised(${1:float}, ${2:float}, ${3:float &}, ${4:float &}, ${5:float &})",
            "trigger": "noised\tvoid\n(float; float; float &; float &; float &)"
        },
        {
            "contents": "noised(${1:float}, ${2:float}, ${3:vector &}, ${4:vector &}, ${5:vector &})",
            "trigger": "noised\tvoid\n(float; float; vector &; vector &; vector &)"
        },
        {
            "contents": "noised(${1:float}, ${2:vector &}, ${3:vector &})",
            "trigger": "noised\tvoid\n(float; vector &; vector &)"
        },
        {
            "contents": "noised(${1:vector4}, ${2:float &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &})",
            "trigger": "noised\tvoid\n(vector4; float &; float &; float &; float &; float &)"
        },
        {
            "contents": "noised(${1:vector4}, ${2:vector &}, ${3:vector &}, ${4:vector &}, ${5:vector &}, ${6:vector &})",
            "trigger": "noised\tvoid\n(vector4; vector &; vector &; vector &; vector &; vector &)"
        },
        {
            "contents": "noised(${1:vector}, ${2:float &}, ${3:float &}, ${4:float &}, ${5:float &})",
            "trigger": "noised\tvoid\n(vector; float &; float &; float &; float &)"
        },
        {
            "contents": "noised(${1:vector}, ${2:vector &}, ${3:vector &}, ${4:vector &}, ${5:vector &})",
            "trigger": "noised\tvoid\n(vector; vector &; vector &; vector &; vector &)"
        },
        {
            "contents": "normal_bsdf(${1:bsdf})",
            "trigger": "normal_bsdf\tvector\n(bsdf)"
        },
        {
            "contents": "normalize(${1:vector4})",
            "trigger": "normalize\tvector4\n(vector4)"
        },
        {
            "contents": "normalize(${1:vector2})",
            "trigger": "normalize\tvector2\n(vector2)"
        },
        {
            "contents": "normalize(${1:vector})",
            "trigger": "normalize\tvector\n(vector)"
        },
        {
            "contents": "npoints(${1:int})",
            "trigger": "npoints\tint\n(int)"
        },
        {
            "contents": "npoints(${1:string})",
            "trigger": "npoints\tint\n(string)"
        },
        {
            "contents": "npointsgroup(${1:int}, ${2:string})",
            "trigger": "npointsgroup\tint\n(int; string)"
        },
        {
            "contents": "npointsgroup(${1:string}, ${2:string})",
            "trigger": "npointsgroup\tint\n(string; string)"
        },
        {
            "contents": "nprimitives(${1:int})",
            "trigger": "nprimitives\tint\n(int)"
        },
        {
            "contents": "nprimitives(${1:string})",
            "trigger": "nprimitives\tint\n(string)"
        },
        {
            "contents": "nprimitivesgroup(${1:int}, ${2:string})",
            "trigger": "nprimitivesgroup\tint\n(int; string)"
        },
        {
            "contents": "nprimitivesgroup(${1:string}, ${2:string})",
            "trigger": "nprimitivesgroup\tint\n(string; string)"
        },
        {
            "contents": "nrandom()",
            "trigger": "nrandom\tfloat\n()"
        },
        {
            "contents": "nrandom(${1:...})",
            "trigger": "nrandom\tfloat\n(...)"
        },
        {
            "contents": "nrandom(${1:float &}, ${2:float &})",
            "trigger": "nrandom\tvoid\n(float &; float &)"
        },
        {
            "contents": "nrandom(${1:float &}, ${2:float &}, ${3:...})",
            "trigger": "nrandom\tvoid\n(float &; float &; ...)"
        },
        {
            "contents": "nrandom()",
            "trigger": "nrandom\tvector4\n()"
        },
        {
            "contents": "nrandom(${1:...})",
            "trigger": "nrandom\tvector4\n(...)"
        },
        {
            "contents": "nrandom()",
            "trigger": "nrandom\tvector\n()"
        },
        {
            "contents": "nrandom(${1:...})",
            "trigger": "nrandom\tvector\n(...)"
        },
        {
            "contents": "ntransform(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "ntransform\tvector\n(string; string; vector)"
        },
        {
            "contents": "ntransform(${1:string}, ${2:vector})",
            "trigger": "ntransform\tvector\n(string; vector)"
        },
        {
            "contents": "ntransform(${1:vector}, ${2:matrix})",
            "trigger": "ntransform\tvector\n(vector; matrix)"
        },
        {
            "contents": "nuniqueval(${1:int}, ${2:string}, ${3:string})",
            "trigger": "nuniqueval\tint\n(int; string; string)"
        },
        {
            "contents": "nuniqueval(${1:string}, ${2:string}, ${3:string})",
            "trigger": "nuniqueval\tint\n(string; string; string)"
        },
        {
            "contents": "nvertices(${1:int})",
            "trigger": "nvertices\tint\n(int)"
        },
        {
            "contents": "nvertices(${1:string})",
            "trigger": "nvertices\tint\n(string)"
        },
        {
            "contents": "nverticesgroup(${1:int}, ${2:string})",
            "trigger": "nverticesgroup\tint\n(int; string)"
        },
        {
            "contents": "nverticesgroup(${1:string}, ${2:string})",
            "trigger": "nverticesgroup\tint\n(string; string)"
        },
        {
            "contents": "ocean_sample(${1:string}, ${2:int}, ${3:int}, ${4:int}, ${5:float}, ${6:float}, ${7:int}, ${8:int}, ${9:vector})",
            "trigger": "ocean_sample\tvector\n(string; int; int; int; float; float; int; int; vector)"
        },
        {
            "contents": "ocio_import(${1:string}, ${2:string}, ${3:int &})",
            "trigger": "ocio_import\tint\n(string; string; int &)"
        },
        {
            "contents": "ocio_import(${1:string}, ${2:string}, ${3:string &})",
            "trigger": "ocio_import\tint\n(string; string; string &)"
        },
        {
            "contents": "ocio_import(${1:string}, ${2:string}, ${3:vector &})",
            "trigger": "ocio_import\tint\n(string; string; vector &)"
        },
        {
            "contents": "ocio_spaces()",
            "trigger": "ocio_spaces\tstring[]\n(void)"
        },
        {
            "contents": "ocio_transform(${1:string}, ${2:vector4})",
            "trigger": "ocio_transform\tvector4\n(string; vector4)"
        },
        {
            "contents": "ocio_transform(${1:string}, ${2:string}, ${3:vector4})",
            "trigger": "ocio_transform\tvector4\n(string; string; vector4)"
        },
        {
            "contents": "ocio_transform(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "ocio_transform\tvector\n(string; string; vector)"
        },
        {
            "contents": "ocio_transform(${1:string}, ${2:vector})",
            "trigger": "ocio_transform\tvector\n(string; vector)"
        },
        {
            "contents": "onoise(${1:vector})",
            "trigger": "onoise\tfloat\n(vector)"
        },
        {
            "contents": "onoise(${1:vector}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "onoise\tfloat\n(vector; int; float; float)"
        },
        {
            "contents": "onoise(${1:vector})",
            "trigger": "onoise\tvector\n(vector)"
        },
        {
            "contents": "onoise(${1:vector}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "onoise\tvector\n(vector; int; float; float)"
        },
        {
            "contents": "opdigits()",
            "trigger": "opdigits\tint\n(void)"
        },
        {
            "contents": "opdigits(${1:string})",
            "trigger": "opdigits\tint\n(string)"
        },
        {
            "contents": "opfullpath(${1:string})",
            "trigger": "opfullpath\tstring\n(string)"
        },
        {
            "contents": "opparentbonetransform(${1:string})",
            "trigger": "opparentbonetransform\tmatrix\n(string)"
        },
        {
            "contents": "opparentbonetransform(${1:string}, ${2:float})",
            "trigger": "opparentbonetransform\tmatrix\n(string; float)"
        },
        {
            "contents": "opparenttransform(${1:string})",
            "trigger": "opparenttransform\tmatrix\n(string)"
        },
        {
            "contents": "opparenttransform(${1:string}, ${2:float})",
            "trigger": "opparenttransform\tmatrix\n(string; float)"
        },
        {
            "contents": "opparmtransform(${1:string})",
            "trigger": "opparmtransform\tmatrix\n(string)"
        },
        {
            "contents": "opparmtransform(${1:string}, ${2:float})",
            "trigger": "opparmtransform\tmatrix\n(string; float)"
        },
        {
            "contents": "oppreconstrainttransform(${1:string})",
            "trigger": "oppreconstrainttransform\tmatrix\n(string)"
        },
        {
            "contents": "oppreconstrainttransform(${1:string}, ${2:float})",
            "trigger": "oppreconstrainttransform\tmatrix\n(string; float)"
        },
        {
            "contents": "oppretransform(${1:string})",
            "trigger": "oppretransform\tmatrix\n(string)"
        },
        {
            "contents": "oppretransform(${1:string}, ${2:float})",
            "trigger": "oppretransform\tmatrix\n(string; float)"
        },
        {
            "contents": "optransform(${1:string})",
            "trigger": "optransform\tmatrix\n(string)"
        },
        {
            "contents": "optransform(${1:string}, ${2:float})",
            "trigger": "optransform\tmatrix\n(string; float)"
        },
        {
            "contents": "ord(${1:string})",
            "trigger": "ord\tint\n(string)"
        },
        {
            "contents": "osd_facecount(${1:int})",
            "trigger": "osd_facecount\tint\n(int)"
        },
        {
            "contents": "osd_facecount(${1:string})",
            "trigger": "osd_facecount\tint\n(string)"
        },
        {
            "contents": "osd_firstpatch(${1:int}, ${2:int})",
            "trigger": "osd_firstpatch\tint\n(int; int)"
        },
        {
            "contents": "osd_firstpatch(${1:string}, ${2:int})",
            "trigger": "osd_firstpatch\tint\n(string; int)"
        },
        {
            "contents": "osd_limitsurface(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix2 &})",
            "trigger": "osd_limitsurface\tint\n(int; string; int; float; float; matrix2 &)"
        },
        {
            "contents": "osd_limitsurface(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix3 &})",
            "trigger": "osd_limitsurface\tint\n(int; string; int; float; float; matrix3 &)"
        },
        {
            "contents": "osd_limitsurface(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix &})",
            "trigger": "osd_limitsurface\tint\n(int; string; int; float; float; matrix &)"
        },
        {
            "contents": "osd_limitsurface(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:float &})",
            "trigger": "osd_limitsurface\tint\n(int; string; int; float; float; float &)"
        },
        {
            "contents": "osd_limitsurface(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector4 &})",
            "trigger": "osd_limitsurface\tint\n(int; string; int; float; float; vector4 &)"
        },
        {
            "contents": "osd_limitsurface(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector2 &})",
            "trigger": "osd_limitsurface\tint\n(int; string; int; float; float; vector2 &)"
        },
        {
            "contents": "osd_limitsurface(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector &})",
            "trigger": "osd_limitsurface\tint\n(int; string; int; float; float; vector &)"
        },
        {
            "contents": "osd_limitsurface(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:float[] &})",
            "trigger": "osd_limitsurface\tint\n(int; string; int; float; float; float[] &)"
        },
        {
            "contents": "osd_limitsurface(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix2 &})",
            "trigger": "osd_limitsurface\tint\n(string; string; int; float; float; matrix2 &)"
        },
        {
            "contents": "osd_limitsurface(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix3 &})",
            "trigger": "osd_limitsurface\tint\n(string; string; int; float; float; matrix3 &)"
        },
        {
            "contents": "osd_limitsurface(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix &})",
            "trigger": "osd_limitsurface\tint\n(string; string; int; float; float; matrix &)"
        },
        {
            "contents": "osd_limitsurface(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:float &})",
            "trigger": "osd_limitsurface\tint\n(string; string; int; float; float; float &)"
        },
        {
            "contents": "osd_limitsurface(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector4 &})",
            "trigger": "osd_limitsurface\tint\n(string; string; int; float; float; vector4 &)"
        },
        {
            "contents": "osd_limitsurface(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector2 &})",
            "trigger": "osd_limitsurface\tint\n(string; string; int; float; float; vector2 &)"
        },
        {
            "contents": "osd_limitsurface(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector &})",
            "trigger": "osd_limitsurface\tint\n(string; string; int; float; float; vector &)"
        },
        {
            "contents": "osd_limitsurface(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:float[] &})",
            "trigger": "osd_limitsurface\tint\n(string; string; int; float; float; float[] &)"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix2 &})",
            "trigger": "osd_limitsurfacevertex\tint\n(int; string; int; float; float; matrix2 &)"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix3 &})",
            "trigger": "osd_limitsurfacevertex\tint\n(int; string; int; float; float; matrix3 &)"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix &})",
            "trigger": "osd_limitsurfacevertex\tint\n(int; string; int; float; float; matrix &)"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:float &})",
            "trigger": "osd_limitsurfacevertex\tint\n(int; string; int; float; float; float &)"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector4 &})",
            "trigger": "osd_limitsurfacevertex\tint\n(int; string; int; float; float; vector4 &)"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector2 &})",
            "trigger": "osd_limitsurfacevertex\tint\n(int; string; int; float; float; vector2 &)"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector &})",
            "trigger": "osd_limitsurfacevertex\tint\n(int; string; int; float; float; vector &)"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:float[] &})",
            "trigger": "osd_limitsurfacevertex\tint\n(int; string; int; float; float; float[] &)"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix2 &})",
            "trigger": "osd_limitsurfacevertex\tint\n(string; string; int; float; float; matrix2 &)"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix3 &})",
            "trigger": "osd_limitsurfacevertex\tint\n(string; string; int; float; float; matrix3 &)"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:matrix &})",
            "trigger": "osd_limitsurfacevertex\tint\n(string; string; int; float; float; matrix &)"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:float &})",
            "trigger": "osd_limitsurfacevertex\tint\n(string; string; int; float; float; float &)"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector4 &})",
            "trigger": "osd_limitsurfacevertex\tint\n(string; string; int; float; float; vector4 &)"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector2 &})",
            "trigger": "osd_limitsurfacevertex\tint\n(string; string; int; float; float; vector2 &)"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector &})",
            "trigger": "osd_limitsurfacevertex\tint\n(string; string; int; float; float; vector &)"
        },
        {
            "contents": "osd_limitsurfacevertex(${1:string}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:float[] &})",
            "trigger": "osd_limitsurfacevertex\tint\n(string; string; int; float; float; float[] &)"
        },
        {
            "contents": "osd_lookupface(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:int &}, ${6:float &}, ${7:float &})",
            "trigger": "osd_lookupface\tint\n(int; int; float; float; int &; float &; float &)"
        },
        {
            "contents": "osd_lookupface(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:int &}, ${6:float &}, ${7:float &}, ${8:string})",
            "trigger": "osd_lookupface\tint\n(int; int; float; float; int &; float &; float &; string)"
        },
        {
            "contents": "osd_lookupface(${1:string}, ${2:int}, ${3:float}, ${4:float}, ${5:int &}, ${6:float &}, ${7:float &})",
            "trigger": "osd_lookupface\tint\n(string; int; float; float; int &; float &; float &)"
        },
        {
            "contents": "osd_lookupface(${1:string}, ${2:int}, ${3:float}, ${4:float}, ${5:int &}, ${6:float &}, ${7:float &}, ${8:string})",
            "trigger": "osd_lookupface\tint\n(string; int; float; float; int &; float &; float &; string)"
        },
        {
            "contents": "osd_lookuppatch(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:int &}, ${6:float &}, ${7:float &})",
            "trigger": "osd_lookuppatch\tint\n(int; int; float; float; int &; float &; float &)"
        },
        {
            "contents": "osd_lookuppatch(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:int &}, ${6:float &}, ${7:float &}, ${8:string})",
            "trigger": "osd_lookuppatch\tint\n(int; int; float; float; int &; float &; float &; string)"
        },
        {
            "contents": "osd_lookuppatch(${1:string}, ${2:int}, ${3:float}, ${4:float}, ${5:int &}, ${6:float &}, ${7:float &})",
            "trigger": "osd_lookuppatch\tint\n(string; int; float; float; int &; float &; float &)"
        },
        {
            "contents": "osd_lookuppatch(${1:string}, ${2:int}, ${3:float}, ${4:float}, ${5:int &}, ${6:float &}, ${7:float &}, ${8:string})",
            "trigger": "osd_lookuppatch\tint\n(string; int; float; float; int &; float &; float &; string)"
        },
        {
            "contents": "osd_patchcount(${1:int})",
            "trigger": "osd_patchcount\tint\n(int)"
        },
        {
            "contents": "osd_patchcount(${1:int}, ${2:int})",
            "trigger": "osd_patchcount\tint\n(int; int)"
        },
        {
            "contents": "osd_patchcount(${1:string})",
            "trigger": "osd_patchcount\tint\n(string)"
        },
        {
            "contents": "osd_patchcount(${1:string}, ${2:int})",
            "trigger": "osd_patchcount\tint\n(string; int)"
        },
        {
            "contents": "osd_patches(${1:int}, ${2:int})",
            "trigger": "osd_patches\tint[]\n(int; int)"
        },
        {
            "contents": "osd_patches(${1:string}, ${2:int})",
            "trigger": "osd_patches\tint[]\n(string; int)"
        },
        {
            "contents": "outerproduct(${1:vector2}, ${2:vector2})",
            "trigger": "outerproduct\tmatrix2\n(vector2; vector2)"
        },
        {
            "contents": "outerproduct(${1:vector}, ${2:vector})",
            "trigger": "outerproduct\tmatrix3\n(vector; vector)"
        },
        {
            "contents": "outerproduct(${1:vector4}, ${2:vector4})",
            "trigger": "outerproduct\tmatrix\n(vector4; vector4)"
        },
        {
            "contents": "ow_nspace(${1:vector})",
            "trigger": "ow_nspace\tvector\n(vector)"
        },
        {
            "contents": "ow_space()",
            "trigger": "ow_space\tmatrix\n(void)"
        },
        {
            "contents": "ow_space(${1:vector4})",
            "trigger": "ow_space\tvector4\n(vector4)"
        },
        {
            "contents": "ow_space(${1:vector})",
            "trigger": "ow_space\tvector\n(vector)"
        },
        {
            "contents": "ow_vspace(${1:vector})",
            "trigger": "ow_vspace\tvector\n(vector)"
        },
        {
            "contents": "pack_inttosafefloat(${1:int})",
            "trigger": "pack_inttosafefloat\tfloat\n(int)"
        },
        {
            "contents": "pcclose(${1:int &})",
            "trigger": "pcclose\tvoid\n(int &)"
        },
        {
            "contents": "pcconvex(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "pcconvex\tfloat\n(int; string; vector)"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:matrix3})",
            "trigger": "pcexport\tint\n(int; string; matrix3)"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:matrix3}, ${4:...})",
            "trigger": "pcexport\tint\n(int; string; matrix3; ...)"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:matrix})",
            "trigger": "pcexport\tint\n(int; string; matrix)"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:matrix}, ${4:...})",
            "trigger": "pcexport\tint\n(int; string; matrix; ...)"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:float})",
            "trigger": "pcexport\tint\n(int; string; float)"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:float}, ${4:...})",
            "trigger": "pcexport\tint\n(int; string; float; ...)"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:int})",
            "trigger": "pcexport\tint\n(int; string; int)"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:int}, ${4:...})",
            "trigger": "pcexport\tint\n(int; string; int; ...)"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:vector4})",
            "trigger": "pcexport\tint\n(int; string; vector4)"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:vector4}, ${4:...})",
            "trigger": "pcexport\tint\n(int; string; vector4; ...)"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:string})",
            "trigger": "pcexport\tint\n(int; string; string)"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:string}, ${4:...})",
            "trigger": "pcexport\tint\n(int; string; string; ...)"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "pcexport\tint\n(int; string; vector)"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:vector}, ${4:...})",
            "trigger": "pcexport\tint\n(int; string; vector; ...)"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:vector}, ${4:float})",
            "trigger": "pcexport\tint\n(int; string; vector; float)"
        },
        {
            "contents": "pcexport(${1:int}, ${2:string}, ${3:vector}, ${4:float}, ${5:...})",
            "trigger": "pcexport\tint\n(int; string; vector; float; ...)"
        },
        {
            "contents": "pcfarthest(${1:int})",
            "trigger": "pcfarthest\tfloat\n(int)"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string})",
            "trigger": "pcfilter\tmatrix3\n(int; string)"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string}, ${3:...})",
            "trigger": "pcfilter\tmatrix3\n(int; string; ...)"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string})",
            "trigger": "pcfilter\tmatrix\n(int; string)"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string}, ${3:...})",
            "trigger": "pcfilter\tmatrix\n(int; string; ...)"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string})",
            "trigger": "pcfilter\tfloat\n(int; string)"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string}, ${3:...})",
            "trigger": "pcfilter\tfloat\n(int; string; ...)"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string})",
            "trigger": "pcfilter\tint\n(int; string)"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string}, ${3:...})",
            "trigger": "pcfilter\tint\n(int; string; ...)"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string})",
            "trigger": "pcfilter\tvector4\n(int; string)"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string}, ${3:...})",
            "trigger": "pcfilter\tvector4\n(int; string; ...)"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string})",
            "trigger": "pcfilter\tvector\n(int; string)"
        },
        {
            "contents": "pcfilter(${1:int}, ${2:string}, ${3:...})",
            "trigger": "pcfilter\tvector\n(int; string; ...)"
        },
        {
            "contents": "pcfind(${1:int}, ${2:string}, ${3:string}, ${4:vector}, ${5:float}, ${6:int})",
            "trigger": "pcfind\tint[]\n(int; string; string; vector; float; int)"
        },
        {
            "contents": "pcfind(${1:int}, ${2:string}, ${3:vector}, ${4:float}, ${5:int})",
            "trigger": "pcfind\tint[]\n(int; string; vector; float; int)"
        },
        {
            "contents": "pcfind(${1:string}, ${2:string}, ${3:string}, ${4:vector}, ${5:float}, ${6:int})",
            "trigger": "pcfind\tint[]\n(string; string; string; vector; float; int)"
        },
        {
            "contents": "pcfind(${1:string}, ${2:string}, ${3:vector}, ${4:float}, ${5:int})",
            "trigger": "pcfind\tint[]\n(string; string; vector; float; int)"
        },
        {
            "contents": "pcfind_radius(${1:int}, ${2:string}, ${3:string}, ${4:float}, ${5:vector}, ${6:float}, ${7:int})",
            "trigger": "pcfind_radius\tint[]\n(int; string; string; float; vector; float; int)"
        },
        {
            "contents": "pcfind_radius(${1:int}, ${2:string}, ${3:string}, ${4:string}, ${5:float}, ${6:vector}, ${7:float}, ${8:int})",
            "trigger": "pcfind_radius\tint[]\n(int; string; string; string; float; vector; float; int)"
        },
        {
            "contents": "pcfind_radius(${1:string}, ${2:string}, ${3:string}, ${4:float}, ${5:vector}, ${6:float}, ${7:int})",
            "trigger": "pcfind_radius\tint[]\n(string; string; string; float; vector; float; int)"
        },
        {
            "contents": "pcfind_radius(${1:string}, ${2:string}, ${3:string}, ${4:string}, ${5:float}, ${6:vector}, ${7:float}, ${8:int})",
            "trigger": "pcfind_radius\tint[]\n(string; string; string; string; float; vector; float; int)"
        },
        {
            "contents": "pcgenerate(${1:string}, ${2:int})",
            "trigger": "pcgenerate\tint\n(string; int)"
        },
        {
            "contents": "pcimport(${1:int}, ${2:string}, ${3:matrix3 &})",
            "trigger": "pcimport\tint\n(int; string; matrix3 &)"
        },
        {
            "contents": "pcimport(${1:int}, ${2:string}, ${3:matrix &})",
            "trigger": "pcimport\tint\n(int; string; matrix &)"
        },
        {
            "contents": "pcimport(${1:int}, ${2:string}, ${3:float &})",
            "trigger": "pcimport\tint\n(int; string; float &)"
        },
        {
            "contents": "pcimport(${1:int}, ${2:string}, ${3:int &})",
            "trigger": "pcimport\tint\n(int; string; int &)"
        },
        {
            "contents": "pcimport(${1:int}, ${2:string}, ${3:vector4 &})",
            "trigger": "pcimport\tint\n(int; string; vector4 &)"
        },
        {
            "contents": "pcimport(${1:int}, ${2:string}, ${3:string &})",
            "trigger": "pcimport\tint\n(int; string; string &)"
        },
        {
            "contents": "pcimport(${1:int}, ${2:string}, ${3:vector &})",
            "trigger": "pcimport\tint\n(int; string; vector &)"
        },
        {
            "contents": "pcimportbyidx3(${1:int}, ${2:string}, ${3:int})",
            "trigger": "pcimportbyidx3\tmatrix3\n(int; string; int)"
        },
        {
            "contents": "pcimportbyidx4(${1:int}, ${2:string}, ${3:int})",
            "trigger": "pcimportbyidx4\tmatrix\n(int; string; int)"
        },
        {
            "contents": "pcimportbyidxf(${1:int}, ${2:string}, ${3:int})",
            "trigger": "pcimportbyidxf\tfloat\n(int; string; int)"
        },
        {
            "contents": "pcimportbyidxi(${1:int}, ${2:string}, ${3:int})",
            "trigger": "pcimportbyidxi\tint\n(int; string; int)"
        },
        {
            "contents": "pcimportbyidxp(${1:int}, ${2:string}, ${3:int})",
            "trigger": "pcimportbyidxp\tvector4\n(int; string; int)"
        },
        {
            "contents": "pcimportbyidxs(${1:int}, ${2:string}, ${3:int})",
            "trigger": "pcimportbyidxs\tstring\n(int; string; int)"
        },
        {
            "contents": "pcimportbyidxv(${1:int}, ${2:string}, ${3:int})",
            "trigger": "pcimportbyidxv\tvector\n(int; string; int)"
        },
        {
            "contents": "pciterate(${1:int})",
            "trigger": "pciterate\tint\n(int)"
        },
        {
            "contents": "pcnumfound(${1:int})",
            "trigger": "pcnumfound\tint\n(int)"
        },
        {
            "contents": "pcopen(${1:int}, ${2:string}, ${3:vector}, ${4:float}, ${5:int})",
            "trigger": "pcopen()\tint\n(int; string; vector; float; int)"
        },
        {
            "contents": "pcopen(${1:string}, ${2:string}, ${3:int})",
            "trigger": "pcopen()\tint\n(string; string; int)"
        },
        {
            "contents": "pcopen(${1:string}, ${2:string}, ${3:int}, ${4:...})",
            "trigger": "pcopen()\tint\n(string; string; int; ...)"
        },
        {
            "contents": "pcopen(${1:string}, ${2:string}, ${3:vector}, ${4:float}, ${5:int})",
            "trigger": "pcopen()\tint\n(string; string; vector; float; int)"
        },
        {
            "contents": "pcopen(${1:string}, ${2:string}, ${3:vector}, ${4:float}, ${5:int}, ${6:...})",
            "trigger": "pcopen()\tint\n(string; string; vector; float; int; ...)"
        },
        {
            "contents": "pcopen(${1:string}, ${2:string}, ${3:vector}, ${4:string}, ${5:vector}, ${6:float}, ${7:int})",
            "trigger": "pcopen()\tint\n(string; string; vector; string; vector; float; int)"
        },
        {
            "contents": "pcopen(${1:string}, ${2:string}, ${3:vector}, ${4:string}, ${5:vector}, ${6:float}, ${7:int}, ${8:...})",
            "trigger": "pcopen()\tint\n(string; string; vector; string; vector; float; int; ...)"
        },
        {
            "contents": "pcopenlod(${1:string}, ${2:string}, ${3:vector}, ${4:int})",
            "trigger": "pcopenlod\tint\n(string; string; vector; int)"
        },
        {
            "contents": "pcopenlod(${1:string}, ${2:string}, ${3:vector}, ${4:int}, ${5:...})",
            "trigger": "pcopenlod\tint\n(string; string; vector; int; ...)"
        },
        {
            "contents": "pcsampleleaf(${1:int}, ${2:float})",
            "trigger": "pcsampleleaf\tvoid\n(int; float)"
        },
        {
            "contents": "pcsize(${1:int})",
            "trigger": "pcsize\tint\n(int)"
        },
        {
            "contents": "pcunshaded(${1:int}, ${2:string})",
            "trigger": "pcunshaded\tint\n(int; string)"
        },
        {
            "contents": "pcwrite(${1:string})",
            "trigger": "pcwrite\tint\n(string)"
        },
        {
            "contents": "pcwrite(${1:string}, ${2:...})",
            "trigger": "pcwrite\tint\n(string; ...)"
        },
        {
            "contents": "pgfind(${1:int}, ${2:string}, ${3:vector}, ${4:float}, ${5:int}, ${6:float})",
            "trigger": "pgfind\tint[]\n(int; string; vector; float; int; float)"
        },
        {
            "contents": "pgfind(${1:int}, ${2:vector}, ${3:float}, ${4:int}, ${5:float})",
            "trigger": "pgfind\tint[]\n(int; vector; float; int; float)"
        },
        {
            "contents": "pgfind(${1:string}, ${2:string}, ${3:vector}, ${4:float}, ${5:int}, ${6:float})",
            "trigger": "pgfind\tint[]\n(string; string; vector; float; int; float)"
        },
        {
            "contents": "pgfind(${1:string}, ${2:vector}, ${3:float}, ${4:int}, ${5:float})",
            "trigger": "pgfind\tint[]\n(string; vector; float; int; float)"
        },
        {
            "contents": "phongBRDF(${1:vector}, ${2:vector}, ${3:vector}, ${4:float})",
            "trigger": "phongBRDF\tfloat\n(vector; vector; vector; float)"
        },
        {
            "contents": "phonglobe(${1:vector}, ${2:vector}, ${3:float}, ${4:float}, ${5:vector}, ${6:vector})",
            "trigger": "phonglobe\tbsdf\n(vector; vector; float; float; vector; vector)"
        },
        {
            "contents": "phonglobe(${1:vector}, ${2:vector}, ${3:float}, ${4:float}, ${5:vector}, ${6:vector}, ${7:...})",
            "trigger": "phonglobe\tbsdf\n(vector; vector; float; float; vector; vector; ...)"
        },
        {
            "contents": "phonglobe(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "phonglobe\tbsdf\n(vector; vector; float)"
        },
        {
            "contents": "phonglobe(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "phonglobe\tbsdf\n(vector; vector; float; ...)"
        },
        {
            "contents": "photonmap(${1:string}, ${2:vector}, ${3:vector})",
            "trigger": "photonmap\tvector\n(string; vector; vector)"
        },
        {
            "contents": "photonmap(${1:string}, ${2:vector}, ${3:vector}, ${4:...})",
            "trigger": "photonmap\tvector\n(string; vector; vector; ...)"
        },
        {
            "contents": "photonmap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector &}, ${5:float &})",
            "trigger": "photonmap\tvoid\n(string; vector; vector; vector &; float &)"
        },
        {
            "contents": "photonmap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector &}, ${5:float &}, ${6:...})",
            "trigger": "photonmap\tvoid\n(string; vector; vector; vector &; float &; ...)"
        },
        {
            "contents": "planepointdistance(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector &})",
            "trigger": "planepointdistance\tfloat\n(vector; vector; vector; vector &)"
        },
        {
            "contents": "planesphereintersect(${1:vector}, ${2:vector}, ${3:vector}, ${4:float}, ${5:vector &}, ${6:float &}, ${7:float &})",
            "trigger": "planesphereintersect\tint\n(vector; vector; vector; float; vector &; float &; float &)"
        },
        {
            "contents": "pluralize(${1:string})",
            "trigger": "pluralize\tstring\n(string)"
        },
        {
            "contents": "pnoise(${1:float}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "pnoise\tfloat\n(float; float; int; int)"
        },
        {
            "contents": "pnoise(${1:float}, ${2:int})",
            "trigger": "pnoise\tfloat\n(float; int)"
        },
        {
            "contents": "pnoise(${1:vector4}, ${2:int}, ${3:int}, ${4:int}, ${5:int})",
            "trigger": "pnoise\tfloat\n(vector4; int; int; int; int)"
        },
        {
            "contents": "pnoise(${1:vector4}, ${2:vector4})",
            "trigger": "pnoise\tfloat\n(vector4; vector4)"
        },
        {
            "contents": "pnoise(${1:vector}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "pnoise\tfloat\n(vector; int; int; int)"
        },
        {
            "contents": "pnoise(${1:vector}, ${2:vector})",
            "trigger": "pnoise\tfloat\n(vector; vector)"
        },
        {
            "contents": "pnoise(${1:float}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "pnoise\tvector\n(float; float; int; int)"
        },
        {
            "contents": "pnoise(${1:float}, ${2:int})",
            "trigger": "pnoise\tvector\n(float; int)"
        },
        {
            "contents": "pnoise(${1:vector4}, ${2:int}, ${3:int}, ${4:int}, ${5:int})",
            "trigger": "pnoise\tvector\n(vector4; int; int; int; int)"
        },
        {
            "contents": "pnoise(${1:vector4}, ${2:vector4})",
            "trigger": "pnoise\tvector\n(vector4; vector4)"
        },
        {
            "contents": "pnoise(${1:vector}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "pnoise\tvector\n(vector; int; int; int)"
        },
        {
            "contents": "pnoise(${1:vector}, ${2:vector})",
            "trigger": "pnoise\tvector\n(vector; vector)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix2\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix2\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix3\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix3\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tfloat\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tfloat\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tint\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tint\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tvector4\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tvector4\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tstring\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tstring\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tvector2\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tvector2\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tvector\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tvector\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix2[]\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix2[]\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix3[]\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix3[]\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix[]\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tmatrix[]\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tfloat[]\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tfloat[]\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tint[]\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tint[]\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tvector4[]\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tvector4[]\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tstring[]\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tstring[]\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tvector2[]\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tvector2[]\n(string; string; int)"
        },
        {
            "contents": "point(${1:int}, ${2:string}, ${3:int})",
            "trigger": "point\tvector[]\n(int; string; int)"
        },
        {
            "contents": "point(${1:string}, ${2:string}, ${3:int})",
            "trigger": "point\tvector[]\n(string; string; int)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix2\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix2\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix3\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix3\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tfloat\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tfloat\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tint\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tint\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector4\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector4\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tstring\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tstring\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector2\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector2\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix2[]\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix2[]\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix3[]\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix3[]\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix[]\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tmatrix[]\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tfloat[]\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tfloat[]\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tint[]\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tint[]\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector4[]\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector4[]\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tstring[]\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tstring[]\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector2[]\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector2[]\n(string; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector[]\n(int; string; int; int &)"
        },
        {
            "contents": "pointattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "pointattrib\tvector[]\n(string; string; int; int &)"
        },
        {
            "contents": "pointattribsize(${1:int}, ${2:string})",
            "trigger": "pointattribsize\tint\n(int; string)"
        },
        {
            "contents": "pointattribsize(${1:string}, ${2:string})",
            "trigger": "pointattribsize\tint\n(string; string)"
        },
        {
            "contents": "pointattribtype(${1:int}, ${2:string})",
            "trigger": "pointattribtype\tint\n(int; string)"
        },
        {
            "contents": "pointattribtype(${1:string}, ${2:string})",
            "trigger": "pointattribtype\tint\n(string; string)"
        },
        {
            "contents": "pointattribtypeinfo(${1:int}, ${2:string})",
            "trigger": "pointattribtypeinfo\tstring\n(int; string)"
        },
        {
            "contents": "pointattribtypeinfo(${1:string}, ${2:string})",
            "trigger": "pointattribtypeinfo\tstring\n(string; string)"
        },
        {
            "contents": "pointedge(${1:int}, ${2:int}, ${3:int})",
            "trigger": "pointedge\tint\n(int; int; int)"
        },
        {
            "contents": "pointedge(${1:string}, ${2:int}, ${3:int})",
            "trigger": "pointedge\tint\n(string; int; int)"
        },
        {
            "contents": "pointhedge(${1:int}, ${2:int})",
            "trigger": "pointhedge\tint\n(int; int)"
        },
        {
            "contents": "pointhedge(${1:int}, ${2:int}, ${3:int})",
            "trigger": "pointhedge\tint\n(int; int; int)"
        },
        {
            "contents": "pointhedge(${1:string}, ${2:int})",
            "trigger": "pointhedge\tint\n(string; int)"
        },
        {
            "contents": "pointhedge(${1:string}, ${2:int}, ${3:int})",
            "trigger": "pointhedge\tint\n(string; int; int)"
        },
        {
            "contents": "pointhedgenext(${1:int}, ${2:int})",
            "trigger": "pointhedgenext\tint\n(int; int)"
        },
        {
            "contents": "pointhedgenext(${1:string}, ${2:int})",
            "trigger": "pointhedgenext\tint\n(string; int)"
        },
        {
            "contents": "pointprims(${1:int}, ${2:int})",
            "trigger": "pointprims\tint[]\n(int; int)"
        },
        {
            "contents": "pointprims(${1:string}, ${2:int})",
            "trigger": "pointprims\tint[]\n(string; int)"
        },
        {
            "contents": "pointvertex(${1:int}, ${2:int})",
            "trigger": "pointvertex\tint\n(int; int)"
        },
        {
            "contents": "pointvertex(${1:string}, ${2:int})",
            "trigger": "pointvertex\tint\n(string; int)"
        },
        {
            "contents": "pointvertices(${1:int}, ${2:int})",
            "trigger": "pointvertices\tint[]\n(int; int)"
        },
        {
            "contents": "pointvertices(${1:string}, ${2:int})",
            "trigger": "pointvertices\tint[]\n(string; int)"
        },
        {
            "contents": "polardecomp(${1:matrix3})",
            "trigger": "polardecomp\tmatrix3\n(matrix3)"
        },
        {
            "contents": "pop(${1:matrix2[] &})",
            "trigger": "pop\tmatrix2\n(matrix2[] &)"
        },
        {
            "contents": "pop(${1:matrix2[] &}, ${2:int})",
            "trigger": "pop\tmatrix2\n(matrix2[] &; int)"
        },
        {
            "contents": "pop(${1:matrix3[] &})",
            "trigger": "pop\tmatrix3\n(matrix3[] &)"
        },
        {
            "contents": "pop(${1:matrix3[] &}, ${2:int})",
            "trigger": "pop\tmatrix3\n(matrix3[] &; int)"
        },
        {
            "contents": "pop(${1:matrix[] &})",
            "trigger": "pop\tmatrix\n(matrix[] &)"
        },
        {
            "contents": "pop(${1:matrix[] &}, ${2:int})",
            "trigger": "pop\tmatrix\n(matrix[] &; int)"
        },
        {
            "contents": "pop(${1:bsdf[] &}, ${2:int})",
            "trigger": "pop\tbsdf\n(bsdf[] &; int)"
        },
        {
            "contents": "pop(${1:bsdf[] &})",
            "trigger": "pop\tbsdf\n(bsdf[] &)"
        },
        {
            "contents": "pop(${1:float[] &})",
            "trigger": "pop\tfloat\n(float[] &)"
        },
        {
            "contents": "pop(${1:float[] &}, ${2:int})",
            "trigger": "pop\tfloat\n(float[] &; int)"
        },
        {
            "contents": "pop(${1:int[] &})",
            "trigger": "pop\tint\n(int[] &)"
        },
        {
            "contents": "pop(${1:int[] &}, ${2:int})",
            "trigger": "pop\tint\n(int[] &; int)"
        },
        {
            "contents": "pop(${1:vector4[] &})",
            "trigger": "pop\tvector4\n(vector4[] &)"
        },
        {
            "contents": "pop(${1:vector4[] &}, ${2:int})",
            "trigger": "pop\tvector4\n(vector4[] &; int)"
        },
        {
            "contents": "pop(${1:string[] &})",
            "trigger": "pop\tstring\n(string[] &)"
        },
        {
            "contents": "pop(${1:string[] &}, ${2:int})",
            "trigger": "pop\tstring\n(string[] &; int)"
        },
        {
            "contents": "pop(${1:vector2[] &})",
            "trigger": "pop\tvector2\n(vector2[] &)"
        },
        {
            "contents": "pop(${1:vector2[] &}, ${2:int})",
            "trigger": "pop\tvector2\n(vector2[] &; int)"
        },
        {
            "contents": "pop(${1:vector[] &})",
            "trigger": "pop\tvector\n(vector[] &)"
        },
        {
            "contents": "pop(${1:vector[] &}, ${2:int})",
            "trigger": "pop\tvector\n(vector[] &; int)"
        },
        {
            "contents": "pow(${1:float}, ${2:float})",
            "trigger": "pow\tfloat\n(float; float)"
        },
        {
            "contents": "pow(${1:vector4}, ${2:float})",
            "trigger": "pow\tvector4\n(vector4; float)"
        },
        {
            "contents": "pow(${1:vector2}, ${2:float})",
            "trigger": "pow\tvector2\n(vector2; float)"
        },
        {
            "contents": "pow(${1:vector}, ${2:float})",
            "trigger": "pow\tvector\n(vector; float)"
        },
        {
            "contents": "predicate_incircle(${1:vector2}, ${2:vector2}, ${3:vector2}, ${4:vector2})",
            "trigger": "predicate_incircle\tfloat\n(vector2; vector2; vector2; vector2)"
        },
        {
            "contents": "predicate_insphere(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector})",
            "trigger": "predicate_insphere\tfloat\n(vector; vector; vector; vector; vector)"
        },
        {
            "contents": "predicate_orient2d(${1:vector2}, ${2:vector2}, ${3:vector2})",
            "trigger": "predicate_orient2d\tfloat\n(vector2; vector2; vector2)"
        },
        {
            "contents": "predicate_orient3d(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector})",
            "trigger": "predicate_orient3d\tfloat\n(vector; vector; vector; vector)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix2\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix2\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix3\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix3\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tfloat\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tfloat\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tint\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tint\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector4\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector4\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tstring\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tstring\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector2\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector2\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix2[]\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix2[]\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix3[]\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix3[]\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix[]\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tmatrix[]\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tfloat[]\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tfloat[]\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tint[]\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tint[]\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector4[]\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector4[]\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tstring[]\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tstring[]\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector2[]\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector2[]\n(string; string; int)"
        },
        {
            "contents": "prim(${1:int}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector[]\n(int; string; int)"
        },
        {
            "contents": "prim(${1:string}, ${2:string}, ${3:int})",
            "trigger": "prim\tvector[]\n(string; string; int)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:matrix2 &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint\n(string; matrix2 &; string; int; vector)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:matrix3 &}, ${3:string}, ${4:int}, ${5:float}, ${6:float})",
            "trigger": "prim_attribute\tint\n(string; matrix3 &; string; int; float; float)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:matrix3 &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint\n(string; matrix3 &; string; int; vector)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:matrix &}, ${3:string}, ${4:int}, ${5:float}, ${6:float})",
            "trigger": "prim_attribute\tint\n(string; matrix &; string; int; float; float)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:matrix &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint\n(string; matrix &; string; int; vector)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:float &}, ${3:string}, ${4:int}, ${5:float}, ${6:float})",
            "trigger": "prim_attribute\tint\n(string; float &; string; int; float; float)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:float &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint\n(string; float &; string; int; vector)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:int &}, ${3:string}, ${4:int}, ${5:float}, ${6:float})",
            "trigger": "prim_attribute\tint\n(string; int &; string; int; float; float)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:int &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint\n(string; int &; string; int; vector)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:vector4 &}, ${3:string}, ${4:int}, ${5:float}, ${6:float})",
            "trigger": "prim_attribute\tint\n(string; vector4 &; string; int; float; float)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:vector4 &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint\n(string; vector4 &; string; int; vector)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:vector2 &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint\n(string; vector2 &; string; int; vector)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:vector &}, ${3:string}, ${4:int}, ${5:float}, ${6:float})",
            "trigger": "prim_attribute\tint\n(string; vector &; string; int; float; float)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:vector &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint\n(string; vector &; string; int; vector)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:matrix2[] &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint\n(string; matrix2[] &; string; int; vector)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:matrix3[] &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint\n(string; matrix3[] &; string; int; vector)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:matrix[] &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint\n(string; matrix[] &; string; int; vector)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:float[] &}, ${3:string}, ${4:int}, ${5:float}, ${6:float})",
            "trigger": "prim_attribute\tint\n(string; float[] &; string; int; float; float)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:float[] &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint\n(string; float[] &; string; int; vector)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:int[] &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint\n(string; int[] &; string; int; vector)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:vector4[] &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint\n(string; vector4[] &; string; int; vector)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:vector2[] &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint\n(string; vector2[] &; string; int; vector)"
        },
        {
            "contents": "prim_attribute(${1:string}, ${2:vector[] &}, ${3:string}, ${4:int}, ${5:vector})",
            "trigger": "prim_attribute\tint\n(string; vector[] &; string; int; vector)"
        },
        {
            "contents": "prim_normal(${1:int}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "prim_normal\tvector\n(int; int; float; float)"
        },
        {
            "contents": "prim_normal(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:float})",
            "trigger": "prim_normal\tvector\n(int; int; float; float; float)"
        },
        {
            "contents": "prim_normal(${1:int}, ${2:int}, ${3:vector})",
            "trigger": "prim_normal\tvector\n(int; int; vector)"
        },
        {
            "contents": "prim_normal(${1:string}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "prim_normal\tvector\n(string; int; float; float)"
        },
        {
            "contents": "prim_normal(${1:string}, ${2:int}, ${3:float}, ${4:float}, ${5:float})",
            "trigger": "prim_normal\tvector\n(string; int; float; float; float)"
        },
        {
            "contents": "prim_normal(${1:string}, ${2:int}, ${3:vector})",
            "trigger": "prim_normal\tvector\n(string; int; vector)"
        },
        {
            "contents": "primarclen(${1:string}, ${2:vector2}, ${3:vector2}, ${4:int})",
            "trigger": "primarclen\tfloat\n(string; vector2; vector2; int)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix2\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix2\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix3\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix3\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tfloat\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tfloat\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tint\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tint\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector4\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector4\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tstring\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tstring\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector2\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector2\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix2[]\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix2[]\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix3[]\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix3[]\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix[]\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tmatrix[]\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tfloat[]\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tfloat[]\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tint[]\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tint[]\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector4[]\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector4[]\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tstring[]\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tstring[]\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector2[]\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector2[]\n(string; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector[]\n(int; string; int; int &)"
        },
        {
            "contents": "primattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "primattrib\tvector[]\n(string; string; int; int &)"
        },
        {
            "contents": "primattribsize(${1:int}, ${2:string})",
            "trigger": "primattribsize\tint\n(int; string)"
        },
        {
            "contents": "primattribsize(${1:string}, ${2:string})",
            "trigger": "primattribsize\tint\n(string; string)"
        },
        {
            "contents": "primattribtype(${1:int}, ${2:string})",
            "trigger": "primattribtype\tint\n(int; string)"
        },
        {
            "contents": "primattribtype(${1:string}, ${2:string})",
            "trigger": "primattribtype\tint\n(string; string)"
        },
        {
            "contents": "primattribtypeinfo(${1:int}, ${2:string})",
            "trigger": "primattribtypeinfo\tstring\n(int; string)"
        },
        {
            "contents": "primattribtypeinfo(${1:string}, ${2:string})",
            "trigger": "primattribtypeinfo\tstring\n(string; string)"
        },
        {
            "contents": "primduv(${1:string}, ${2:int}, ${3:vector2}, ${4:int}, ${5:int})",
            "trigger": "primduv\tvector\n(string; int; vector2; int; int)"
        },
        {
            "contents": "primfind(${1:int}, ${2:string}, ${3:vector}, ${4:vector})",
            "trigger": "primfind\tint[]\n(int; string; vector; vector)"
        },
        {
            "contents": "primfind(${1:int}, ${2:vector}, ${3:vector})",
            "trigger": "primfind\tint[]\n(int; vector; vector)"
        },
        {
            "contents": "primfind(${1:string}, ${2:string}, ${3:vector}, ${4:vector})",
            "trigger": "primfind\tint[]\n(string; string; vector; vector)"
        },
        {
            "contents": "primfind(${1:string}, ${2:vector}, ${3:vector})",
            "trigger": "primfind\tint[]\n(string; vector; vector)"
        },
        {
            "contents": "primhedge(${1:int}, ${2:int})",
            "trigger": "primhedge\tint\n(int; int)"
        },
        {
            "contents": "primhedge(${1:string}, ${2:int})",
            "trigger": "primhedge\tint\n(string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix2\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix2\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix3\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix3\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tfloat\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tfloat\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tint\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tint\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector4\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector4\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tstring\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tstring\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector2\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector2\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix2[]\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix2[]\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix3[]\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix3[]\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix[]\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tmatrix[]\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tfloat[]\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tfloat[]\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tint[]\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tint[]\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector4[]\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector4[]\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tstring[]\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tstring[]\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector2[]\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector2[]\n(string; string; int)"
        },
        {
            "contents": "primintrinsic(${1:int}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector[]\n(int; string; int)"
        },
        {
            "contents": "primintrinsic(${1:string}, ${2:string}, ${3:int})",
            "trigger": "primintrinsic\tvector[]\n(string; string; int)"
        },
        {
            "contents": "primpoint(${1:int}, ${2:int}, ${3:int})",
            "trigger": "primpoint\tint\n(int; int; int)"
        },
        {
            "contents": "primpoint(${1:string}, ${2:int}, ${3:int})",
            "trigger": "primpoint\tint\n(string; int; int)"
        },
        {
            "contents": "primpoints(${1:int}, ${2:int})",
            "trigger": "primpoints\tint[]\n(int; int)"
        },
        {
            "contents": "primpoints(${1:string}, ${2:int})",
            "trigger": "primpoints\tint[]\n(string; int)"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix2\n(int; string; int; vector)"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix2\n(string; string; int; vector)"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix3\n(int; string; int; vector)"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix3\n(string; string; int; vector)"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix\n(int; string; int; vector)"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix\n(string; string; int; vector)"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tfloat\n(int; string; int; vector)"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tfloat\n(string; string; int; vector)"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tint\n(int; string; int; vector)"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tint\n(string; string; int; vector)"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector4\n(int; string; int; vector)"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector4\n(string; string; int; vector)"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector2\n(int; string; int; vector)"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector2\n(string; string; int; vector)"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector\n(int; string; int; vector)"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector\n(string; string; int; vector)"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix2[]\n(int; string; int; vector)"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix2[]\n(string; string; int; vector)"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix3[]\n(int; string; int; vector)"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix3[]\n(string; string; int; vector)"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix[]\n(int; string; int; vector)"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tmatrix[]\n(string; string; int; vector)"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tfloat[]\n(int; string; int; vector)"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tfloat[]\n(string; string; int; vector)"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tint[]\n(int; string; int; vector)"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tint[]\n(string; string; int; vector)"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector4[]\n(int; string; int; vector)"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector4[]\n(string; string; int; vector)"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector2[]\n(int; string; int; vector)"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector2[]\n(string; string; int; vector)"
        },
        {
            "contents": "primuv(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector[]\n(int; string; int; vector)"
        },
        {
            "contents": "primuv(${1:string}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "primuv\tvector[]\n(string; string; int; vector)"
        },
        {
            "contents": "primuvconvert(${1:string}, ${2:vector2}, ${3:int}, ${4:int})",
            "trigger": "primuvconvert\tvector2\n(string; vector2; int; int)"
        },
        {
            "contents": "primvertex(${1:int}, ${2:int}, ${3:int})",
            "trigger": "primvertex\tint\n(int; int; int)"
        },
        {
            "contents": "primvertex(${1:string}, ${2:int}, ${3:int})",
            "trigger": "primvertex\tint\n(string; int; int)"
        },
        {
            "contents": "primvertexcount(${1:int}, ${2:int})",
            "trigger": "primvertexcount\tint\n(int; int)"
        },
        {
            "contents": "primvertexcount(${1:string}, ${2:int})",
            "trigger": "primvertexcount\tint\n(string; int)"
        },
        {
            "contents": "primvertices(${1:int}, ${2:int})",
            "trigger": "primvertices\tint[]\n(int; int)"
        },
        {
            "contents": "primvertices(${1:string}, ${2:int})",
            "trigger": "primvertices\tint[]\n(string; int)"
        },
        {
            "contents": "print_once(${1:string})",
            "trigger": "print_once\tvoid\n(string)"
        },
        {
            "contents": "print_once(${1:string}, ${2:...})",
            "trigger": "print_once\tvoid\n(string; ...)"
        },
        {
            "contents": "printf(${1:string})",
            "trigger": "printf\tvoid\n(string)"
        },
        {
            "contents": "printf(${1:string}, ${2:...})",
            "trigger": "printf\tvoid\n(string; ...)"
        },
        {
            "contents": "product(${1:float})",
            "trigger": "product\tfloat\n(float)"
        },
        {
            "contents": "product(${1:vector4})",
            "trigger": "product\tfloat\n(vector4)"
        },
        {
            "contents": "product(${1:vector2})",
            "trigger": "product\tfloat\n(vector2)"
        },
        {
            "contents": "product(${1:vector})",
            "trigger": "product\tfloat\n(vector)"
        },
        {
            "contents": "product(${1:float[]})",
            "trigger": "product\tfloat\n(float[])"
        },
        {
            "contents": "product(${1:int})",
            "trigger": "product\tint\n(int)"
        },
        {
            "contents": "product(${1:int[]})",
            "trigger": "product\tint\n(int[])"
        },
        {
            "contents": "product(${1:vector4[]})",
            "trigger": "product\tvector4\n(vector4[])"
        },
        {
            "contents": "product(${1:vector2[]})",
            "trigger": "product\tvector2\n(vector2[])"
        },
        {
            "contents": "product(${1:vector[]})",
            "trigger": "product\tvector\n(vector[])"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "ptexture\tmatrix3\n(string; int; float; float)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "ptexture\tmatrix3\n(string; int; float; float; ...)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "ptexture\tmatrix\n(string; int; float; float)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "ptexture\tmatrix\n(string; int; float; float; ...)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "ptexture\tfloat\n(string; int; float; float)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "ptexture\tfloat\n(string; int; float; float; ...)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "ptexture\tvector4\n(string; int; float; float)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "ptexture\tvector4\n(string; int; float; float; ...)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "ptexture\tvector\n(string; int; float; float)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "ptexture\tvector\n(string; int; float; float; ...)"
        },
        {
            "contents": "ptlined(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "ptlined\tfloat\n(vector; vector; vector)"
        },
        {
            "contents": "ptransform(${1:vector4}, ${2:matrix})",
            "trigger": "ptransform\tvector4\n(vector4; matrix)"
        },
        {
            "contents": "ptransform(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "ptransform\tvector\n(string; string; vector)"
        },
        {
            "contents": "ptransform(${1:string}, ${2:vector})",
            "trigger": "ptransform\tvector\n(string; vector)"
        },
        {
            "contents": "ptransform(${1:vector}, ${2:matrix})",
            "trigger": "ptransform\tvector\n(vector; matrix)"
        },
        {
            "contents": "push(${1:matrix2[] &}, ${2:matrix2})",
            "trigger": "push\tvoid\n(matrix2[] &; matrix2)"
        },
        {
            "contents": "push(${1:matrix2[] &}, ${2:matrix2[]})",
            "trigger": "push\tvoid\n(matrix2[] &; matrix2[])"
        },
        {
            "contents": "push(${1:matrix3[] &}, ${2:matrix3})",
            "trigger": "push\tvoid\n(matrix3[] &; matrix3)"
        },
        {
            "contents": "push(${1:matrix3[] &}, ${2:matrix3[]})",
            "trigger": "push\tvoid\n(matrix3[] &; matrix3[])"
        },
        {
            "contents": "push(${1:matrix[] &}, ${2:matrix})",
            "trigger": "push\tvoid\n(matrix[] &; matrix)"
        },
        {
            "contents": "push(${1:matrix[] &}, ${2:matrix[]})",
            "trigger": "push\tvoid\n(matrix[] &; matrix[])"
        },
        {
            "contents": "push(${1:bsdf[] &}, ${2:bsdf})",
            "trigger": "push\tvoid\n(bsdf[] &; bsdf)"
        },
        {
            "contents": "push(${1:bsdf[] &}, ${2:bsdf[]})",
            "trigger": "push\tvoid\n(bsdf[] &; bsdf[])"
        },
        {
            "contents": "push(${1:float[] &}, ${2:float})",
            "trigger": "push\tvoid\n(float[] &; float)"
        },
        {
            "contents": "push(${1:float[] &}, ${2:float[]})",
            "trigger": "push\tvoid\n(float[] &; float[])"
        },
        {
            "contents": "push(${1:int[] &}, ${2:int})",
            "trigger": "push\tvoid\n(int[] &; int)"
        },
        {
            "contents": "push(${1:int[] &}, ${2:int[]})",
            "trigger": "push\tvoid\n(int[] &; int[])"
        },
        {
            "contents": "push(${1:vector4[] &}, ${2:vector4})",
            "trigger": "push\tvoid\n(vector4[] &; vector4)"
        },
        {
            "contents": "push(${1:vector4[] &}, ${2:vector4[]})",
            "trigger": "push\tvoid\n(vector4[] &; vector4[])"
        },
        {
            "contents": "push(${1:string[] &}, ${2:string})",
            "trigger": "push\tvoid\n(string[] &; string)"
        },
        {
            "contents": "push(${1:string[] &}, ${2:string[]})",
            "trigger": "push\tvoid\n(string[] &; string[])"
        },
        {
            "contents": "push(${1:vector2[] &}, ${2:vector2})",
            "trigger": "push\tvoid\n(vector2[] &; vector2)"
        },
        {
            "contents": "push(${1:vector2[] &}, ${2:vector2[]})",
            "trigger": "push\tvoid\n(vector2[] &; vector2[])"
        },
        {
            "contents": "push(${1:vector[] &}, ${2:vector})",
            "trigger": "push\tvoid\n(vector[] &; vector)"
        },
        {
            "contents": "push(${1:vector[] &}, ${2:vector[]})",
            "trigger": "push\tvoid\n(vector[] &; vector[])"
        },
        {
            "contents": "qconvert(${1:vector4})",
            "trigger": "qconvert\tmatrix3\n(vector4)"
        },
        {
            "contents": "qconvert(${1:vector4})",
            "trigger": "qconvert\tvector\n(vector4)"
        },
        {
            "contents": "qdistance(${1:vector4}, ${2:vector4})",
            "trigger": "qdistance\tfloat\n(vector4; vector4)"
        },
        {
            "contents": "qinvert(${1:vector4})",
            "trigger": "qinvert\tvector4\n(vector4)"
        },
        {
            "contents": "qmultiply(${1:vector4}, ${2:vector4})",
            "trigger": "qmultiply\tvector4\n(vector4; vector4)"
        },
        {
            "contents": "qrotate(${1:vector4}, ${2:vector})",
            "trigger": "qrotate\tvector\n(vector4; vector)"
        },
        {
            "contents": "quaternion(${1:matrix3})",
            "trigger": "quaternion\tvector4\n(matrix3)"
        },
        {
            "contents": "quaternion(${1:float}, ${2:vector})",
            "trigger": "quaternion\tvector4\n(float; vector)"
        },
        {
            "contents": "quaternion(${1:vector})",
            "trigger": "quaternion\tvector4\n(vector)"
        },
        {
            "contents": "radians(${1:float})",
            "trigger": "radians\tfloat\n(float)"
        },
        {
            "contents": "radians(${1:vector4})",
            "trigger": "radians\tvector4\n(vector4)"
        },
        {
            "contents": "radians(${1:vector2})",
            "trigger": "radians\tvector2\n(vector2)"
        },
        {
            "contents": "radians(${1:vector})",
            "trigger": "radians\tvector\n(vector)"
        },
        {
            "contents": "rand(${1:float})",
            "trigger": "rand\tfloat\n(float)"
        },
        {
            "contents": "rand(${1:float}, ${2:float})",
            "trigger": "rand\tfloat\n(float; float)"
        },
        {
            "contents": "rand(${1:vector4})",
            "trigger": "rand\tfloat\n(vector4)"
        },
        {
            "contents": "rand(${1:vector2})",
            "trigger": "rand\tfloat\n(vector2)"
        },
        {
            "contents": "rand(${1:vector})",
            "trigger": "rand\tfloat\n(vector)"
        },
        {
            "contents": "rand(${1:float})",
            "trigger": "rand\tvector4\n(float)"
        },
        {
            "contents": "rand(${1:float}, ${2:float})",
            "trigger": "rand\tvector4\n(float; float)"
        },
        {
            "contents": "rand(${1:vector4})",
            "trigger": "rand\tvector4\n(vector4)"
        },
        {
            "contents": "rand(${1:vector2})",
            "trigger": "rand\tvector4\n(vector2)"
        },
        {
            "contents": "rand(${1:vector})",
            "trigger": "rand\tvector4\n(vector)"
        },
        {
            "contents": "rand(${1:float})",
            "trigger": "rand\tvector2\n(float)"
        },
        {
            "contents": "rand(${1:float}, ${2:float})",
            "trigger": "rand\tvector2\n(float; float)"
        },
        {
            "contents": "rand(${1:vector4})",
            "trigger": "rand\tvector2\n(vector4)"
        },
        {
            "contents": "rand(${1:vector2})",
            "trigger": "rand\tvector2\n(vector2)"
        },
        {
            "contents": "rand(${1:vector})",
            "trigger": "rand\tvector2\n(vector)"
        },
        {
            "contents": "rand(${1:float})",
            "trigger": "rand\tvector\n(float)"
        },
        {
            "contents": "rand(${1:float}, ${2:float})",
            "trigger": "rand\tvector\n(float; float)"
        },
        {
            "contents": "rand(${1:vector4})",
            "trigger": "rand\tvector\n(vector4)"
        },
        {
            "contents": "rand(${1:vector2})",
            "trigger": "rand\tvector\n(vector2)"
        },
        {
            "contents": "rand(${1:vector})",
            "trigger": "rand\tvector\n(vector)"
        },
        {
            "contents": "random(${1:float})",
            "trigger": "random\tfloat\n(float)"
        },
        {
            "contents": "random(${1:float}, ${2:float})",
            "trigger": "random\tfloat\n(float; float)"
        },
        {
            "contents": "random(${1:int})",
            "trigger": "random\tfloat\n(int)"
        },
        {
            "contents": "random(${1:int}, ${2:int})",
            "trigger": "random\tfloat\n(int; int)"
        },
        {
            "contents": "random(${1:vector4})",
            "trigger": "random\tfloat\n(vector4)"
        },
        {
            "contents": "random(${1:vector})",
            "trigger": "random\tfloat\n(vector)"
        },
        {
            "contents": "random(${1:float})",
            "trigger": "random\tvector4\n(float)"
        },
        {
            "contents": "random(${1:float}, ${2:float})",
            "trigger": "random\tvector4\n(float; float)"
        },
        {
            "contents": "random(${1:int})",
            "trigger": "random\tvector4\n(int)"
        },
        {
            "contents": "random(${1:int}, ${2:int})",
            "trigger": "random\tvector4\n(int; int)"
        },
        {
            "contents": "random(${1:vector4})",
            "trigger": "random\tvector4\n(vector4)"
        },
        {
            "contents": "random(${1:vector})",
            "trigger": "random\tvector4\n(vector)"
        },
        {
            "contents": "random(${1:int})",
            "trigger": "random\tvector2\n(int)"
        },
        {
            "contents": "random(${1:float})",
            "trigger": "random\tvector\n(float)"
        },
        {
            "contents": "random(${1:float}, ${2:float})",
            "trigger": "random\tvector\n(float; float)"
        },
        {
            "contents": "random(${1:int})",
            "trigger": "random\tvector\n(int)"
        },
        {
            "contents": "random(${1:int}, ${2:int})",
            "trigger": "random\tvector\n(int; int)"
        },
        {
            "contents": "random(${1:vector4})",
            "trigger": "random\tvector\n(vector4)"
        },
        {
            "contents": "random(${1:vector})",
            "trigger": "random\tvector\n(vector)"
        },
        {
            "contents": "random_fhash(${1:float})",
            "trigger": "random_fhash\tint\n(float)"
        },
        {
            "contents": "random_fhash(${1:float}, ${2:float})",
            "trigger": "random_fhash\tint\n(float; float)"
        },
        {
            "contents": "random_fhash(${1:vector4})",
            "trigger": "random_fhash\tint\n(vector4)"
        },
        {
            "contents": "random_fhash(${1:vector2})",
            "trigger": "random_fhash\tint\n(vector2)"
        },
        {
            "contents": "random_fhash(${1:vector})",
            "trigger": "random_fhash\tint\n(vector)"
        },
        {
            "contents": "random_ihash(${1:int})",
            "trigger": "random_ihash\tint\n(int)"
        },
        {
            "contents": "random_shash(${1:string})",
            "trigger": "random_shash\tint\n(string)"
        },
        {
            "contents": "random_sobol(${1:float}, ${2:int})",
            "trigger": "random_sobol\tfloat\n(float; int)"
        },
        {
            "contents": "random_sobol(${1:int}, ${2:int})",
            "trigger": "random_sobol\tfloat\n(int; int)"
        },
        {
            "contents": "random_sobol(${1:vector4}, ${2:int})",
            "trigger": "random_sobol\tfloat\n(vector4; int)"
        },
        {
            "contents": "random_sobol(${1:vector}, ${2:int})",
            "trigger": "random_sobol\tfloat\n(vector; int)"
        },
        {
            "contents": "random_sobol(${1:float}, ${2:int})",
            "trigger": "random_sobol\tvector4\n(float; int)"
        },
        {
            "contents": "random_sobol(${1:int}, ${2:int})",
            "trigger": "random_sobol\tvector4\n(int; int)"
        },
        {
            "contents": "random_sobol(${1:vector4}, ${2:int})",
            "trigger": "random_sobol\tvector4\n(vector4; int)"
        },
        {
            "contents": "random_sobol(${1:vector}, ${2:int})",
            "trigger": "random_sobol\tvector4\n(vector; int)"
        },
        {
            "contents": "random_sobol(${1:float}, ${2:int})",
            "trigger": "random_sobol\tvector\n(float; int)"
        },
        {
            "contents": "random_sobol(${1:int}, ${2:int})",
            "trigger": "random_sobol\tvector\n(int; int)"
        },
        {
            "contents": "random_sobol(${1:vector4}, ${2:int})",
            "trigger": "random_sobol\tvector\n(vector4; int)"
        },
        {
            "contents": "random_sobol(${1:vector}, ${2:int})",
            "trigger": "random_sobol\tvector\n(vector; int)"
        },
        {
            "contents": "rawbumpmap(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "rawbumpmap\tvoid\n(string; float &; float &; float; float)"
        },
        {
            "contents": "rawbumpmap(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "rawbumpmap\tvoid\n(string; float &; float &; vector)"
        },
        {
            "contents": "rawbumpmapA(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "rawbumpmapA\tvoid\n(string; float &; float &; float; float)"
        },
        {
            "contents": "rawbumpmapA(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "rawbumpmapA\tvoid\n(string; float &; float &; vector)"
        },
        {
            "contents": "rawbumpmapB(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "rawbumpmapB\tvoid\n(string; float &; float &; float; float)"
        },
        {
            "contents": "rawbumpmapB(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "rawbumpmapB\tvoid\n(string; float &; float &; vector)"
        },
        {
            "contents": "rawbumpmapG(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "rawbumpmapG\tvoid\n(string; float &; float &; float; float)"
        },
        {
            "contents": "rawbumpmapG(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "rawbumpmapG\tvoid\n(string; float &; float &; vector)"
        },
        {
            "contents": "rawbumpmapL(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "rawbumpmapL\tvoid\n(string; float &; float &; float; float)"
        },
        {
            "contents": "rawbumpmapL(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "rawbumpmapL\tvoid\n(string; float &; float &; vector)"
        },
        {
            "contents": "rawbumpmapR(${1:string}, ${2:float &}, ${3:float &}, ${4:float}, ${5:float})",
            "trigger": "rawbumpmapR\tvoid\n(string; float &; float &; float; float)"
        },
        {
            "contents": "rawbumpmapR(${1:string}, ${2:float &}, ${3:float &}, ${4:vector})",
            "trigger": "rawbumpmapR\tvoid\n(string; float &; float &; vector)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:float}, ${3:float})",
            "trigger": "rawcolormap\tvector4\n(string; float; float)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "rawcolormap\tvector4\n(string; float; float; ...)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:int})",
            "trigger": "rawcolormap\tvector4\n(string; float; float; float; float; float; float; float; float; int)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:int}, ${11:...})",
            "trigger": "rawcolormap\tvector4\n(string; float; float; float; float; float; float; float; float; int; ...)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector})",
            "trigger": "rawcolormap\tvector4\n(string; vector)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:...})",
            "trigger": "rawcolormap\tvector4\n(string; vector; ...)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:int})",
            "trigger": "rawcolormap\tvector4\n(string; vector; vector; vector; int)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:int}, ${6:...})",
            "trigger": "rawcolormap\tvector4\n(string; vector; vector; vector; int; ...)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector})",
            "trigger": "rawcolormap\tvector4\n(string; vector; vector; vector; vector)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:...})",
            "trigger": "rawcolormap\tvector4\n(string; vector; vector; vector; vector; ...)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:int})",
            "trigger": "rawcolormap\tvector4\n(string; vector; vector; vector; vector; int)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:int}, ${7:...})",
            "trigger": "rawcolormap\tvector4\n(string; vector; vector; vector; vector; int; ...)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:float}, ${3:float})",
            "trigger": "rawcolormap\tvector\n(string; float; float)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "rawcolormap\tvector\n(string; float; float; ...)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:int})",
            "trigger": "rawcolormap\tvector\n(string; float; float; float; float; float; float; float; float; int)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:int}, ${11:...})",
            "trigger": "rawcolormap\tvector\n(string; float; float; float; float; float; float; float; float; int; ...)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector})",
            "trigger": "rawcolormap\tvector\n(string; vector)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:...})",
            "trigger": "rawcolormap\tvector\n(string; vector; ...)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:int})",
            "trigger": "rawcolormap\tvector\n(string; vector; vector; vector; int)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:int}, ${6:...})",
            "trigger": "rawcolormap\tvector\n(string; vector; vector; vector; int; ...)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector})",
            "trigger": "rawcolormap\tvector\n(string; vector; vector; vector; vector)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:...})",
            "trigger": "rawcolormap\tvector\n(string; vector; vector; vector; vector; ...)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:int})",
            "trigger": "rawcolormap\tvector\n(string; vector; vector; vector; vector; int)"
        },
        {
            "contents": "rawcolormap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:int}, ${7:...})",
            "trigger": "rawcolormap\tvector\n(string; vector; vector; vector; vector; int; ...)"
        },
        {
            "contents": "re_find(${1:string}, ${2:string})",
            "trigger": "re_find\tint\n(string; string)"
        },
        {
            "contents": "re_find(${1:string}, ${2:string}, ${3:int})",
            "trigger": "re_find\tint\n(string; string; int)"
        },
        {
            "contents": "re_find(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "re_find\tint\n(string; string; int; int)"
        },
        {
            "contents": "re_find(${1:int[] &}, ${2:int[] &}, ${3:string}, ${4:string})",
            "trigger": "re_find\tint\n(int[] &; int[] &; string; string)"
        },
        {
            "contents": "re_find(${1:int[] &}, ${2:int[] &}, ${3:string}, ${4:string}, ${5:int})",
            "trigger": "re_find\tint\n(int[] &; int[] &; string; string; int)"
        },
        {
            "contents": "re_find(${1:int[] &}, ${2:int[] &}, ${3:string}, ${4:string}, ${5:int}, ${6:int})",
            "trigger": "re_find\tint\n(int[] &; int[] &; string; string; int; int)"
        },
        {
            "contents": "re_find(${1:string}, ${2:string})",
            "trigger": "re_find\tstring\n(string; string)"
        },
        {
            "contents": "re_find(${1:string}, ${2:string}, ${3:int})",
            "trigger": "re_find\tstring\n(string; string; int)"
        },
        {
            "contents": "re_find(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "re_find\tstring\n(string; string; int; int)"
        },
        {
            "contents": "re_find(${1:string}, ${2:string})",
            "trigger": "re_find\tstring[]\n(string; string)"
        },
        {
            "contents": "re_find(${1:string}, ${2:string}, ${3:int})",
            "trigger": "re_find\tstring[]\n(string; string; int)"
        },
        {
            "contents": "re_find(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "re_find\tstring[]\n(string; string; int; int)"
        },
        {
            "contents": "re_findall(${1:string}, ${2:string})",
            "trigger": "re_findall\tstring[]\n(string; string)"
        },
        {
            "contents": "re_findall(${1:string}, ${2:string}, ${3:int})",
            "trigger": "re_findall\tstring[]\n(string; string; int)"
        },
        {
            "contents": "re_findall(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "re_findall\tstring[]\n(string; string; int; int)"
        },
        {
            "contents": "re_match(${1:string}, ${2:string})",
            "trigger": "re_match\tint\n(string; string)"
        },
        {
            "contents": "re_replace(${1:string}, ${2:string}, ${3:string})",
            "trigger": "re_replace\tstring\n(string; string; string)"
        },
        {
            "contents": "re_replace(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "re_replace\tstring\n(string; string; string; int)"
        },
        {
            "contents": "re_split(${1:string}, ${2:string})",
            "trigger": "re_split\tstring[]\n(string; string)"
        },
        {
            "contents": "re_split(${1:string}, ${2:string}, ${3:int})",
            "trigger": "re_split\tstring[]\n(string; string; int)"
        },
        {
            "contents": "reflect(${1:vector}, ${2:vector})",
            "trigger": "reflect\tvector\n(vector; vector)"
        },
        {
            "contents": "refract(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "refract\tvector\n(vector; vector; float)"
        },
        {
            "contents": "relativepath(${1:string}, ${2:string})",
            "trigger": "relativepath\tstring\n(string; string)"
        },
        {
            "contents": "relbbox(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "relbbox\tvector\n(int; string; vector)"
        },
        {
            "contents": "relbbox(${1:int}, ${2:vector})",
            "trigger": "relbbox\tvector\n(int; vector)"
        },
        {
            "contents": "relbbox(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "relbbox\tvector\n(string; string; vector)"
        },
        {
            "contents": "relbbox(${1:string}, ${2:vector})",
            "trigger": "relbbox\tvector\n(string; vector)"
        },
        {
            "contents": "relbbox(${1:vector})",
            "trigger": "relbbox\tvector\n(vector)"
        },
        {
            "contents": "relpointbbox(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "relpointbbox\tvector\n(int; string; vector)"
        },
        {
            "contents": "relpointbbox(${1:int}, ${2:vector})",
            "trigger": "relpointbbox\tvector\n(int; vector)"
        },
        {
            "contents": "relpointbbox(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "relpointbbox\tvector\n(string; string; vector)"
        },
        {
            "contents": "relpointbbox(${1:string}, ${2:vector})",
            "trigger": "relpointbbox\tvector\n(string; vector)"
        },
        {
            "contents": "removeindex(${1:matrix2[] &}, ${2:int})",
            "trigger": "removeindex\tmatrix2\n(matrix2[] &; int)"
        },
        {
            "contents": "removeindex(${1:matrix3[] &}, ${2:int})",
            "trigger": "removeindex\tmatrix3\n(matrix3[] &; int)"
        },
        {
            "contents": "removeindex(${1:matrix[] &}, ${2:int})",
            "trigger": "removeindex\tmatrix\n(matrix[] &; int)"
        },
        {
            "contents": "removeindex(${1:float[] &}, ${2:int})",
            "trigger": "removeindex\tfloat\n(float[] &; int)"
        },
        {
            "contents": "removeindex(${1:int[] &}, ${2:int})",
            "trigger": "removeindex\tint\n(int[] &; int)"
        },
        {
            "contents": "removeindex(${1:vector4[] &}, ${2:int})",
            "trigger": "removeindex\tvector4\n(vector4[] &; int)"
        },
        {
            "contents": "removeindex(${1:string[] &}, ${2:int})",
            "trigger": "removeindex\tstring\n(string[] &; int)"
        },
        {
            "contents": "removeindex(${1:vector2[] &}, ${2:int})",
            "trigger": "removeindex\tvector2\n(vector2[] &; int)"
        },
        {
            "contents": "removeindex(${1:vector[] &}, ${2:int})",
            "trigger": "removeindex\tvector\n(vector[] &; int)"
        },
        {
            "contents": "removepoint(${1:int}, ${2:int})",
            "trigger": "removepoint\tint\n(int; int)"
        },
        {
            "contents": "removeprim(${1:int}, ${2:int}, ${3:int})",
            "trigger": "removeprim\tint\n(int; int; int)"
        },
        {
            "contents": "removevalue(${1:matrix2[] &}, ${2:matrix2})",
            "trigger": "removevalue\tint\n(matrix2[] &; matrix2)"
        },
        {
            "contents": "removevalue(${1:matrix3[] &}, ${2:matrix3})",
            "trigger": "removevalue\tint\n(matrix3[] &; matrix3)"
        },
        {
            "contents": "removevalue(${1:matrix[] &}, ${2:matrix})",
            "trigger": "removevalue\tint\n(matrix[] &; matrix)"
        },
        {
            "contents": "removevalue(${1:float[] &}, ${2:float})",
            "trigger": "removevalue\tint\n(float[] &; float)"
        },
        {
            "contents": "removevalue(${1:int[] &}, ${2:int})",
            "trigger": "removevalue\tint\n(int[] &; int)"
        },
        {
            "contents": "removevalue(${1:vector4[] &}, ${2:vector4})",
            "trigger": "removevalue\tint\n(vector4[] &; vector4)"
        },
        {
            "contents": "removevalue(${1:string[] &}, ${2:string})",
            "trigger": "removevalue\tint\n(string[] &; string)"
        },
        {
            "contents": "removevalue(${1:vector2[] &}, ${2:vector2})",
            "trigger": "removevalue\tint\n(vector2[] &; vector2)"
        },
        {
            "contents": "removevalue(${1:vector[] &}, ${2:vector})",
            "trigger": "removevalue\tint\n(vector[] &; vector)"
        },
        {
            "contents": "reorder(${1:string}, ${2:int[]})",
            "trigger": "reorder\tstring\n(string; int[])"
        },
        {
            "contents": "reorder(${1:matrix2[]}, ${2:int[]})",
            "trigger": "reorder\tmatrix2[]\n(matrix2[]; int[])"
        },
        {
            "contents": "reorder(${1:matrix3[]}, ${2:int[]})",
            "trigger": "reorder\tmatrix3[]\n(matrix3[]; int[])"
        },
        {
            "contents": "reorder(${1:matrix[]}, ${2:int[]})",
            "trigger": "reorder\tmatrix[]\n(matrix[]; int[])"
        },
        {
            "contents": "reorder(${1:float[]}, ${2:int[]})",
            "trigger": "reorder\tfloat[]\n(float[]; int[])"
        },
        {
            "contents": "reorder(${1:int[]}, ${2:int[]})",
            "trigger": "reorder\tint[]\n(int[]; int[])"
        },
        {
            "contents": "reorder(${1:vector4[]}, ${2:int[]})",
            "trigger": "reorder\tvector4[]\n(vector4[]; int[])"
        },
        {
            "contents": "reorder(${1:string[]}, ${2:int[]})",
            "trigger": "reorder\tstring[]\n(string[]; int[])"
        },
        {
            "contents": "reorder(${1:vector2[]}, ${2:int[]})",
            "trigger": "reorder\tvector2[]\n(vector2[]; int[])"
        },
        {
            "contents": "reorder(${1:vector[]}, ${2:int[]})",
            "trigger": "reorder\tvector[]\n(vector[]; int[])"
        },
        {
            "contents": "resample_linear(${1:float[]}, ${2:int})",
            "trigger": "resample_linear\tfloat[]\n(float[]; int)"
        },
        {
            "contents": "resample_linear(${1:vector4[]}, ${2:int})",
            "trigger": "resample_linear\tvector4[]\n(vector4[]; int)"
        },
        {
            "contents": "resample_linear(${1:vector2[]}, ${2:int})",
            "trigger": "resample_linear\tvector2[]\n(vector2[]; int)"
        },
        {
            "contents": "resample_linear(${1:vector[]}, ${2:int})",
            "trigger": "resample_linear\tvector[]\n(vector[]; int)"
        },
        {
            "contents": "resize(${1:matrix2[] &}, ${2:int})",
            "trigger": "resize\tvoid\n(matrix2[] &; int)"
        },
        {
            "contents": "resize(${1:matrix3[] &}, ${2:int})",
            "trigger": "resize\tvoid\n(matrix3[] &; int)"
        },
        {
            "contents": "resize(${1:matrix[] &}, ${2:int})",
            "trigger": "resize\tvoid\n(matrix[] &; int)"
        },
        {
            "contents": "resize(${1:bsdf[] &}, ${2:int})",
            "trigger": "resize\tvoid\n(bsdf[] &; int)"
        },
        {
            "contents": "resize(${1:float[] &}, ${2:int})",
            "trigger": "resize\tvoid\n(float[] &; int)"
        },
        {
            "contents": "resize(${1:int[] &}, ${2:int})",
            "trigger": "resize\tvoid\n(int[] &; int)"
        },
        {
            "contents": "resize(${1:vector4[] &}, ${2:int})",
            "trigger": "resize\tvoid\n(vector4[] &; int)"
        },
        {
            "contents": "resize(${1:string[] &}, ${2:int})",
            "trigger": "resize\tvoid\n(string[] &; int)"
        },
        {
            "contents": "resize(${1:vector2[] &}, ${2:int})",
            "trigger": "resize\tvoid\n(vector2[] &; int)"
        },
        {
            "contents": "resize(${1:vector[] &}, ${2:int})",
            "trigger": "resize\tvoid\n(vector[] &; int)"
        },
        {
            "contents": "reverse(${1:string})",
            "trigger": "reverse\tstring\n(string)"
        },
        {
            "contents": "reverse(${1:matrix2[]})",
            "trigger": "reverse\tmatrix2[]\n(matrix2[])"
        },
        {
            "contents": "reverse(${1:matrix3[]})",
            "trigger": "reverse\tmatrix3[]\n(matrix3[])"
        },
        {
            "contents": "reverse(${1:matrix[]})",
            "trigger": "reverse\tmatrix[]\n(matrix[])"
        },
        {
            "contents": "reverse(${1:float[]})",
            "trigger": "reverse\tfloat[]\n(float[])"
        },
        {
            "contents": "reverse(${1:int[]})",
            "trigger": "reverse\tint[]\n(int[])"
        },
        {
            "contents": "reverse(${1:vector4[]})",
            "trigger": "reverse\tvector4[]\n(vector4[])"
        },
        {
            "contents": "reverse(${1:string[]})",
            "trigger": "reverse\tstring[]\n(string[])"
        },
        {
            "contents": "reverse(${1:vector2[]})",
            "trigger": "reverse\tvector2[]\n(vector2[])"
        },
        {
            "contents": "reverse(${1:vector[]})",
            "trigger": "reverse\tvector[]\n(vector[])"
        },
        {
            "contents": "rgbtohsv(${1:float}, ${2:float}, ${3:float})",
            "trigger": "rgbtohsv\tvector\n(float; float; float)"
        },
        {
            "contents": "rgbtohsv(${1:vector})",
            "trigger": "rgbtohsv\tvector\n(vector)"
        },
        {
            "contents": "rgbtoxyz(${1:vector})",
            "trigger": "rgbtoxyz\tvector\n(vector)"
        },
        {
            "contents": "rint(${1:float})",
            "trigger": "rint\tfloat\n(float)"
        },
        {
            "contents": "rint(${1:vector4})",
            "trigger": "rint\tvector4\n(vector4)"
        },
        {
            "contents": "rint(${1:vector2})",
            "trigger": "rint\tvector2\n(vector2)"
        },
        {
            "contents": "rint(${1:vector})",
            "trigger": "rint\tvector\n(vector)"
        },
        {
            "contents": "rotate(${1:matrix2 &}, ${2:float})",
            "trigger": "rotate\tvoid\n(matrix2 &; float)"
        },
        {
            "contents": "rotate(${1:matrix3 &}, ${2:float}, ${3:vector})",
            "trigger": "rotate\tvoid\n(matrix3 &; float; vector)"
        },
        {
            "contents": "rotate(${1:matrix &}, ${2:float}, ${3:vector})",
            "trigger": "rotate\tvoid\n(matrix &; float; vector)"
        },
        {
            "contents": "rotate_x_to(${1:vector4}, ${2:vector4})",
            "trigger": "rotate_x_to\tvector4\n(vector4; vector4)"
        },
        {
            "contents": "rotate_x_to(${1:vector2}, ${2:vector2})",
            "trigger": "rotate_x_to\tvector2\n(vector2; vector2)"
        },
        {
            "contents": "rotate_x_to(${1:vector}, ${2:vector})",
            "trigger": "rotate_x_to\tvector\n(vector; vector)"
        },
        {
            "contents": "rstrip(${1:string})",
            "trigger": "rstrip\tstring\n(string)"
        },
        {
            "contents": "rstrip(${1:string}, ${2:string})",
            "trigger": "rstrip\tstring\n(string; string)"
        },
        {
            "contents": "sample_bsdf(${1:bsdf}, ${2:vector}, ${3:vector}, ${4:int &}, ${5:vector &}, ${6:vector &}, ${7:float &}, ${8:int &}, ${9:float}, ${10:float}, ${11:int})",
            "trigger": "sample_bsdf\tvoid\n(bsdf; vector; vector; int &; vector &; vector &; float &; int &; float; float; int)"
        },
        {
            "contents": "sample_bsdf(${1:bsdf}, ${2:vector}, ${3:vector}, ${4:int &}, ${5:vector &}, ${6:vector &}, ${7:float &}, ${8:int &}, ${9:float}, ${10:float}, ${11:int}, ${12:...})",
            "trigger": "sample_bsdf\tvoid\n(bsdf; vector; vector; int &; vector &; vector &; float &; int &; float; float; int; ...)"
        },
        {
            "contents": "sample_bsdf(${1:bsdf}, ${2:vector}, ${3:vector &}, ${4:vector &}, ${5:float &}, ${6:int &}, ${7:float}, ${8:float}, ${9:int})",
            "trigger": "sample_bsdf\tvoid\n(bsdf; vector; vector &; vector &; float &; int &; float; float; int)"
        },
        {
            "contents": "sample_bsdf(${1:bsdf}, ${2:vector}, ${3:vector &}, ${4:vector &}, ${5:float &}, ${6:int &}, ${7:float}, ${8:float}, ${9:int}, ${10:...})",
            "trigger": "sample_bsdf\tvoid\n(bsdf; vector; vector &; vector &; float &; int &; float; float; int; ...)"
        },
        {
            "contents": "sample_bsdf(${1:bsdf}, ${2:vector}, ${3:vector &}, ${4:vector &}, ${5:float &}, ${6:int &}, ${7:float}, ${8:float})",
            "trigger": "sample_bsdf\tvoid\n(bsdf; vector; vector &; vector &; float &; int &; float; float)"
        },
        {
            "contents": "sample_bsdf(${1:bsdf}, ${2:vector}, ${3:vector &}, ${4:vector &}, ${5:float &}, ${6:int &}, ${7:float}, ${8:float}, ${9:...})",
            "trigger": "sample_bsdf\tvoid\n(bsdf; vector; vector &; vector &; float &; int &; float; float; ...)"
        },
        {
            "contents": "sample_bsdf(${1:bsdf}, ${2:vector}, ${3:vector &}, ${4:vector &}, ${5:int &}, ${6:float}, ${7:float}, ${8:int})",
            "trigger": "sample_bsdf\tvoid\n(bsdf; vector; vector &; vector &; int &; float; float; int)"
        },
        {
            "contents": "sample_bsdf(${1:bsdf}, ${2:vector}, ${3:vector &}, ${4:vector &}, ${5:int &}, ${6:float}, ${7:float}, ${8:int}, ${9:...})",
            "trigger": "sample_bsdf\tvoid\n(bsdf; vector; vector &; vector &; int &; float; float; int; ...)"
        },
        {
            "contents": "sample_bsdf(${1:bsdf}, ${2:vector}, ${3:vector &}, ${4:vector &}, ${5:int &}, ${6:float}, ${7:float})",
            "trigger": "sample_bsdf\tvoid\n(bsdf; vector; vector &; vector &; int &; float; float)"
        },
        {
            "contents": "sample_bsdf(${1:bsdf}, ${2:vector}, ${3:vector &}, ${4:vector &}, ${5:int &}, ${6:float}, ${7:float}, ${8:...})",
            "trigger": "sample_bsdf\tvoid\n(bsdf; vector; vector &; vector &; int &; float; float; ...)"
        },
        {
            "contents": "sample_cauchy(${1:float})",
            "trigger": "sample_cauchy\tfloat\n(float)"
        },
        {
            "contents": "sample_cauchy(${1:float}, ${2:float})",
            "trigger": "sample_cauchy\tfloat\n(float; float)"
        },
        {
            "contents": "sample_cauchy(${1:float}, ${2:float}, ${3:float}, ${4:float})",
            "trigger": "sample_cauchy\tfloat\n(float; float; float; float)"
        },
        {
            "contents": "sample_cauchy(${1:vector4})",
            "trigger": "sample_cauchy\tvector4\n(vector4)"
        },
        {
            "contents": "sample_cauchy(${1:float}, ${2:vector2})",
            "trigger": "sample_cauchy\tvector2\n(float; vector2)"
        },
        {
            "contents": "sample_cauchy(${1:vector2})",
            "trigger": "sample_cauchy\tvector2\n(vector2)"
        },
        {
            "contents": "sample_cauchy(${1:vector})",
            "trigger": "sample_cauchy\tvector\n(vector)"
        },
        {
            "contents": "sample_cdf(${1:float[]}, ${2:float})",
            "trigger": "sample_cdf\tint\n(float[]; float)"
        },
        {
            "contents": "sample_cdf(${1:float[]}, ${2:float}, ${3:int &}, ${4:float &})",
            "trigger": "sample_cdf\tvoid\n(float[]; float; int &; float &)"
        },
        {
            "contents": "sample_cdf(${1:float[]}, ${2:float}, ${3:int &}, ${4:float &}, ${5:float &})",
            "trigger": "sample_cdf\tvoid\n(float[]; float; int &; float &; float &)"
        },
        {
            "contents": "sample_circle_arc(${1:vector2}, ${2:float}, ${3:float})",
            "trigger": "sample_circle_arc\tvector2\n(vector2; float; float)"
        },
        {
            "contents": "sample_circle_edge_uniform(${1:float})",
            "trigger": "sample_circle_edge_uniform\tvector2\n(float)"
        },
        {
            "contents": "sample_circle_slice(${1:vector2}, ${2:float}, ${3:vector2})",
            "trigger": "sample_circle_slice\tvector2\n(vector2; float; vector2)"
        },
        {
            "contents": "sample_circle_uniform(${1:vector2})",
            "trigger": "sample_circle_uniform\tvector2\n(vector2)"
        },
        {
            "contents": "sample_direction_cone(${1:vector}, ${2:float}, ${3:vector2})",
            "trigger": "sample_direction_cone\tvector\n(vector; float; vector2)"
        },
        {
            "contents": "sample_direction_uniform(${1:vector2})",
            "trigger": "sample_direction_uniform\tvector\n(vector2)"
        },
        {
            "contents": "sample_discrete(${1:int}, ${2:float})",
            "trigger": "sample_discrete\tint\n(int; float)"
        },
        {
            "contents": "sample_discrete(${1:float[]}, ${2:float})",
            "trigger": "sample_discrete\tint\n(float[]; float)"
        },
        {
            "contents": "sample_exponential(${1:float})",
            "trigger": "sample_exponential\tfloat\n(float)"
        },
        {
            "contents": "sample_exponential(${1:float}, ${2:float})",
            "trigger": "sample_exponential\tfloat\n(float; float)"
        },
        {
            "contents": "sample_exponential(${1:float}, ${2:float}, ${3:float})",
            "trigger": "sample_exponential\tfloat\n(float; float; float)"
        },
        {
            "contents": "sample_hemisphere(${1:float}, ${2:vector2})",
            "trigger": "sample_hemisphere\tvector\n(float; vector2)"
        },
        {
            "contents": "sample_hemisphere(${1:vector2})",
            "trigger": "sample_hemisphere\tvector\n(vector2)"
        },
        {
            "contents": "sample_hemisphere(${1:vector}, ${2:float}, ${3:vector2})",
            "trigger": "sample_hemisphere\tvector\n(vector; float; vector2)"
        },
        {
            "contents": "sample_hemisphere(${1:vector}, ${2:vector2})",
            "trigger": "sample_hemisphere\tvector\n(vector; vector2)"
        },
        {
            "contents": "sample_hypersphere_cone(${1:vector4}, ${2:float}, ${3:vector4})",
            "trigger": "sample_hypersphere_cone\tvector4\n(vector4; float; vector4)"
        },
        {
            "contents": "sample_hypersphere_uniform(${1:vector4})",
            "trigger": "sample_hypersphere_uniform\tvector4\n(vector4)"
        },
        {
            "contents": "sample_lognormal(${1:float}, ${2:float}, ${3:float})",
            "trigger": "sample_lognormal\tfloat\n(float; float; float)"
        },
        {
            "contents": "sample_lognormal(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float})",
            "trigger": "sample_lognormal\tfloat\n(float; float; float; float; float)"
        },
        {
            "contents": "sample_lognormal_by_median(${1:float}, ${2:float}, ${3:float})",
            "trigger": "sample_lognormal_by_median\tfloat\n(float; float; float)"
        },
        {
            "contents": "sample_lognormal_by_median(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float})",
            "trigger": "sample_lognormal_by_median\tfloat\n(float; float; float; float; float)"
        },
        {
            "contents": "sample_normal(${1:float})",
            "trigger": "sample_normal\tfloat\n(float)"
        },
        {
            "contents": "sample_normal(${1:float}, ${2:float}, ${3:float})",
            "trigger": "sample_normal\tfloat\n(float; float; float)"
        },
        {
            "contents": "sample_normal(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float})",
            "trigger": "sample_normal\tfloat\n(float; float; float; float; float)"
        },
        {
            "contents": "sample_normal(${1:vector4})",
            "trigger": "sample_normal\tvector4\n(vector4)"
        },
        {
            "contents": "sample_normal(${1:vector2})",
            "trigger": "sample_normal\tvector2\n(vector2)"
        },
        {
            "contents": "sample_normal(${1:vector})",
            "trigger": "sample_normal\tvector\n(vector)"
        },
        {
            "contents": "sample_orientation_cone(${1:vector4}, ${2:float}, ${3:vector})",
            "trigger": "sample_orientation_cone\tvector4\n(vector4; float; vector)"
        },
        {
            "contents": "sample_orientation_uniform(${1:vector})",
            "trigger": "sample_orientation_uniform\tvector4\n(vector)"
        },
        {
            "contents": "sample_sphere_cone(${1:vector}, ${2:float}, ${3:vector})",
            "trigger": "sample_sphere_cone\tvector\n(vector; float; vector)"
        },
        {
            "contents": "sample_sphere_uniform(${1:vector})",
            "trigger": "sample_sphere_uniform\tvector\n(vector)"
        },
        {
            "contents": "sampledisk(${1:float &}, ${2:float &}, ${3:float}, ${4:float})",
            "trigger": "sampledisk\tvoid\n(float &; float &; float; float)"
        },
        {
            "contents": "scale(${1:matrix2 &}, ${2:vector2})",
            "trigger": "scale\tvoid\n(matrix2 &; vector2)"
        },
        {
            "contents": "scale(${1:matrix3 &}, ${2:vector})",
            "trigger": "scale\tvoid\n(matrix3 &; vector)"
        },
        {
            "contents": "scale(${1:matrix &}, ${2:vector})",
            "trigger": "scale\tvoid\n(matrix &; vector)"
        },
        {
            "contents": "select(${1:int}, ${2:matrix2}, ${3:matrix2})",
            "trigger": "select\tmatrix2\n(int; matrix2; matrix2)"
        },
        {
            "contents": "select(${1:int}, ${2:matrix3}, ${3:matrix3})",
            "trigger": "select\tmatrix3\n(int; matrix3; matrix3)"
        },
        {
            "contents": "select(${1:int}, ${2:matrix}, ${3:matrix})",
            "trigger": "select\tmatrix\n(int; matrix; matrix)"
        },
        {
            "contents": "select(${1:int}, ${2:bsdf}, ${3:bsdf})",
            "trigger": "select\tbsdf\n(int; bsdf; bsdf)"
        },
        {
            "contents": "select(${1:int}, ${2:float}, ${3:float})",
            "trigger": "select\tfloat\n(int; float; float)"
        },
        {
            "contents": "select(${1:int}, ${2:int}, ${3:int})",
            "trigger": "select\tint\n(int; int; int)"
        },
        {
            "contents": "select(${1:int}, ${2:vector4}, ${3:vector4})",
            "trigger": "select\tvector4\n(int; vector4; vector4)"
        },
        {
            "contents": "select(${1:int}, ${2:string}, ${3:string})",
            "trigger": "select\tstring\n(int; string; string)"
        },
        {
            "contents": "select(${1:int}, ${2:vector2}, ${3:vector2})",
            "trigger": "select\tvector2\n(int; vector2; vector2)"
        },
        {
            "contents": "select(${1:int}, ${2:vector}, ${3:vector})",
            "trigger": "select\tvector\n(int; vector; vector)"
        },
        {
            "contents": "select(${1:int}, ${2:matrix2[]}, ${3:matrix2[]})",
            "trigger": "select\tmatrix2[]\n(int; matrix2[]; matrix2[])"
        },
        {
            "contents": "select(${1:int}, ${2:matrix3[]}, ${3:matrix3[]})",
            "trigger": "select\tmatrix3[]\n(int; matrix3[]; matrix3[])"
        },
        {
            "contents": "select(${1:int}, ${2:matrix[]}, ${3:matrix[]})",
            "trigger": "select\tmatrix[]\n(int; matrix[]; matrix[])"
        },
        {
            "contents": "select(${1:int}, ${2:bsdf[]}, ${3:bsdf[]})",
            "trigger": "select\tbsdf[]\n(int; bsdf[]; bsdf[])"
        },
        {
            "contents": "select(${1:int}, ${2:float[]}, ${3:float[]})",
            "trigger": "select\tfloat[]\n(int; float[]; float[])"
        },
        {
            "contents": "select(${1:int}, ${2:int[]}, ${3:int[]})",
            "trigger": "select\tint[]\n(int; int[]; int[])"
        },
        {
            "contents": "select(${1:int}, ${2:vector4[]}, ${3:vector4[]})",
            "trigger": "select\tvector4[]\n(int; vector4[]; vector4[])"
        },
        {
            "contents": "select(${1:int}, ${2:string[]}, ${3:string[]})",
            "trigger": "select\tstring[]\n(int; string[]; string[])"
        },
        {
            "contents": "select(${1:int}, ${2:vector2[]}, ${3:vector2[]})",
            "trigger": "select\tvector2[]\n(int; vector2[]; vector2[])"
        },
        {
            "contents": "select(${1:int}, ${2:vector[]}, ${3:vector[]})",
            "trigger": "select\tvector[]\n(int; vector[]; vector[])"
        },
        {
            "contents": "sensor_panorama_create(${1:float}, ${2:vector}, ${3:int}, ${4:float}, ${5:float}, ${6:string}, ${7:string}, ${8:string}, ${9:int})",
            "trigger": "sensor_panorama_create\tint\n(float; vector; int; float; float; string; string; string; int)"
        },
        {
            "contents": "sensor_panorama_getcolor(${1:int}, ${2:vector})",
            "trigger": "sensor_panorama_getcolor\tvector\n(int; vector)"
        },
        {
            "contents": "sensor_panorama_getcone(${1:int}, ${2:vector}, ${3:float}, ${4:vector}, ${5:vector}, ${6:float}, ${7:float}, ${8:float &}, ${9:vector &}, ${10:vector &}, ${11:float &})",
            "trigger": "sensor_panorama_getcone\tvoid\n(int; vector; float; vector; vector; float; float; float &; vector &; vector &; float &)"
        },
        {
            "contents": "sensor_panorama_getdepth(${1:int}, ${2:vector})",
            "trigger": "sensor_panorama_getdepth\tfloat\n(int; vector)"
        },
        {
            "contents": "sensor_save(${1:int}, ${2:string}, ${3:string})",
            "trigger": "sensor_save\tint\n(int; string; string)"
        },
        {
            "contents": "serialize(${1:matrix2[]})",
            "trigger": "serialize\tfloat[]\n(matrix2[])"
        },
        {
            "contents": "serialize(${1:matrix3[]})",
            "trigger": "serialize\tfloat[]\n(matrix3[])"
        },
        {
            "contents": "serialize(${1:matrix[]})",
            "trigger": "serialize\tfloat[]\n(matrix[])"
        },
        {
            "contents": "serialize(${1:vector4[]})",
            "trigger": "serialize\tfloat[]\n(vector4[])"
        },
        {
            "contents": "serialize(${1:vector2[]})",
            "trigger": "serialize\tfloat[]\n(vector2[])"
        },
        {
            "contents": "serialize(${1:vector[]})",
            "trigger": "serialize\tfloat[]\n(vector[])"
        },
        {
            "contents": "set(${1:matrix2})",
            "trigger": "set\tmatrix2\n(matrix2)"
        },
        {
            "contents": "set(${1:matrix3})",
            "trigger": "set\tmatrix2\n(matrix3)"
        },
        {
            "contents": "set(${1:matrix})",
            "trigger": "set\tmatrix2\n(matrix)"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tmatrix2\n(float)"
        },
        {
            "contents": "set(${1:float}, ${2:float}, ${3:float}, ${4:float})",
            "trigger": "set\tmatrix2\n(float; float; float; float)"
        },
        {
            "contents": "set(${1:int})",
            "trigger": "set\tmatrix2\n(int)"
        },
        {
            "contents": "set(${1:vector2}, ${2:vector2})",
            "trigger": "set\tmatrix2\n(vector2; vector2)"
        },
        {
            "contents": "set(${1:matrix2})",
            "trigger": "set\tmatrix3\n(matrix2)"
        },
        {
            "contents": "set(${1:matrix3})",
            "trigger": "set\tmatrix3\n(matrix3)"
        },
        {
            "contents": "set(${1:matrix})",
            "trigger": "set\tmatrix3\n(matrix)"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tmatrix3\n(float)"
        },
        {
            "contents": "set(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float})",
            "trigger": "set\tmatrix3\n(float; float; float; float; float; float; float; float; float)"
        },
        {
            "contents": "set(${1:int})",
            "trigger": "set\tmatrix3\n(int)"
        },
        {
            "contents": "set(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "set\tmatrix3\n(vector; vector; vector)"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tmatrix3\n(float[])"
        },
        {
            "contents": "set(${1:vector[]})",
            "trigger": "set\tmatrix3\n(vector[])"
        },
        {
            "contents": "set(${1:matrix2})",
            "trigger": "set\tmatrix\n(matrix2)"
        },
        {
            "contents": "set(${1:matrix3})",
            "trigger": "set\tmatrix\n(matrix3)"
        },
        {
            "contents": "set(${1:matrix})",
            "trigger": "set\tmatrix\n(matrix)"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tmatrix\n(float)"
        },
        {
            "contents": "set(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:float}, ${11:float}, ${12:float}, ${13:float}, ${14:float}, ${15:float}, ${16:float})",
            "trigger": "set\tmatrix\n(float; float; float; float; float; float; float; float; float; float; float; float; float; float; float; float)"
        },
        {
            "contents": "set(${1:int})",
            "trigger": "set\tmatrix\n(int)"
        },
        {
            "contents": "set(${1:vector4}, ${2:vector4}, ${3:vector4}, ${4:vector4})",
            "trigger": "set\tmatrix\n(vector4; vector4; vector4; vector4)"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tmatrix\n(float[])"
        },
        {
            "contents": "set(${1:vector4[]})",
            "trigger": "set\tmatrix\n(vector4[])"
        },
        {
            "contents": "set(${1:bsdf})",
            "trigger": "set\tbsdf\n(bsdf)"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tfloat\n(float)"
        },
        {
            "contents": "set(${1:int})",
            "trigger": "set\tfloat\n(int)"
        },
        {
            "contents": "set(${1:vector4})",
            "trigger": "set\tfloat\n(vector4)"
        },
        {
            "contents": "set(${1:vector})",
            "trigger": "set\tfloat\n(vector)"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tfloat\n(float[])"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tint\n(float)"
        },
        {
            "contents": "set(${1:int})",
            "trigger": "set\tint\n(int)"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tvector4\n(float)"
        },
        {
            "contents": "set(${1:float}, ${2:float}, ${3:float}, ${4:float})",
            "trigger": "set\tvector4\n(float; float; float; float)"
        },
        {
            "contents": "set(${1:int})",
            "trigger": "set\tvector4\n(int)"
        },
        {
            "contents": "set(${1:vector4})",
            "trigger": "set\tvector4\n(vector4)"
        },
        {
            "contents": "set(${1:vector2})",
            "trigger": "set\tvector4\n(vector2)"
        },
        {
            "contents": "set(${1:vector})",
            "trigger": "set\tvector4\n(vector)"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tvector4\n(float[])"
        },
        {
            "contents": "set(${1:string})",
            "trigger": "set\tstring\n(string)"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tvector2\n(float)"
        },
        {
            "contents": "set(${1:float}, ${2:float})",
            "trigger": "set\tvector2\n(float; float)"
        },
        {
            "contents": "set(${1:int})",
            "trigger": "set\tvector2\n(int)"
        },
        {
            "contents": "set(${1:vector4})",
            "trigger": "set\tvector2\n(vector4)"
        },
        {
            "contents": "set(${1:vector2})",
            "trigger": "set\tvector2\n(vector2)"
        },
        {
            "contents": "set(${1:vector})",
            "trigger": "set\tvector2\n(vector)"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tvector\n(float)"
        },
        {
            "contents": "set(${1:float}, ${2:float}, ${3:float})",
            "trigger": "set\tvector\n(float; float; float)"
        },
        {
            "contents": "set(${1:int})",
            "trigger": "set\tvector\n(int)"
        },
        {
            "contents": "set(${1:vector4})",
            "trigger": "set\tvector\n(vector4)"
        },
        {
            "contents": "set(${1:vector2})",
            "trigger": "set\tvector\n(vector2)"
        },
        {
            "contents": "set(${1:vector})",
            "trigger": "set\tvector\n(vector)"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tvector\n(float[])"
        },
        {
            "contents": "set(${1:matrix2[]})",
            "trigger": "set\tmatrix2[]\n(matrix2[])"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tmatrix2[]\n(float[])"
        },
        {
            "contents": "set(${1:matrix3[]})",
            "trigger": "set\tmatrix3[]\n(matrix3[])"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tmatrix3[]\n(float[])"
        },
        {
            "contents": "set(${1:matrix[]})",
            "trigger": "set\tmatrix[]\n(matrix[])"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tmatrix[]\n(float[])"
        },
        {
            "contents": "set(${1:bsdf[]})",
            "trigger": "set\tbsdf[]\n(bsdf[])"
        },
        {
            "contents": "set(${1:matrix3})",
            "trigger": "set\tfloat[]\n(matrix3)"
        },
        {
            "contents": "set(${1:matrix})",
            "trigger": "set\tfloat[]\n(matrix)"
        },
        {
            "contents": "set(${1:float})",
            "trigger": "set\tfloat[]\n(float)"
        },
        {
            "contents": "set(${1:vector4})",
            "trigger": "set\tfloat[]\n(vector4)"
        },
        {
            "contents": "set(${1:vector})",
            "trigger": "set\tfloat[]\n(vector)"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tfloat[]\n(float[])"
        },
        {
            "contents": "set(${1:int[]})",
            "trigger": "set\tfloat[]\n(int[])"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tint[]\n(float[])"
        },
        {
            "contents": "set(${1:int[]})",
            "trigger": "set\tint[]\n(int[])"
        },
        {
            "contents": "set(${1:matrix})",
            "trigger": "set\tvector4[]\n(matrix)"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tvector4[]\n(float[])"
        },
        {
            "contents": "set(${1:vector4[]})",
            "trigger": "set\tvector4[]\n(vector4[])"
        },
        {
            "contents": "set(${1:string[]})",
            "trigger": "set\tstring[]\n(string[])"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tvector2[]\n(float[])"
        },
        {
            "contents": "set(${1:vector2[]})",
            "trigger": "set\tvector2[]\n(vector2[])"
        },
        {
            "contents": "set(${1:matrix3})",
            "trigger": "set\tvector[]\n(matrix3)"
        },
        {
            "contents": "set(${1:float[]})",
            "trigger": "set\tvector[]\n(float[])"
        },
        {
            "contents": "set(${1:vector[]})",
            "trigger": "set\tvector[]\n(vector[])"
        },
        {
            "contents": "setagentclipnames(${1:int}, ${2:int}, ${3:string[]})",
            "trigger": "setagentclipnames\tvoid\n(int; int; string[])"
        },
        {
            "contents": "setagentclips(${1:int}, ${2:int}, ${3:string[]}, ${4:float[]}, ${5:float[]}, ${6:string[]}, ${7:int[]}, ${8:int[]}, ${9:float[]}, ${10:int[]})",
            "trigger": "setagentclips\tint\n(int; int; string[]; float[]; float[]; string[]; int[]; int[]; float[]; int[])"
        },
        {
            "contents": "setagentcliptimes(${1:int}, ${2:int}, ${3:float[]})",
            "trigger": "setagentcliptimes\tvoid\n(int; int; float[])"
        },
        {
            "contents": "setagentclipweights(${1:int}, ${2:int}, ${3:float[]})",
            "trigger": "setagentclipweights\tvoid\n(int; int; float[])"
        },
        {
            "contents": "setagentcollisionlayer(${1:int}, ${2:int}, ${3:string})",
            "trigger": "setagentcollisionlayer\tvoid\n(int; int; string)"
        },
        {
            "contents": "setagentcurrentlayer(${1:int}, ${2:int}, ${3:string})",
            "trigger": "setagentcurrentlayer\tvoid\n(int; int; string)"
        },
        {
            "contents": "setagentlocaltransform(${1:int}, ${2:int}, ${3:matrix}, ${4:int})",
            "trigger": "setagentlocaltransform\tint\n(int; int; matrix; int)"
        },
        {
            "contents": "setagentlocaltransforms(${1:int}, ${2:int}, ${3:matrix[]})",
            "trigger": "setagentlocaltransforms\tvoid\n(int; int; matrix[])"
        },
        {
            "contents": "setagentworldtransform(${1:int}, ${2:int}, ${3:matrix}, ${4:int})",
            "trigger": "setagentworldtransform\tint\n(int; int; matrix; int)"
        },
        {
            "contents": "setagentworldtransforms(${1:int}, ${2:int}, ${3:matrix[]})",
            "trigger": "setagentworldtransforms\tvoid\n(int; int; matrix[])"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix2})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; matrix2)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix2}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; matrix2; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix3})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; matrix3)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix3}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; matrix3; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; matrix)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; matrix; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:float})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; float)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:float}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; float; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:int})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; int)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:int}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; int; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector4})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; vector4)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector4}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; vector4; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:string}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; string; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector2})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; vector2)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector2}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; vector2; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; vector)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; vector; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix2[]})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; matrix2[])"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix2[]}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; matrix2[]; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix3[]})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; matrix3[])"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix3[]}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; matrix3[]; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix[]})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; matrix[])"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:matrix[]}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; matrix[]; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:float[]})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; float[])"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:float[]}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; float[]; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:int[]})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; int[])"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:int[]}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; int[]; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector4[]})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; vector4[])"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector4[]}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; vector4[]; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:string[]})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; string[])"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:string[]}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; string[]; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector2[]})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; vector2[])"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector2[]}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; vector2[]; string)"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector[]})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; vector[])"
        },
        {
            "contents": "setattrib(${1:int}, ${2:string}, ${3:string}, ${4:int}, ${5:int}, ${6:vector[]}, ${7:string})",
            "trigger": "setattrib\tint\n(int; string; string; int; int; vector[]; string)"
        },
        {
            "contents": "setattribtypeinfo(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "setattribtypeinfo\tint\n(int; string; string; string)"
        },
        {
            "contents": "setcomp(${1:matrix2 &}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "setcomp\tvoid\n(matrix2 &; float; int; int)"
        },
        {
            "contents": "setcomp(${1:matrix2[] &}, ${2:matrix2}, ${3:int})",
            "trigger": "setcomp\tmatrix2\n(matrix2[] &; matrix2; int)"
        },
        {
            "contents": "setcomp(${1:matrix3 &}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "setcomp\tvoid\n(matrix3 &; float; int; int)"
        },
        {
            "contents": "setcomp(${1:matrix3[] &}, ${2:matrix3}, ${3:int})",
            "trigger": "setcomp\tmatrix3\n(matrix3[] &; matrix3; int)"
        },
        {
            "contents": "setcomp(${1:matrix &}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "setcomp\tvoid\n(matrix &; float; int; int)"
        },
        {
            "contents": "setcomp(${1:matrix[] &}, ${2:matrix}, ${3:int})",
            "trigger": "setcomp\tmatrix\n(matrix[] &; matrix; int)"
        },
        {
            "contents": "setcomp(${1:bsdf[] &}, ${2:bsdf}, ${3:int})",
            "trigger": "setcomp\tbsdf\n(bsdf[] &; bsdf; int)"
        },
        {
            "contents": "setcomp(${1:matrix2 &}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "setcomp\tfloat\n(matrix2 &; float; int; int)"
        },
        {
            "contents": "setcomp(${1:matrix3 &}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "setcomp\tfloat\n(matrix3 &; float; int; int)"
        },
        {
            "contents": "setcomp(${1:matrix &}, ${2:float}, ${3:int}, ${4:int})",
            "trigger": "setcomp\tfloat\n(matrix &; float; int; int)"
        },
        {
            "contents": "setcomp(${1:vector4 &}, ${2:float}, ${3:int})",
            "trigger": "setcomp\tfloat\n(vector4 &; float; int)"
        },
        {
            "contents": "setcomp(${1:vector2 &}, ${2:float}, ${3:int})",
            "trigger": "setcomp\tfloat\n(vector2 &; float; int)"
        },
        {
            "contents": "setcomp(${1:vector &}, ${2:float}, ${3:int})",
            "trigger": "setcomp\tfloat\n(vector &; float; int)"
        },
        {
            "contents": "setcomp(${1:float[] &}, ${2:float}, ${3:int})",
            "trigger": "setcomp\tfloat\n(float[] &; float; int)"
        },
        {
            "contents": "setcomp(${1:int[] &}, ${2:int}, ${3:int})",
            "trigger": "setcomp\tint\n(int[] &; int; int)"
        },
        {
            "contents": "setcomp(${1:vector4 &}, ${2:float}, ${3:int})",
            "trigger": "setcomp\tvoid\n(vector4 &; float; int)"
        },
        {
            "contents": "setcomp(${1:vector4[] &}, ${2:vector4}, ${3:int})",
            "trigger": "setcomp\tvector4\n(vector4[] &; vector4; int)"
        },
        {
            "contents": "setcomp(${1:string[] &}, ${2:string}, ${3:int})",
            "trigger": "setcomp\tstring\n(string[] &; string; int)"
        },
        {
            "contents": "setcomp(${1:vector2 &}, ${2:float}, ${3:int})",
            "trigger": "setcomp\tvoid\n(vector2 &; float; int)"
        },
        {
            "contents": "setcomp(${1:vector2[] &}, ${2:vector2}, ${3:int})",
            "trigger": "setcomp\tvector2\n(vector2[] &; vector2; int)"
        },
        {
            "contents": "setcomp(${1:vector &}, ${2:float}, ${3:int})",
            "trigger": "setcomp\tvoid\n(vector &; float; int)"
        },
        {
            "contents": "setcomp(${1:vector[] &}, ${2:vector}, ${3:int})",
            "trigger": "setcomp\tvector\n(vector[] &; vector; int)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix2})",
            "trigger": "setdetailattrib\tint\n(int; string; matrix2)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix2}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; matrix2; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix3})",
            "trigger": "setdetailattrib\tint\n(int; string; matrix3)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix3}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; matrix3; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix})",
            "trigger": "setdetailattrib\tint\n(int; string; matrix)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; matrix; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:float})",
            "trigger": "setdetailattrib\tint\n(int; string; float)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:float}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; float; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:int})",
            "trigger": "setdetailattrib\tint\n(int; string; int)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:int}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; int; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector4})",
            "trigger": "setdetailattrib\tint\n(int; string; vector4)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector4}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; vector4; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:string})",
            "trigger": "setdetailattrib\tint\n(int; string; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:string}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; string; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector2})",
            "trigger": "setdetailattrib\tint\n(int; string; vector2)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector2}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; vector2; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "setdetailattrib\tint\n(int; string; vector)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; vector; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix2[]})",
            "trigger": "setdetailattrib\tint\n(int; string; matrix2[])"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix2[]}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; matrix2[]; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix3[]})",
            "trigger": "setdetailattrib\tint\n(int; string; matrix3[])"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix3[]}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; matrix3[]; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix[]})",
            "trigger": "setdetailattrib\tint\n(int; string; matrix[])"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:matrix[]}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; matrix[]; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:float[]})",
            "trigger": "setdetailattrib\tint\n(int; string; float[])"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:float[]}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; float[]; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:int[]})",
            "trigger": "setdetailattrib\tint\n(int; string; int[])"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:int[]}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; int[]; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector4[]})",
            "trigger": "setdetailattrib\tint\n(int; string; vector4[])"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector4[]}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; vector4[]; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:string[]})",
            "trigger": "setdetailattrib\tint\n(int; string; string[])"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:string[]}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; string[]; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector2[]})",
            "trigger": "setdetailattrib\tint\n(int; string; vector2[])"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector2[]}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; vector2[]; string)"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector[]})",
            "trigger": "setdetailattrib\tint\n(int; string; vector[])"
        },
        {
            "contents": "setdetailattrib(${1:int}, ${2:string}, ${3:vector[]}, ${4:string})",
            "trigger": "setdetailattrib\tint\n(int; string; vector[]; string)"
        },
        {
            "contents": "setedgegroup(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int})",
            "trigger": "setedgegroup\tint\n(int; string; int; int; int)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix2})",
            "trigger": "setpointattrib\tint\n(int; string; int; matrix2)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix2}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; matrix2; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix3})",
            "trigger": "setpointattrib\tint\n(int; string; int; matrix3)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix3}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; matrix3; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix})",
            "trigger": "setpointattrib\tint\n(int; string; int; matrix)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; matrix; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:float})",
            "trigger": "setpointattrib\tint\n(int; string; int; float)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; float; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "setpointattrib\tint\n(int; string; int; int)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; int; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector4})",
            "trigger": "setpointattrib\tint\n(int; string; int; vector4)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector4}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; vector4; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:string}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; string; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector2})",
            "trigger": "setpointattrib\tint\n(int; string; int; vector2)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector2}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; vector2; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "setpointattrib\tint\n(int; string; int; vector)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; vector; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix2[]})",
            "trigger": "setpointattrib\tint\n(int; string; int; matrix2[])"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix2[]}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; matrix2[]; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix3[]})",
            "trigger": "setpointattrib\tint\n(int; string; int; matrix3[])"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix3[]}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; matrix3[]; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix[]})",
            "trigger": "setpointattrib\tint\n(int; string; int; matrix[])"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix[]}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; matrix[]; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:float[]})",
            "trigger": "setpointattrib\tint\n(int; string; int; float[])"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:float[]}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; float[]; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int[]})",
            "trigger": "setpointattrib\tint\n(int; string; int; int[])"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:int[]}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; int[]; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector4[]})",
            "trigger": "setpointattrib\tint\n(int; string; int; vector4[])"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector4[]}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; vector4[]; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:string[]})",
            "trigger": "setpointattrib\tint\n(int; string; int; string[])"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:string[]}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; string[]; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector2[]})",
            "trigger": "setpointattrib\tint\n(int; string; int; vector2[])"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector2[]}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; vector2[]; string)"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector[]})",
            "trigger": "setpointattrib\tint\n(int; string; int; vector[])"
        },
        {
            "contents": "setpointattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector[]}, ${5:string})",
            "trigger": "setpointattrib\tint\n(int; string; int; vector[]; string)"
        },
        {
            "contents": "setpointgroup(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "setpointgroup\tint\n(int; string; int; int)"
        },
        {
            "contents": "setpointgroup(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string})",
            "trigger": "setpointgroup\tint\n(int; string; int; int; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix2})",
            "trigger": "setprimattrib\tint\n(int; string; int; matrix2)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix2}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; matrix2; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix3})",
            "trigger": "setprimattrib\tint\n(int; string; int; matrix3)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix3}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; matrix3; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix})",
            "trigger": "setprimattrib\tint\n(int; string; int; matrix)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; matrix; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:float})",
            "trigger": "setprimattrib\tint\n(int; string; int; float)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; float; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "setprimattrib\tint\n(int; string; int; int)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; int; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector4})",
            "trigger": "setprimattrib\tint\n(int; string; int; vector4)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector4}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; vector4; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:string}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; string; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector2})",
            "trigger": "setprimattrib\tint\n(int; string; int; vector2)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector2}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; vector2; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "setprimattrib\tint\n(int; string; int; vector)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; vector; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix2[]})",
            "trigger": "setprimattrib\tint\n(int; string; int; matrix2[])"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix2[]}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; matrix2[]; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix3[]})",
            "trigger": "setprimattrib\tint\n(int; string; int; matrix3[])"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix3[]}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; matrix3[]; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix[]})",
            "trigger": "setprimattrib\tint\n(int; string; int; matrix[])"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:matrix[]}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; matrix[]; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:float[]})",
            "trigger": "setprimattrib\tint\n(int; string; int; float[])"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:float[]}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; float[]; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:int[]})",
            "trigger": "setprimattrib\tint\n(int; string; int; int[])"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:int[]}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; int[]; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector4[]})",
            "trigger": "setprimattrib\tint\n(int; string; int; vector4[])"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector4[]}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; vector4[]; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:string[]})",
            "trigger": "setprimattrib\tint\n(int; string; int; string[])"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:string[]}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; string[]; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector2[]})",
            "trigger": "setprimattrib\tint\n(int; string; int; vector2[])"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector2[]}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; vector2[]; string)"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector[]})",
            "trigger": "setprimattrib\tint\n(int; string; int; vector[])"
        },
        {
            "contents": "setprimattrib(${1:int}, ${2:string}, ${3:int}, ${4:vector[]}, ${5:string})",
            "trigger": "setprimattrib\tint\n(int; string; int; vector[]; string)"
        },
        {
            "contents": "setprimgroup(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "setprimgroup\tint\n(int; string; int; int)"
        },
        {
            "contents": "setprimgroup(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string})",
            "trigger": "setprimgroup\tint\n(int; string; int; int; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix2})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; matrix2)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix2}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; matrix2; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix3})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; matrix3)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix3}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; matrix3; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; matrix)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; matrix; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:float})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; float)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:float}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; float; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; int)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; int; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector4})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; vector4)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector4}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; vector4; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:string}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; string; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector2})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; vector2)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector2}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; vector2; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; vector)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; vector; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix2[]})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; matrix2[])"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix2[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; matrix2[]; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix3[]})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; matrix3[])"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix3[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; matrix3[]; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix[]})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; matrix[])"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:matrix[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; matrix[]; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:float[]})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; float[])"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:float[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; float[]; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:int[]})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; int[])"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:int[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; int[]; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector4[]})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; vector4[])"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector4[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; vector4[]; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:string[]})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; string[])"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:string[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; string[]; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector2[]})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; vector2[])"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector2[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; vector2[]; string)"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector[]})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; vector[])"
        },
        {
            "contents": "setprimintrinsic(${1:int}, ${2:string}, ${3:int}, ${4:vector[]}, ${5:string})",
            "trigger": "setprimintrinsic\tint\n(int; string; int; vector[]; string)"
        },
        {
            "contents": "setprimvertex(${1:int}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "setprimvertex\tint\n(int; int; int; int)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix2})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; matrix2)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix2}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; matrix2; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix3})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; matrix3)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix3}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; matrix3; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; matrix)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; matrix; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:float})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; float)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:float}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; float; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; int)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; int; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector4})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; vector4)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector4}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; vector4; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; string; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector2})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; vector2)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector2}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; vector2; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; vector)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; vector; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix2[]})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; matrix2[])"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix2[]}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; matrix2[]; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix3[]})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; matrix3[])"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix3[]}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; matrix3[]; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix[]})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; matrix[])"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:matrix[]}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; matrix[]; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:float[]})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; float[])"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:float[]}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; float[]; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int[]})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; int[])"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int[]}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; int[]; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector4[]})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; vector4[])"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector4[]}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; vector4[]; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string[]})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; string[])"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:string[]}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; string[]; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector2[]})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; vector2[])"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector2[]}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; vector2[]; string)"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector[]})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; vector[])"
        },
        {
            "contents": "setvertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:vector[]}, ${6:string})",
            "trigger": "setvertexattrib\tint\n(int; string; int; int; vector[]; string)"
        },
        {
            "contents": "setvertexgroup(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int})",
            "trigger": "setvertexgroup\tint\n(int; string; int; int; int)"
        },
        {
            "contents": "setvertexgroup(${1:int}, ${2:string}, ${3:int}, ${4:int}, ${5:int}, ${6:string})",
            "trigger": "setvertexgroup\tint\n(int; string; int; int; int; string)"
        },
        {
            "contents": "setvertexpoint(${1:int}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "setvertexpoint\tint\n(int; int; int; int)"
        },
        {
            "contents": "shadowmap(${1:string}, ${2:vector}, ${3:float}, ${4:float}, ${5:float})",
            "trigger": "shadowmap\tfloat\n(string; vector; float; float; float)"
        },
        {
            "contents": "shadowmap(${1:string}, ${2:vector}, ${3:float}, ${4:float}, ${5:float}, ${6:...})",
            "trigger": "shadowmap\tfloat\n(string; vector; float; float; float; ...)"
        },
        {
            "contents": "shadowmap(${1:string}, ${2:vector}, ${3:float}, ${4:float}, ${5:float})",
            "trigger": "shadowmap\tvector\n(string; vector; float; float; float)"
        },
        {
            "contents": "shadowmap(${1:string}, ${2:vector}, ${3:float}, ${4:float}, ${5:float}, ${6:...})",
            "trigger": "shadowmap\tvector\n(string; vector; float; float; float; ...)"
        },
        {
            "contents": "shadowmap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:float}, ${7:float}, ${8:float})",
            "trigger": "shadowmap\tvector\n(string; vector; vector; vector; vector; float; float; float)"
        },
        {
            "contents": "shadowmap(${1:string}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector}, ${6:float}, ${7:float}, ${8:float}, ${9:...})",
            "trigger": "shadowmap\tvector\n(string; vector; vector; vector; vector; float; float; float; ...)"
        },
        {
            "contents": "shl(${1:int}, ${2:int})",
            "trigger": "shl\tint\n(int; int)"
        },
        {
            "contents": "shr(${1:int}, ${2:int})",
            "trigger": "shr\tint\n(int; int)"
        },
        {
            "contents": "shrz(${1:int}, ${2:int})",
            "trigger": "shrz\tint\n(int; int)"
        },
        {
            "contents": "sign(${1:float})",
            "trigger": "sign\tfloat\n(float)"
        },
        {
            "contents": "sign(${1:int})",
            "trigger": "sign\tint\n(int)"
        },
        {
            "contents": "sign(${1:vector4})",
            "trigger": "sign\tvector4\n(vector4)"
        },
        {
            "contents": "sign(${1:vector2})",
            "trigger": "sign\tvector2\n(vector2)"
        },
        {
            "contents": "sign(${1:vector})",
            "trigger": "sign\tvector\n(vector)"
        },
        {
            "contents": "sin(${1:float})",
            "trigger": "sin\tfloat\n(float)"
        },
        {
            "contents": "sin(${1:vector4})",
            "trigger": "sin\tvector4\n(vector4)"
        },
        {
            "contents": "sin(${1:vector2})",
            "trigger": "sin\tvector2\n(vector2)"
        },
        {
            "contents": "sin(${1:vector})",
            "trigger": "sin\tvector\n(vector)"
        },
        {
            "contents": "sinh(${1:float})",
            "trigger": "sinh\tfloat\n(float)"
        },
        {
            "contents": "sinh(${1:vector4})",
            "trigger": "sinh\tvector4\n(vector4)"
        },
        {
            "contents": "sinh(${1:vector2})",
            "trigger": "sinh\tvector2\n(vector2)"
        },
        {
            "contents": "sinh(${1:vector})",
            "trigger": "sinh\tvector\n(vector)"
        },
        {
            "contents": "sleep(${1:int})",
            "trigger": "sleep\tvoid\n(int)"
        },
        {
            "contents": "slerp(${1:vector4}, ${2:vector4}, ${3:float})",
            "trigger": "slerp\tvector4\n(vector4; vector4; float)"
        },
        {
            "contents": "slice(${1:string}, ${2:int}, ${3:int})",
            "trigger": "slice\tstring\n(string; int; int)"
        },
        {
            "contents": "slice(${1:string}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tstring\n(string; int; int; int)"
        },
        {
            "contents": "slice(${1:string}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tstring\n(string; int; int; int; int; int; int)"
        },
        {
            "contents": "slice(${1:matrix2[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tmatrix2[]\n(matrix2[]; int; int)"
        },
        {
            "contents": "slice(${1:matrix2[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tmatrix2[]\n(matrix2[]; int; int; int)"
        },
        {
            "contents": "slice(${1:matrix2[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tmatrix2[]\n(matrix2[]; int; int; int; int; int; int)"
        },
        {
            "contents": "slice(${1:matrix3[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tmatrix3[]\n(matrix3[]; int; int)"
        },
        {
            "contents": "slice(${1:matrix3[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tmatrix3[]\n(matrix3[]; int; int; int)"
        },
        {
            "contents": "slice(${1:matrix3[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tmatrix3[]\n(matrix3[]; int; int; int; int; int; int)"
        },
        {
            "contents": "slice(${1:matrix[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tmatrix[]\n(matrix[]; int; int)"
        },
        {
            "contents": "slice(${1:matrix[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tmatrix[]\n(matrix[]; int; int; int)"
        },
        {
            "contents": "slice(${1:matrix[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tmatrix[]\n(matrix[]; int; int; int; int; int; int)"
        },
        {
            "contents": "slice(${1:float[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tfloat[]\n(float[]; int; int)"
        },
        {
            "contents": "slice(${1:float[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tfloat[]\n(float[]; int; int; int)"
        },
        {
            "contents": "slice(${1:float[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tfloat[]\n(float[]; int; int; int; int; int; int)"
        },
        {
            "contents": "slice(${1:int[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tint[]\n(int[]; int; int)"
        },
        {
            "contents": "slice(${1:int[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tint[]\n(int[]; int; int; int)"
        },
        {
            "contents": "slice(${1:int[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tint[]\n(int[]; int; int; int; int; int; int)"
        },
        {
            "contents": "slice(${1:vector4[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tvector4[]\n(vector4[]; int; int)"
        },
        {
            "contents": "slice(${1:vector4[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tvector4[]\n(vector4[]; int; int; int)"
        },
        {
            "contents": "slice(${1:vector4[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tvector4[]\n(vector4[]; int; int; int; int; int; int)"
        },
        {
            "contents": "slice(${1:string[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tstring[]\n(string[]; int; int)"
        },
        {
            "contents": "slice(${1:string[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tstring[]\n(string[]; int; int; int)"
        },
        {
            "contents": "slice(${1:string[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tstring[]\n(string[]; int; int; int; int; int; int)"
        },
        {
            "contents": "slice(${1:vector2[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tvector2[]\n(vector2[]; int; int)"
        },
        {
            "contents": "slice(${1:vector2[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tvector2[]\n(vector2[]; int; int; int)"
        },
        {
            "contents": "slice(${1:vector2[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tvector2[]\n(vector2[]; int; int; int; int; int; int)"
        },
        {
            "contents": "slice(${1:vector[]}, ${2:int}, ${3:int})",
            "trigger": "slice\tvector[]\n(vector[]; int; int)"
        },
        {
            "contents": "slice(${1:vector[]}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "slice\tvector[]\n(vector[]; int; int; int)"
        },
        {
            "contents": "slice(${1:vector[]}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "slice\tvector[]\n(vector[]; int; int; int; int; int; int)"
        },
        {
            "contents": "slideframe(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:vector})",
            "trigger": "slideframe\tvector\n(vector; vector; vector; vector; vector)"
        },
        {
            "contents": "smooth(${1:float}, ${2:float}, ${3:float})",
            "trigger": "smooth\tfloat\n(float; float; float)"
        },
        {
            "contents": "smooth(${1:float}, ${2:float}, ${3:float}, ${4:float})",
            "trigger": "smooth\tfloat\n(float; float; float; float)"
        },
        {
            "contents": "smoothrotation(${1:int}, ${2:vector}, ${3:vector})",
            "trigger": "smoothrotation\tvector\n(int; vector; vector)"
        },
        {
            "contents": "snoise(${1:vector})",
            "trigger": "snoise\tfloat\n(vector)"
        },
        {
            "contents": "snoise(${1:vector}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "snoise\tfloat\n(vector; int; float; float)"
        },
        {
            "contents": "snoise(${1:vector})",
            "trigger": "snoise\tvector\n(vector)"
        },
        {
            "contents": "snoise(${1:vector}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "snoise\tvector\n(vector; int; float; float)"
        },
        {
            "contents": "solid_angle(${1:bsdf}, ${2:int})",
            "trigger": "solid_angle\tfloat\n(bsdf; int)"
        },
        {
            "contents": "solvecubic(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:float &}, ${6:float &}, ${7:float &})",
            "trigger": "solvecubic\tint\n(float; float; float; float; float &; float &; float &)"
        },
        {
            "contents": "solvecubic(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:vector2 &}, ${6:vector2 &}, ${7:vector2 &})",
            "trigger": "solvecubic\tint\n(float; float; float; float; vector2 &; vector2 &; vector2 &)"
        },
        {
            "contents": "solvepoly(${1:float[]}, ${2:float[] &})",
            "trigger": "solvepoly\tint\n(float[]; float[] &)"
        },
        {
            "contents": "solvepoly(${1:float[]}, ${2:float[] &}, ${3:int})",
            "trigger": "solvepoly\tint\n(float[]; float[] &; int)"
        },
        {
            "contents": "solvequadratic(${1:float}, ${2:float}, ${3:float}, ${4:float &}, ${5:float &})",
            "trigger": "solvequadratic\tint\n(float; float; float; float &; float &)"
        },
        {
            "contents": "solvequadratic(${1:float}, ${2:float}, ${3:float}, ${4:vector2 &}, ${5:vector2 &})",
            "trigger": "solvequadratic\tint\n(float; float; float; vector2 &; vector2 &)"
        },
        {
            "contents": "sort(${1:float[]})",
            "trigger": "sort\tfloat[]\n(float[])"
        },
        {
            "contents": "sort(${1:int[]})",
            "trigger": "sort\tint[]\n(int[])"
        },
        {
            "contents": "sort(${1:string[]})",
            "trigger": "sort\tstring[]\n(string[])"
        },
        {
            "contents": "specular(${1:vector})",
            "trigger": "specular\tbsdf\n(vector)"
        },
        {
            "contents": "specular(${1:vector}, ${2:...})",
            "trigger": "specular\tbsdf\n(vector; ...)"
        },
        {
            "contents": "specularBRDF(${1:vector}, ${2:vector}, ${3:vector}, ${4:float})",
            "trigger": "specularBRDF\tfloat\n(vector; vector; vector; float)"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:float})",
            "trigger": "spline\tfloat\n(string; float; float)"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "spline\tfloat\n(string; float; float; ...)"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:float[]})",
            "trigger": "spline\tfloat\n(string; float; float[])"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:float[]}, ${4:...})",
            "trigger": "spline\tfloat\n(string; float; float[]; ...)"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:float[]})",
            "trigger": "spline\tfloat\n(string[]; float; float[])"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:float[]}, ${4:...})",
            "trigger": "spline\tfloat\n(string[]; float; float[]; ...)"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:float[]}, ${4:float[]})",
            "trigger": "spline\tfloat\n(string[]; float; float[]; float[])"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:float[]}, ${4:float[]}, ${5:...})",
            "trigger": "spline\tfloat\n(string[]; float; float[]; float[]; ...)"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:vector4})",
            "trigger": "spline\tvector4\n(string; float; vector4)"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:vector4}, ${4:...})",
            "trigger": "spline\tvector4\n(string; float; vector4; ...)"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:vector4[]})",
            "trigger": "spline\tvector4\n(string; float; vector4[])"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:vector4[]}, ${4:...})",
            "trigger": "spline\tvector4\n(string; float; vector4[]; ...)"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:vector4[]})",
            "trigger": "spline\tvector4\n(string[]; float; vector4[])"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:vector4[]}, ${4:...})",
            "trigger": "spline\tvector4\n(string[]; float; vector4[]; ...)"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:vector4[]}, ${4:float[]})",
            "trigger": "spline\tvector4\n(string[]; float; vector4[]; float[])"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:vector4[]}, ${4:float[]}, ${5:...})",
            "trigger": "spline\tvector4\n(string[]; float; vector4[]; float[]; ...)"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:vector})",
            "trigger": "spline\tvector\n(string; float; vector)"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:vector}, ${4:...})",
            "trigger": "spline\tvector\n(string; float; vector; ...)"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:vector[]})",
            "trigger": "spline\tvector\n(string; float; vector[])"
        },
        {
            "contents": "spline(${1:string}, ${2:float}, ${3:vector[]}, ${4:...})",
            "trigger": "spline\tvector\n(string; float; vector[]; ...)"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:vector[]})",
            "trigger": "spline\tvector\n(string[]; float; vector[])"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:vector[]}, ${4:...})",
            "trigger": "spline\tvector\n(string[]; float; vector[]; ...)"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:vector[]}, ${4:float[]})",
            "trigger": "spline\tvector\n(string[]; float; vector[]; float[])"
        },
        {
            "contents": "spline(${1:string[]}, ${2:float}, ${3:vector[]}, ${4:float[]}, ${5:...})",
            "trigger": "spline\tvector\n(string[]; float; vector[]; float[]; ...)"
        },
        {
            "contents": "split(${1:string})",
            "trigger": "split\tstring[]\n(string)"
        },
        {
            "contents": "split(${1:string}, ${2:string})",
            "trigger": "split\tstring[]\n(string; string)"
        },
        {
            "contents": "split(${1:string}, ${2:string}, ${3:int})",
            "trigger": "split\tstring[]\n(string; string; int)"
        },
        {
            "contents": "split_bsdf(${1:bsdf[] &}, ${2:bsdf}, ${3:float[] &}, ${4:int}, ${5:int}, ${6:float}, ${7:float[]})",
            "trigger": "split_bsdf\tvoid\n(bsdf[] &; bsdf; float[] &; int; int; float; float[])"
        },
        {
            "contents": "split_bsdf(${1:bsdf[] &}, ${2:bsdf}, ${3:float[] &}, ${4:int}, ${5:int}, ${6:float})",
            "trigger": "split_bsdf\tvoid\n(bsdf[] &; bsdf; float[] &; int; int; float)"
        },
        {
            "contents": "split_bsdf(${1:bsdf[] &}, ${2:bsdf}, ${3:float[] &}, ${4:int}, ${5:int})",
            "trigger": "split_bsdf\tvoid\n(bsdf[] &; bsdf; float[] &; int; int)"
        },
        {
            "contents": "split_bsdf(${1:bsdf[] &}, ${2:bsdf}, ${3:float[] &}, ${4:int})",
            "trigger": "split_bsdf\tvoid\n(bsdf[] &; bsdf; float[] &; int)"
        },
        {
            "contents": "split_bsdf(${1:bsdf[] &}, ${2:bsdf}, ${3:float[] &})",
            "trigger": "split_bsdf\tvoid\n(bsdf[] &; bsdf; float[] &)"
        },
        {
            "contents": "splitpath(${1:string}, ${2:string &}, ${3:string &})",
            "trigger": "splitpath\tvoid\n(string; string &; string &)"
        },
        {
            "contents": "sprintf(${1:string})",
            "trigger": "sprintf\tstring\n(string)"
        },
        {
            "contents": "sprintf(${1:string}, ${2:...})",
            "trigger": "sprintf\tstring\n(string; ...)"
        },
        {
            "contents": "sqrt(${1:float})",
            "trigger": "sqrt\tfloat\n(float)"
        },
        {
            "contents": "sqrt(${1:vector4})",
            "trigger": "sqrt\tvector4\n(vector4)"
        },
        {
            "contents": "sqrt(${1:vector2})",
            "trigger": "sqrt\tvector2\n(vector2)"
        },
        {
            "contents": "sqrt(${1:vector})",
            "trigger": "sqrt\tvector\n(vector)"
        },
        {
            "contents": "sssapprox(${1:vector}, ${2:float}, ${3:float}, ${4:float})",
            "trigger": "sssapprox\tbsdf\n(vector; float; float; float)"
        },
        {
            "contents": "sssapprox(${1:vector}, ${2:float}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "sssapprox\tbsdf\n(vector; float; float; float; ...)"
        },
        {
            "contents": "startswith(${1:string}, ${2:string})",
            "trigger": "startswith\tint\n(string; string)"
        },
        {
            "contents": "strip(${1:string})",
            "trigger": "strip\tstring\n(string)"
        },
        {
            "contents": "strip(${1:string}, ${2:string})",
            "trigger": "strip\tstring\n(string; string)"
        },
        {
            "contents": "strlen(${1:string})",
            "trigger": "strlen\tint\n(string)"
        },
        {
            "contents": "sum(${1:float})",
            "trigger": "sum\tfloat\n(float)"
        },
        {
            "contents": "sum(${1:vector4})",
            "trigger": "sum\tfloat\n(vector4)"
        },
        {
            "contents": "sum(${1:vector2})",
            "trigger": "sum\tfloat\n(vector2)"
        },
        {
            "contents": "sum(${1:vector})",
            "trigger": "sum\tfloat\n(vector)"
        },
        {
            "contents": "sum(${1:float[]})",
            "trigger": "sum\tfloat\n(float[])"
        },
        {
            "contents": "sum(${1:int})",
            "trigger": "sum\tint\n(int)"
        },
        {
            "contents": "sum(${1:int[]})",
            "trigger": "sum\tint\n(int[])"
        },
        {
            "contents": "sum(${1:vector4[]})",
            "trigger": "sum\tvector4\n(vector4[])"
        },
        {
            "contents": "sum(${1:vector2[]})",
            "trigger": "sum\tvector2\n(vector2[])"
        },
        {
            "contents": "sum(${1:vector[]})",
            "trigger": "sum\tvector\n(vector[])"
        },
        {
            "contents": "switch(${1:bsdf}, ${2:bsdf})",
            "trigger": "switch\tbsdf\n(bsdf; bsdf)"
        },
        {
            "contents": "swizzle(${1:vector4}, ${2:int}, ${3:int}, ${4:int}, ${5:int})",
            "trigger": "swizzle\tvector4\n(vector4; int; int; int; int)"
        },
        {
            "contents": "swizzle(${1:vector2}, ${2:int}, ${3:int})",
            "trigger": "swizzle\tvector2\n(vector2; int; int)"
        },
        {
            "contents": "swizzle(${1:vector}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "swizzle\tvector\n(vector; int; int; int)"
        },
        {
            "contents": "tan(${1:float})",
            "trigger": "tan\tfloat\n(float)"
        },
        {
            "contents": "tan(${1:vector4})",
            "trigger": "tan\tvector4\n(vector4)"
        },
        {
            "contents": "tan(${1:vector2})",
            "trigger": "tan\tvector2\n(vector2)"
        },
        {
            "contents": "tan(${1:vector})",
            "trigger": "tan\tvector\n(vector)"
        },
        {
            "contents": "tanh(${1:float})",
            "trigger": "tanh\tfloat\n(float)"
        },
        {
            "contents": "tanh(${1:vector4})",
            "trigger": "tanh\tvector4\n(vector4)"
        },
        {
            "contents": "tanh(${1:vector2})",
            "trigger": "tanh\tvector2\n(vector2)"
        },
        {
            "contents": "tanh(${1:vector})",
            "trigger": "tanh\tvector\n(vector)"
        },
        {
            "contents": "tet_adjacent(${1:int}, ${2:int}, ${3:int})",
            "trigger": "tet_adjacent\tint\n(int; int; int)"
        },
        {
            "contents": "tet_adjacent(${1:string}, ${2:int}, ${3:int})",
            "trigger": "tet_adjacent\tint\n(string; int; int)"
        },
        {
            "contents": "tet_faceindex(${1:int}, ${2:int})",
            "trigger": "tet_faceindex\tint\n(int; int)"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:matrix3 &})",
            "trigger": "teximport\tint\n(string; string; matrix3 &)"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:matrix &})",
            "trigger": "teximport\tint\n(string; string; matrix &)"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:float &})",
            "trigger": "teximport\tint\n(string; string; float &)"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:int &})",
            "trigger": "teximport\tint\n(string; string; int &)"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:vector4 &})",
            "trigger": "teximport\tint\n(string; string; vector4 &)"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:string &})",
            "trigger": "teximport\tint\n(string; string; string &)"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:vector &})",
            "trigger": "teximport\tint\n(string; string; vector &)"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:int[] &})",
            "trigger": "teximport\tint\n(string; string; int[] &)"
        },
        {
            "contents": "teximport(${1:string}, ${2:string}, ${3:string[] &})",
            "trigger": "teximport\tint\n(string; string; string[] &)"
        },
        {
            "contents": "texprintf(${1:float}, ${2:float}, ${3:string})",
            "trigger": "texprintf\tstring\n(float; float; string)"
        },
        {
            "contents": "texprintf(${1:float}, ${2:float}, ${3:string}, ${4:...})",
            "trigger": "texprintf\tstring\n(float; float; string; ...)"
        },
        {
            "contents": "texture(${1:string}, ${2:float}, ${3:float})",
            "trigger": "texture\tvector4\n(string; float; float)"
        },
        {
            "contents": "texture(${1:string}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "texture\tvector4\n(string; float; float; ...)"
        },
        {
            "contents": "texture(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float})",
            "trigger": "texture\tvector4\n(string; float; float; float; float; float; float; float; float)"
        },
        {
            "contents": "texture(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:...})",
            "trigger": "texture\tvector4\n(string; float; float; float; float; float; float; float; float; ...)"
        },
        {
            "contents": "texture(${1:string}, ${2:float}, ${3:float})",
            "trigger": "texture\tvector\n(string; float; float)"
        },
        {
            "contents": "texture(${1:string}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "texture\tvector\n(string; float; float; ...)"
        },
        {
            "contents": "texture(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float})",
            "trigger": "texture\tvector\n(string; float; float; float; float; float; float; float; float)"
        },
        {
            "contents": "texture(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:float}, ${6:float}, ${7:float}, ${8:float}, ${9:float}, ${10:...})",
            "trigger": "texture\tvector\n(string; float; float; float; float; float; float; float; float; ...)"
        },
        {
            "contents": "texture3d(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "texture3d\tmatrix3\n(string; string; vector)"
        },
        {
            "contents": "texture3d(${1:string}, ${2:string}, ${3:vector}, ${4:...})",
            "trigger": "texture3d\tmatrix3\n(string; string; vector; ...)"
        },
        {
            "contents": "texture3d(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "texture3d\tmatrix\n(string; string; vector)"
        },
        {
            "contents": "texture3d(${1:string}, ${2:string}, ${3:vector}, ${4:...})",
            "trigger": "texture3d\tmatrix\n(string; string; vector; ...)"
        },
        {
            "contents": "texture3d(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "texture3d\tfloat\n(string; string; vector)"
        },
        {
            "contents": "texture3d(${1:string}, ${2:string}, ${3:vector}, ${4:...})",
            "trigger": "texture3d\tfloat\n(string; string; vector; ...)"
        },
        {
            "contents": "texture3d(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "texture3d\tvector4\n(string; string; vector)"
        },
        {
            "contents": "texture3d(${1:string}, ${2:string}, ${3:vector}, ${4:...})",
            "trigger": "texture3d\tvector4\n(string; string; vector; ...)"
        },
        {
            "contents": "texture3d(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "texture3d\tvector\n(string; string; vector)"
        },
        {
            "contents": "texture3d(${1:string}, ${2:string}, ${3:vector}, ${4:...})",
            "trigger": "texture3d\tvector\n(string; string; vector; ...)"
        },
        {
            "contents": "texture3dBox(${1:string}, ${2:string}, ${3:vector &}, ${4:vector &})",
            "trigger": "texture3dBox\tvoid\n(string; string; vector &; vector &)"
        },
        {
            "contents": "texture3dBox(${1:string}, ${2:string}, ${3:vector &}, ${4:vector &}, ${5:...})",
            "trigger": "texture3dBox\tvoid\n(string; string; vector &; vector &; ...)"
        },
        {
            "contents": "titlecase(${1:string})",
            "trigger": "titlecase\tstring\n(string)"
        },
        {
            "contents": "toNDC(${1:string}, ${2:vector})",
            "trigger": "toNDC\tvector\n(string; vector)"
        },
        {
            "contents": "toNDC(${1:vector})",
            "trigger": "toNDC\tvector\n(vector)"
        },
        {
            "contents": "tolower(${1:string})",
            "trigger": "tolower\tstring\n(string)"
        },
        {
            "contents": "toupper(${1:string})",
            "trigger": "toupper\tstring\n(string)"
        },
        {
            "contents": "translate(${1:matrix &}, ${2:vector4})",
            "trigger": "translate\tvoid\n(matrix &; vector4)"
        },
        {
            "contents": "translate(${1:matrix &}, ${2:vector})",
            "trigger": "translate\tvoid\n(matrix &; vector)"
        },
        {
            "contents": "translucent(${1:vector}, ${2:vector})",
            "trigger": "translucent\tbsdf\n(vector; vector)"
        },
        {
            "contents": "translucent(${1:vector}, ${2:vector}, ${3:...})",
            "trigger": "translucent\tbsdf\n(vector; vector; ...)"
        },
        {
            "contents": "transpose(${1:matrix2 &})",
            "trigger": "transpose\tvoid\n(matrix2 &)"
        },
        {
            "contents": "transpose(${1:matrix2})",
            "trigger": "transpose\tmatrix2\n(matrix2)"
        },
        {
            "contents": "transpose(${1:matrix3 &})",
            "trigger": "transpose\tvoid\n(matrix3 &)"
        },
        {
            "contents": "transpose(${1:matrix3})",
            "trigger": "transpose\tmatrix3\n(matrix3)"
        },
        {
            "contents": "transpose(${1:matrix &})",
            "trigger": "transpose\tvoid\n(matrix &)"
        },
        {
            "contents": "transpose(${1:matrix})",
            "trigger": "transpose\tmatrix\n(matrix)"
        },
        {
            "contents": "trunc(${1:float})",
            "trigger": "trunc\tfloat\n(float)"
        },
        {
            "contents": "trunc(${1:vector4})",
            "trigger": "trunc\tvector4\n(vector4)"
        },
        {
            "contents": "trunc(${1:vector2})",
            "trigger": "trunc\tvector2\n(vector2)"
        },
        {
            "contents": "trunc(${1:vector})",
            "trigger": "trunc\tvector\n(vector)"
        },
        {
            "contents": "tw_nspace(${1:vector})",
            "trigger": "tw_nspace\tvector\n(vector)"
        },
        {
            "contents": "tw_space()",
            "trigger": "tw_space\tmatrix\n(void)"
        },
        {
            "contents": "tw_space(${1:vector4})",
            "trigger": "tw_space\tvector4\n(vector4)"
        },
        {
            "contents": "tw_space(${1:vector})",
            "trigger": "tw_space\tvector\n(vector)"
        },
        {
            "contents": "tw_vspace(${1:vector})",
            "trigger": "tw_vspace\tvector\n(vector)"
        },
        {
            "contents": "uniqueval(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "uniqueval\tint\n(int; string; string; int)"
        },
        {
            "contents": "uniqueval(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "uniqueval\tint\n(string; string; string; int)"
        },
        {
            "contents": "uniqueval(${1:int}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "uniqueval\tstring\n(int; string; string; int)"
        },
        {
            "contents": "uniqueval(${1:string}, ${2:string}, ${3:string}, ${4:int})",
            "trigger": "uniqueval\tstring\n(string; string; string; int)"
        },
        {
            "contents": "unpack_intfromsafefloat(${1:float})",
            "trigger": "unpack_intfromsafefloat\tint\n(float)"
        },
        {
            "contents": "unserialize(${1:float[]})",
            "trigger": "unserialize\tmatrix2[]\n(float[])"
        },
        {
            "contents": "unserialize(${1:float[]})",
            "trigger": "unserialize\tmatrix3[]\n(float[])"
        },
        {
            "contents": "unserialize(${1:float[]})",
            "trigger": "unserialize\tmatrix[]\n(float[])"
        },
        {
            "contents": "unserialize(${1:float[]})",
            "trigger": "unserialize\tvector4[]\n(float[])"
        },
        {
            "contents": "unserialize(${1:float[]})",
            "trigger": "unserialize\tvector2[]\n(float[])"
        },
        {
            "contents": "unserialize(${1:float[]})",
            "trigger": "unserialize\tvector[]\n(float[])"
        },
        {
            "contents": "upush(${1:matrix2[] &}, ${2:matrix2})",
            "trigger": "upush\tvoid\n(matrix2[] &; matrix2)"
        },
        {
            "contents": "upush(${1:matrix3[] &}, ${2:matrix3})",
            "trigger": "upush\tvoid\n(matrix3[] &; matrix3)"
        },
        {
            "contents": "upush(${1:matrix[] &}, ${2:matrix})",
            "trigger": "upush\tvoid\n(matrix[] &; matrix)"
        },
        {
            "contents": "upush(${1:bsdf[] &}, ${2:bsdf})",
            "trigger": "upush\tvoid\n(bsdf[] &; bsdf)"
        },
        {
            "contents": "upush(${1:float[] &}, ${2:float})",
            "trigger": "upush\tvoid\n(float[] &; float)"
        },
        {
            "contents": "upush(${1:int[] &}, ${2:int})",
            "trigger": "upush\tvoid\n(int[] &; int)"
        },
        {
            "contents": "upush(${1:vector4[] &}, ${2:vector4})",
            "trigger": "upush\tvoid\n(vector4[] &; vector4)"
        },
        {
            "contents": "upush(${1:string[] &}, ${2:string})",
            "trigger": "upush\tvoid\n(string[] &; string)"
        },
        {
            "contents": "upush(${1:vector2[] &}, ${2:vector2})",
            "trigger": "upush\tvoid\n(vector2[] &; vector2)"
        },
        {
            "contents": "upush(${1:vector[] &}, ${2:vector})",
            "trigger": "upush\tvoid\n(vector[] &; vector)"
        },
        {
            "contents": "uvdist(${1:int}, ${2:string}, ${3:vector}, ${4:int &}, ${5:vector &})",
            "trigger": "uvdist\tfloat\n(int; string; vector; int &; vector &)"
        },
        {
            "contents": "uvdist(${1:int}, ${2:string}, ${3:vector}, ${4:int &}, ${5:vector &}, ${6:float})",
            "trigger": "uvdist\tfloat\n(int; string; vector; int &; vector &; float)"
        },
        {
            "contents": "uvdist(${1:string}, ${2:string}, ${3:vector}, ${4:int &}, ${5:vector &})",
            "trigger": "uvdist\tfloat\n(string; string; vector; int &; vector &)"
        },
        {
            "contents": "uvdist(${1:string}, ${2:string}, ${3:vector}, ${4:int &}, ${5:vector &}, ${6:float})",
            "trigger": "uvdist\tfloat\n(string; string; vector; int &; vector &; float)"
        },
        {
            "contents": "uvintersect(${1:int}, ${2:string}, ${3:vector}, ${4:vector}, ${5:vector &}, ${6:vector &})",
            "trigger": "uvintersect\tint\n(int; string; vector; vector; vector &; vector &)"
        },
        {
            "contents": "uvintersect(${1:string}, ${2:string}, ${3:vector}, ${4:vector}, ${5:vector &}, ${6:vector &})",
            "trigger": "uvintersect\tint\n(string; string; vector; vector; vector &; vector &)"
        },
        {
            "contents": "uvsample(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tmatrix2\n(int; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:string}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tmatrix2\n(string; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tmatrix3\n(int; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:string}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tmatrix3\n(string; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tmatrix\n(int; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:string}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tmatrix\n(string; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tfloat\n(int; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:string}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tfloat\n(string; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tint\n(int; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:string}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tint\n(string; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tvector4\n(int; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:string}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tvector4\n(string; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tvector2\n(int; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:string}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tvector2\n(string; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tvector\n(int; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:string}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tvector\n(string; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tmatrix2[]\n(int; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:string}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tmatrix2[]\n(string; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tmatrix3[]\n(int; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:string}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tmatrix3[]\n(string; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tmatrix[]\n(int; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:string}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tmatrix[]\n(string; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tfloat[]\n(int; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:string}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tfloat[]\n(string; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tint[]\n(int; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:string}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tint[]\n(string; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tvector4[]\n(int; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:string}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tvector4[]\n(string; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tvector2[]\n(int; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:string}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tvector2[]\n(string; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:int}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tvector[]\n(int; string; string; vector)"
        },
        {
            "contents": "uvsample(${1:string}, ${2:string}, ${3:string}, ${4:vector})",
            "trigger": "uvsample\tvector[]\n(string; string; string; vector)"
        },
        {
            "contents": "uvunwrap(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:vector &}, ${6:vector &})",
            "trigger": "uvunwrap\tint\n(string; float; float; float; vector &; vector &)"
        },
        {
            "contents": "uvunwrap(${1:string}, ${2:float}, ${3:float}, ${4:float}, ${5:vector &}, ${6:vector &}, ${7:vector &}, ${8:vector &})",
            "trigger": "uvunwrap\tint\n(string; float; float; float; vector &; vector &; vector &; vector &)"
        },
        {
            "contents": "variance(${1:float}, ${2:float &}, ${3:int &})",
            "trigger": "variance\tfloat\n(float; float &; int &)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix2\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix2\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix2\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix2\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix3\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix3\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix3\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix3\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tfloat\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tfloat\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tfloat\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tfloat\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tint\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tint\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tint\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tint\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector4\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector4\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector4\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector4\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tstring\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tstring\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tstring\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tstring\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector2\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector2\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector2\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector2\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix2[]\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix2[]\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix2[]\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix2[]\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix3[]\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix3[]\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix3[]\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix3[]\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix[]\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix[]\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tmatrix[]\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tmatrix[]\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tfloat[]\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tfloat[]\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tfloat[]\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tfloat[]\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tint[]\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tint[]\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tint[]\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tint[]\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector4[]\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector4[]\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector4[]\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector4[]\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tstring[]\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tstring[]\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tstring[]\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tstring[]\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector2[]\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector2[]\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector2[]\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector2[]\n(string; string; int; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector[]\n(int; string; int)"
        },
        {
            "contents": "vertex(${1:int}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector[]\n(int; string; int; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int})",
            "trigger": "vertex\tvector[]\n(string; string; int)"
        },
        {
            "contents": "vertex(${1:string}, ${2:string}, ${3:int}, ${4:int})",
            "trigger": "vertex\tvector[]\n(string; string; int; int)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix2\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix2\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix3\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix3\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tfloat\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tfloat\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tint\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tint\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector4\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector4\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tstring\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tstring\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector2\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector2\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix2[]\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix2[]\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix3[]\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix3[]\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix[]\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tmatrix[]\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tfloat[]\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tfloat[]\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tint[]\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tint[]\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector4[]\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector4[]\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tstring[]\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tstring[]\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector2[]\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector2[]\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:int}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector[]\n(int; string; int; int &)"
        },
        {
            "contents": "vertexattrib(${1:string}, ${2:string}, ${3:int}, ${4:int &})",
            "trigger": "vertexattrib\tvector[]\n(string; string; int; int &)"
        },
        {
            "contents": "vertexattribsize(${1:int}, ${2:string})",
            "trigger": "vertexattribsize\tint\n(int; string)"
        },
        {
            "contents": "vertexattribsize(${1:string}, ${2:string})",
            "trigger": "vertexattribsize\tint\n(string; string)"
        },
        {
            "contents": "vertexattribtype(${1:int}, ${2:string})",
            "trigger": "vertexattribtype\tint\n(int; string)"
        },
        {
            "contents": "vertexattribtype(${1:string}, ${2:string})",
            "trigger": "vertexattribtype\tint\n(string; string)"
        },
        {
            "contents": "vertexattribtypeinfo(${1:int}, ${2:string})",
            "trigger": "vertexattribtypeinfo\tstring\n(int; string)"
        },
        {
            "contents": "vertexattribtypeinfo(${1:string}, ${2:string})",
            "trigger": "vertexattribtypeinfo\tstring\n(string; string)"
        },
        {
            "contents": "vertexhedge(${1:int}, ${2:int})",
            "trigger": "vertexhedge\tint\n(int; int)"
        },
        {
            "contents": "vertexhedge(${1:string}, ${2:int})",
            "trigger": "vertexhedge\tint\n(string; int)"
        },
        {
            "contents": "vertexindex(${1:int}, ${2:int}, ${3:int})",
            "trigger": "vertexindex\tint\n(int; int; int)"
        },
        {
            "contents": "vertexindex(${1:string}, ${2:int}, ${3:int})",
            "trigger": "vertexindex\tint\n(string; int; int)"
        },
        {
            "contents": "vertexnext(${1:int}, ${2:int})",
            "trigger": "vertexnext\tint\n(int; int)"
        },
        {
            "contents": "vertexnext(${1:string}, ${2:int})",
            "trigger": "vertexnext\tint\n(string; int)"
        },
        {
            "contents": "vertexpoint(${1:int}, ${2:int})",
            "trigger": "vertexpoint\tint\n(int; int)"
        },
        {
            "contents": "vertexpoint(${1:string}, ${2:int})",
            "trigger": "vertexpoint\tint\n(string; int)"
        },
        {
            "contents": "vertexprev(${1:int}, ${2:int})",
            "trigger": "vertexprev\tint\n(int; int)"
        },
        {
            "contents": "vertexprev(${1:string}, ${2:int})",
            "trigger": "vertexprev\tint\n(string; int)"
        },
        {
            "contents": "vertexprim(${1:int}, ${2:int})",
            "trigger": "vertexprim\tint\n(int; int)"
        },
        {
            "contents": "vertexprim(${1:string}, ${2:int})",
            "trigger": "vertexprim\tint\n(string; int)"
        },
        {
            "contents": "vertexprimindex(${1:int}, ${2:int})",
            "trigger": "vertexprimindex\tint\n(int; int)"
        },
        {
            "contents": "vertexprimindex(${1:string}, ${2:int})",
            "trigger": "vertexprimindex\tint\n(string; int)"
        },
        {
            "contents": "vnoise(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:int &}, ${6:float &}, ${7:float &}, ${8:float &}, ${9:float &}, ${10:float &}, ${11:float &})",
            "trigger": "vnoise\tvoid\n(float; float; float; float; int &; float &; float &; float &; float &; float &; float &)"
        },
        {
            "contents": "vnoise(${1:float}, ${2:float}, ${3:float}, ${4:float}, ${5:int &}, ${6:float &}, ${7:float &}, ${8:float &}, ${9:float &}, ${10:float &}, ${11:float &}, ${12:int}, ${13:int})",
            "trigger": "vnoise\tvoid\n(float; float; float; float; int &; float &; float &; float &; float &; float &; float &; int; int)"
        },
        {
            "contents": "vnoise(${1:float}, ${2:float}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:float &})",
            "trigger": "vnoise\tvoid\n(float; float; int &; float &; float &; float &; float &)"
        },
        {
            "contents": "vnoise(${1:float}, ${2:float}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:float &}, ${8:int})",
            "trigger": "vnoise\tvoid\n(float; float; int &; float &; float &; float &; float &; int)"
        },
        {
            "contents": "vnoise(${1:vector4}, ${2:vector4}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:vector4 &}, ${7:vector4 &})",
            "trigger": "vnoise\tvoid\n(vector4; vector4; int &; float &; float &; vector4 &; vector4 &)"
        },
        {
            "contents": "vnoise(${1:vector4}, ${2:vector4}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:vector4 &}, ${7:vector4 &}, ${8:int}, ${9:int}, ${10:int}, ${11:int})",
            "trigger": "vnoise\tvoid\n(vector4; vector4; int &; float &; float &; vector4 &; vector4 &; int; int; int; int)"
        },
        {
            "contents": "vnoise(${1:vector4}, ${2:vector4}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:vector4 &}, ${7:vector4 &}, ${8:vector4})",
            "trigger": "vnoise\tvoid\n(vector4; vector4; int &; float &; float &; vector4 &; vector4 &; vector4)"
        },
        {
            "contents": "vnoise(${1:vector}, ${2:vector}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:vector &}, ${7:vector &})",
            "trigger": "vnoise\tvoid\n(vector; vector; int &; float &; float &; vector &; vector &)"
        },
        {
            "contents": "vnoise(${1:vector}, ${2:vector}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:vector &}, ${7:vector &}, ${8:int}, ${9:int}, ${10:int})",
            "trigger": "vnoise\tvoid\n(vector; vector; int &; float &; float &; vector &; vector &; int; int; int)"
        },
        {
            "contents": "vnoise(${1:vector}, ${2:vector}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:vector &}, ${7:vector &}, ${8:vector})",
            "trigger": "vnoise\tvoid\n(vector; vector; int &; float &; float &; vector &; vector &; vector)"
        },
        {
            "contents": "volume(${1:vector})",
            "trigger": "volume\tfloat\n(vector)"
        },
        {
            "contents": "volume(${1:vector}, ${2:...})",
            "trigger": "volume\tfloat\n(vector; ...)"
        },
        {
            "contents": "volumegradient(${1:int}, ${2:int}, ${3:vector})",
            "trigger": "volumegradient\tvector\n(int; int; vector)"
        },
        {
            "contents": "volumegradient(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "volumegradient\tvector\n(int; string; vector)"
        },
        {
            "contents": "volumegradient(${1:string}, ${2:int}, ${3:vector})",
            "trigger": "volumegradient\tvector\n(string; int; vector)"
        },
        {
            "contents": "volumegradient(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "volumegradient\tvector\n(string; string; vector)"
        },
        {
            "contents": "volumeindex(${1:int}, ${2:int}, ${3:vector})",
            "trigger": "volumeindex\tfloat\n(int; int; vector)"
        },
        {
            "contents": "volumeindex(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "volumeindex\tfloat\n(int; string; vector)"
        },
        {
            "contents": "volumeindex(${1:string}, ${2:int}, ${3:vector})",
            "trigger": "volumeindex\tfloat\n(string; int; vector)"
        },
        {
            "contents": "volumeindex(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "volumeindex\tfloat\n(string; string; vector)"
        },
        {
            "contents": "volumeindexorigin(${1:int}, ${2:int})",
            "trigger": "volumeindexorigin\tvector\n(int; int)"
        },
        {
            "contents": "volumeindexorigin(${1:int}, ${2:string})",
            "trigger": "volumeindexorigin\tvector\n(int; string)"
        },
        {
            "contents": "volumeindexorigin(${1:string}, ${2:int})",
            "trigger": "volumeindexorigin\tvector\n(string; int)"
        },
        {
            "contents": "volumeindexorigin(${1:string}, ${2:string})",
            "trigger": "volumeindexorigin\tvector\n(string; string)"
        },
        {
            "contents": "volumeindextopos(${1:int}, ${2:int}, ${3:vector})",
            "trigger": "volumeindextopos\tvector\n(int; int; vector)"
        },
        {
            "contents": "volumeindextopos(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "volumeindextopos\tvector\n(int; string; vector)"
        },
        {
            "contents": "volumeindextopos(${1:string}, ${2:int}, ${3:vector})",
            "trigger": "volumeindextopos\tvector\n(string; int; vector)"
        },
        {
            "contents": "volumeindextopos(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "volumeindextopos\tvector\n(string; string; vector)"
        },
        {
            "contents": "volumeindexv(${1:int}, ${2:int}, ${3:vector})",
            "trigger": "volumeindexv\tvector\n(int; int; vector)"
        },
        {
            "contents": "volumeindexv(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "volumeindexv\tvector\n(int; string; vector)"
        },
        {
            "contents": "volumeindexv(${1:string}, ${2:int}, ${3:vector})",
            "trigger": "volumeindexv\tvector\n(string; int; vector)"
        },
        {
            "contents": "volumeindexv(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "volumeindexv\tvector\n(string; string; vector)"
        },
        {
            "contents": "volumepostoindex(${1:int}, ${2:int}, ${3:vector})",
            "trigger": "volumepostoindex\tvector\n(int; int; vector)"
        },
        {
            "contents": "volumepostoindex(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "volumepostoindex\tvector\n(int; string; vector)"
        },
        {
            "contents": "volumepostoindex(${1:string}, ${2:int}, ${3:vector})",
            "trigger": "volumepostoindex\tvector\n(string; int; vector)"
        },
        {
            "contents": "volumepostoindex(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "volumepostoindex\tvector\n(string; string; vector)"
        },
        {
            "contents": "volumeres(${1:int}, ${2:int})",
            "trigger": "volumeres\tvector\n(int; int)"
        },
        {
            "contents": "volumeres(${1:int}, ${2:string})",
            "trigger": "volumeres\tvector\n(int; string)"
        },
        {
            "contents": "volumeres(${1:string}, ${2:int})",
            "trigger": "volumeres\tvector\n(string; int)"
        },
        {
            "contents": "volumeres(${1:string}, ${2:string})",
            "trigger": "volumeres\tvector\n(string; string)"
        },
        {
            "contents": "volumesample(${1:int}, ${2:int}, ${3:vector})",
            "trigger": "volumesample\tfloat\n(int; int; vector)"
        },
        {
            "contents": "volumesample(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "volumesample\tfloat\n(int; string; vector)"
        },
        {
            "contents": "volumesample(${1:string}, ${2:int}, ${3:vector})",
            "trigger": "volumesample\tfloat\n(string; int; vector)"
        },
        {
            "contents": "volumesample(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "volumesample\tfloat\n(string; string; vector)"
        },
        {
            "contents": "volumesamplev(${1:int}, ${2:int}, ${3:vector})",
            "trigger": "volumesamplev\tvector\n(int; int; vector)"
        },
        {
            "contents": "volumesamplev(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "volumesamplev\tvector\n(int; string; vector)"
        },
        {
            "contents": "volumesamplev(${1:string}, ${2:int}, ${3:vector})",
            "trigger": "volumesamplev\tvector\n(string; int; vector)"
        },
        {
            "contents": "volumesamplev(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "volumesamplev\tvector\n(string; string; vector)"
        },
        {
            "contents": "volumevoxeldiameter(${1:int}, ${2:int})",
            "trigger": "volumevoxeldiameter\tfloat\n(int; int)"
        },
        {
            "contents": "volumevoxeldiameter(${1:int}, ${2:string})",
            "trigger": "volumevoxeldiameter\tfloat\n(int; string)"
        },
        {
            "contents": "volumevoxeldiameter(${1:string}, ${2:int})",
            "trigger": "volumevoxeldiameter\tfloat\n(string; int)"
        },
        {
            "contents": "volumevoxeldiameter(${1:string}, ${2:string})",
            "trigger": "volumevoxeldiameter\tfloat\n(string; string)"
        },
        {
            "contents": "vtransform(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "vtransform\tvector\n(string; string; vector)"
        },
        {
            "contents": "vtransform(${1:string}, ${2:vector})",
            "trigger": "vtransform\tvector\n(string; vector)"
        },
        {
            "contents": "vtransform(${1:vector}, ${2:matrix})",
            "trigger": "vtransform\tvector\n(vector; matrix)"
        },
        {
            "contents": "warning(${1:string})",
            "trigger": "warning\tvoid\n(string)"
        },
        {
            "contents": "warning(${1:string}, ${2:...})",
            "trigger": "warning\tvoid\n(string; ...)"
        },
        {
            "contents": "wireblinn(${1:vector}, ${2:float})",
            "trigger": "wireblinn\tbsdf\n(vector; float)"
        },
        {
            "contents": "wireblinn(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "wireblinn\tbsdf\n(vector; float; ...)"
        },
        {
            "contents": "wirediffuse(${1:vector})",
            "trigger": "wirediffuse\tbsdf\n(vector)"
        },
        {
            "contents": "wirediffuse(${1:vector}, ${2:...})",
            "trigger": "wirediffuse\tbsdf\n(vector; ...)"
        },
        {
            "contents": "wnoise(${1:float}, ${2:float}, ${3:int &}, ${4:float &}, ${5:float &})",
            "trigger": "wnoise\tvoid\n(float; float; int &; float &; float &)"
        },
        {
            "contents": "wnoise(${1:float}, ${2:float}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:float &})",
            "trigger": "wnoise\tvoid\n(float; float; int &; float &; float &; float &; float &)"
        },
        {
            "contents": "wnoise(${1:float}, ${2:float}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:float &}, ${8:int}, ${9:int})",
            "trigger": "wnoise\tvoid\n(float; float; int &; float &; float &; float &; float &; int; int)"
        },
        {
            "contents": "wnoise(${1:float}, ${2:float}, ${3:int &}, ${4:float &}, ${5:float &}, ${6:int}, ${7:int})",
            "trigger": "wnoise\tvoid\n(float; float; int &; float &; float &; int; int)"
        },
        {
            "contents": "wnoise(${1:float}, ${2:int &}, ${3:float &}, ${4:float &})",
            "trigger": "wnoise\tvoid\n(float; int &; float &; float &)"
        },
        {
            "contents": "wnoise(${1:float}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &})",
            "trigger": "wnoise\tvoid\n(float; int &; float &; float &; float &; float &)"
        },
        {
            "contents": "wnoise(${1:float}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:int})",
            "trigger": "wnoise\tvoid\n(float; int &; float &; float &; float &; float &; int)"
        },
        {
            "contents": "wnoise(${1:float}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:int})",
            "trigger": "wnoise\tvoid\n(float; int &; float &; float &; int)"
        },
        {
            "contents": "wnoise(${1:vector4}, ${2:int &}, ${3:float &}, ${4:float &})",
            "trigger": "wnoise\tvoid\n(vector4; int &; float &; float &)"
        },
        {
            "contents": "wnoise(${1:vector4}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &})",
            "trigger": "wnoise\tvoid\n(vector4; int &; float &; float &; float &; float &)"
        },
        {
            "contents": "wnoise(${1:vector4}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:int}, ${8:int}, ${9:int}, ${10:int})",
            "trigger": "wnoise\tvoid\n(vector4; int &; float &; float &; float &; float &; int; int; int; int)"
        },
        {
            "contents": "wnoise(${1:vector4}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:int}, ${6:int}, ${7:int}, ${8:int})",
            "trigger": "wnoise\tvoid\n(vector4; int &; float &; float &; int; int; int; int)"
        },
        {
            "contents": "wnoise(${1:vector}, ${2:int &}, ${3:float &}, ${4:float &})",
            "trigger": "wnoise\tvoid\n(vector; int &; float &; float &)"
        },
        {
            "contents": "wnoise(${1:vector}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &})",
            "trigger": "wnoise\tvoid\n(vector; int &; float &; float &; float &; float &)"
        },
        {
            "contents": "wnoise(${1:vector}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &}, ${7:int}, ${8:int}, ${9:int})",
            "trigger": "wnoise\tvoid\n(vector; int &; float &; float &; float &; float &; int; int; int)"
        },
        {
            "contents": "wnoise(${1:vector}, ${2:int &}, ${3:float &}, ${4:float &}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "wnoise\tvoid\n(vector; int &; float &; float &; int; int; int)"
        },
        {
            "contents": "wo_nspace(${1:vector})",
            "trigger": "wo_nspace\tvector\n(vector)"
        },
        {
            "contents": "wo_space()",
            "trigger": "wo_space\tmatrix\n(void)"
        },
        {
            "contents": "wo_space(${1:vector4})",
            "trigger": "wo_space\tvector4\n(vector4)"
        },
        {
            "contents": "wo_space(${1:vector})",
            "trigger": "wo_space\tvector\n(vector)"
        },
        {
            "contents": "wo_vspace(${1:vector})",
            "trigger": "wo_vspace\tvector\n(vector)"
        },
        {
            "contents": "wt_nspace(${1:vector})",
            "trigger": "wt_nspace\tvector\n(vector)"
        },
        {
            "contents": "wt_space()",
            "trigger": "wt_space\tmatrix\n(void)"
        },
        {
            "contents": "wt_space(${1:vector4})",
            "trigger": "wt_space\tvector4\n(vector4)"
        },
        {
            "contents": "wt_space(${1:vector})",
            "trigger": "wt_space\tvector\n(vector)"
        },
        {
            "contents": "wt_vspace(${1:vector})",
            "trigger": "wt_vspace\tvector\n(vector)"
        },
        {
            "contents": "xnoise(${1:float})",
            "trigger": "xnoise\tfloat\n(float)"
        },
        {
            "contents": "xnoise(${1:float}, ${2:float})",
            "trigger": "xnoise\tfloat\n(float; float)"
        },
        {
            "contents": "xnoise(${1:vector4})",
            "trigger": "xnoise\tfloat\n(vector4)"
        },
        {
            "contents": "xnoise(${1:vector})",
            "trigger": "xnoise\tfloat\n(vector)"
        },
        {
            "contents": "xnoise(${1:float})",
            "trigger": "xnoise\tvector\n(float)"
        },
        {
            "contents": "xnoise(${1:float}, ${2:float})",
            "trigger": "xnoise\tvector\n(float; float)"
        },
        {
            "contents": "xnoise(${1:vector4})",
            "trigger": "xnoise\tvector\n(vector4)"
        },
        {
            "contents": "xnoise(${1:vector})",
            "trigger": "xnoise\tvector\n(vector)"
        },
        {
            "contents": "xnoised(${1:float}, ${2:float &}, ${3:float &})",
            "trigger": "xnoised\tvoid\n(float; float &; float &)"
        },
        {
            "contents": "xnoised(${1:float}, ${2:float}, ${3:float &}, ${4:float &}, ${5:float &})",
            "trigger": "xnoised\tvoid\n(float; float; float &; float &; float &)"
        },
        {
            "contents": "xnoised(${1:float}, ${2:float}, ${3:vector &}, ${4:vector &}, ${5:vector &})",
            "trigger": "xnoised\tvoid\n(float; float; vector &; vector &; vector &)"
        },
        {
            "contents": "xnoised(${1:float}, ${2:vector &}, ${3:vector &})",
            "trigger": "xnoised\tvoid\n(float; vector &; vector &)"
        },
        {
            "contents": "xnoised(${1:vector4}, ${2:float &}, ${3:float &}, ${4:float &}, ${5:float &}, ${6:float &})",
            "trigger": "xnoised\tvoid\n(vector4; float &; float &; float &; float &; float &)"
        },
        {
            "contents": "xnoised(${1:vector4}, ${2:vector &}, ${3:vector &}, ${4:vector &}, ${5:vector &}, ${6:vector &})",
            "trigger": "xnoised\tvoid\n(vector4; vector &; vector &; vector &; vector &; vector &)"
        },
        {
            "contents": "xnoised(${1:vector}, ${2:float &}, ${3:float &}, ${4:float &}, ${5:float &})",
            "trigger": "xnoised\tvoid\n(vector; float &; float &; float &; float &)"
        },
        {
            "contents": "xnoised(${1:vector}, ${2:vector &}, ${3:vector &}, ${4:vector &}, ${5:vector &})",
            "trigger": "xnoised\tvoid\n(vector; vector &; vector &; vector &; vector &)"
        },
        {
            "contents": "xyzdist(${1:int}, ${2:string}, ${3:vector})",
            "trigger": "xyzdist\tfloat\n(int; string; vector)"
        },
        {
            "contents": "xyzdist(${1:int}, ${2:string}, ${3:vector}, ${4:int &}, ${5:vector &})",
            "trigger": "xyzdist\tfloat\n(int; string; vector; int &; vector &)"
        },
        {
            "contents": "xyzdist(${1:int}, ${2:string}, ${3:vector}, ${4:int &}, ${5:vector &}, ${6:float})",
            "trigger": "xyzdist\tfloat\n(int; string; vector; int &; vector &; float)"
        },
        {
            "contents": "xyzdist(${1:int}, ${2:vector})",
            "trigger": "xyzdist\tfloat\n(int; vector)"
        },
        {
            "contents": "xyzdist(${1:int}, ${2:vector}, ${3:int &}, ${4:vector &})",
            "trigger": "xyzdist\tfloat\n(int; vector; int &; vector &)"
        },
        {
            "contents": "xyzdist(${1:int}, ${2:vector}, ${3:int &}, ${4:vector &}, ${5:float})",
            "trigger": "xyzdist\tfloat\n(int; vector; int &; vector &; float)"
        },
        {
            "contents": "xyzdist(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "xyzdist\tfloat\n(string; string; vector)"
        },
        {
            "contents": "xyzdist(${1:string}, ${2:string}, ${3:vector}, ${4:int &}, ${5:vector &})",
            "trigger": "xyzdist\tfloat\n(string; string; vector; int &; vector &)"
        },
        {
            "contents": "xyzdist(${1:string}, ${2:string}, ${3:vector}, ${4:int &}, ${5:vector &}, ${6:float})",
            "trigger": "xyzdist\tfloat\n(string; string; vector; int &; vector &; float)"
        },
        {
            "contents": "xyzdist(${1:string}, ${2:vector})",
            "trigger": "xyzdist\tfloat\n(string; vector)"
        },
        {
            "contents": "xyzdist(${1:string}, ${2:vector}, ${3:int &}, ${4:vector &})",
            "trigger": "xyzdist\tfloat\n(string; vector; int &; vector &)"
        },
        {
            "contents": "xyzdist(${1:string}, ${2:vector}, ${3:int &}, ${4:vector &}, ${5:float})",
            "trigger": "xyzdist\tfloat\n(string; vector; int &; vector &; float)"
        },
        {
            "contents": "xyztorgb(${1:vector})",
            "trigger": "xyztorgb\tvector\n(vector)"
        },
        {
            "contents": "accessframe(${1:int})",
            "trigger": "accessframe\tvoid\n(int)"
        },
        {
            "contents": "alphaname()",
            "trigger": "alphaname\tstring\n(void)"
        },
        {
            "contents": "binput(${1:int}, ${2:float}, ${3:float})",
            "trigger": "binput\tfloat\n(int; float; float)"
        },
        {
            "contents": "binput(${1:int}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "binput\tfloat\n(int; float; float; ...)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int})",
            "trigger": "binput\tfloat\n(int; int; int)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:...})",
            "trigger": "binput\tfloat\n(int; int; int; ...)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float})",
            "trigger": "binput\tfloat\n(int; int; int; float; float)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:...})",
            "trigger": "binput\tfloat\n(int; int; int; float; float; ...)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:float}, ${6:float}, ${7:int})",
            "trigger": "binput\tfloat\n(int; int; int; int; float; float; int)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:float}, ${6:float}, ${7:int}, ${8:...})",
            "trigger": "binput\tfloat\n(int; int; int; int; float; float; int; ...)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int})",
            "trigger": "binput\tfloat\n(int; int; int; int; int)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:...})",
            "trigger": "binput\tfloat\n(int; int; int; int; int; ...)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "binput\tfloat\n(int; int; int; int; int; int; int)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int}, ${8:...})",
            "trigger": "binput\tfloat\n(int; int; int; int; int; int; int; ...)"
        },
        {
            "contents": "binput(${1:float}, ${2:float})",
            "trigger": "binput\tvector4\n(float; float)"
        },
        {
            "contents": "binput(${1:float}, ${2:float}, ${3:...})",
            "trigger": "binput\tvector4\n(float; float; ...)"
        },
        {
            "contents": "binput(${1:int}, ${2:int})",
            "trigger": "binput\tvector4\n(int; int)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:...})",
            "trigger": "binput\tvector4\n(int; int; ...)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "binput\tvector4\n(int; int; float; float)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "binput\tvector4\n(int; int; float; float; ...)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int})",
            "trigger": "binput\tvector4\n(int; int; int; float; float; int)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int}, ${7:...})",
            "trigger": "binput\tvector4\n(int; int; int; float; float; int; ...)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "binput\tvector4\n(int; int; int; int)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:...})",
            "trigger": "binput\tvector4\n(int; int; int; int; ...)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int})",
            "trigger": "binput\tvector4\n(int; int; int; int; int; int)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:...})",
            "trigger": "binput\tvector4\n(int; int; int; int; int; int; ...)"
        },
        {
            "contents": "binput(${1:float}, ${2:float})",
            "trigger": "binput\tvector\n(float; float)"
        },
        {
            "contents": "binput(${1:float}, ${2:float}, ${3:...})",
            "trigger": "binput\tvector\n(float; float; ...)"
        },
        {
            "contents": "binput(${1:int}, ${2:int})",
            "trigger": "binput\tvector\n(int; int)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:...})",
            "trigger": "binput\tvector\n(int; int; ...)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "binput\tvector\n(int; int; float; float)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "binput\tvector\n(int; int; float; float; ...)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int})",
            "trigger": "binput\tvector\n(int; int; int; float; float; int)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int}, ${7:...})",
            "trigger": "binput\tvector\n(int; int; int; float; float; int; ...)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "binput\tvector\n(int; int; int; int)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:...})",
            "trigger": "binput\tvector\n(int; int; int; int; ...)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int})",
            "trigger": "binput\tvector\n(int; int; int; int; int; int)"
        },
        {
            "contents": "binput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:...})",
            "trigger": "binput\tvector\n(int; int; int; int; int; int; ...)"
        },
        {
            "contents": "bumpname()",
            "trigger": "bumpname\tstring\n(void)"
        },
        {
            "contents": "cinput(${1:int}, ${2:float}, ${3:float})",
            "trigger": "cinput\tfloat\n(int; float; float)"
        },
        {
            "contents": "cinput(${1:int}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "cinput\tfloat\n(int; float; float; ...)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int})",
            "trigger": "cinput\tfloat\n(int; int; int)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:...})",
            "trigger": "cinput\tfloat\n(int; int; int; ...)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float})",
            "trigger": "cinput\tfloat\n(int; int; int; float; float)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:...})",
            "trigger": "cinput\tfloat\n(int; int; int; float; float; ...)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:float}, ${6:float}, ${7:int})",
            "trigger": "cinput\tfloat\n(int; int; int; int; float; float; int)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:float}, ${6:float}, ${7:int}, ${8:...})",
            "trigger": "cinput\tfloat\n(int; int; int; int; float; float; int; ...)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int})",
            "trigger": "cinput\tfloat\n(int; int; int; int; int)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:...})",
            "trigger": "cinput\tfloat\n(int; int; int; int; int; ...)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "cinput\tfloat\n(int; int; int; int; int; int; int)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int}, ${8:...})",
            "trigger": "cinput\tfloat\n(int; int; int; int; int; int; int; ...)"
        },
        {
            "contents": "cinput(${1:float}, ${2:float})",
            "trigger": "cinput\tvector4\n(float; float)"
        },
        {
            "contents": "cinput(${1:float}, ${2:float}, ${3:...})",
            "trigger": "cinput\tvector4\n(float; float; ...)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int})",
            "trigger": "cinput\tvector4\n(int; int)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:...})",
            "trigger": "cinput\tvector4\n(int; int; ...)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "cinput\tvector4\n(int; int; float; float)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "cinput\tvector4\n(int; int; float; float; ...)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int})",
            "trigger": "cinput\tvector4\n(int; int; int; float; float; int)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int}, ${7:...})",
            "trigger": "cinput\tvector4\n(int; int; int; float; float; int; ...)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "cinput\tvector4\n(int; int; int; int)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:...})",
            "trigger": "cinput\tvector4\n(int; int; int; int; ...)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int})",
            "trigger": "cinput\tvector4\n(int; int; int; int; int; int)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:...})",
            "trigger": "cinput\tvector4\n(int; int; int; int; int; int; ...)"
        },
        {
            "contents": "cinput(${1:float}, ${2:float})",
            "trigger": "cinput\tvector\n(float; float)"
        },
        {
            "contents": "cinput(${1:float}, ${2:float}, ${3:...})",
            "trigger": "cinput\tvector\n(float; float; ...)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int})",
            "trigger": "cinput\tvector\n(int; int)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:...})",
            "trigger": "cinput\tvector\n(int; int; ...)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "cinput\tvector\n(int; int; float; float)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "cinput\tvector\n(int; int; float; float; ...)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int})",
            "trigger": "cinput\tvector\n(int; int; int; float; float; int)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int}, ${7:...})",
            "trigger": "cinput\tvector\n(int; int; int; float; float; int; ...)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "cinput\tvector\n(int; int; int; int)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:...})",
            "trigger": "cinput\tvector\n(int; int; int; int; ...)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int})",
            "trigger": "cinput\tvector\n(int; int; int; int; int; int)"
        },
        {
            "contents": "cinput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:...})",
            "trigger": "cinput\tvector\n(int; int; int; int; int; int; ...)"
        },
        {
            "contents": "colorname()",
            "trigger": "colorname\tstring\n(void)"
        },
        {
            "contents": "depthname()",
            "trigger": "depthname\tstring\n(void)"
        },
        {
            "contents": "finput(${1:int}, ${2:float}, ${3:float})",
            "trigger": "finput\tfloat\n(int; float; float)"
        },
        {
            "contents": "finput(${1:int}, ${2:float}, ${3:float}, ${4:...})",
            "trigger": "finput\tfloat\n(int; float; float; ...)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int})",
            "trigger": "finput\tfloat\n(int; int; int)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:...})",
            "trigger": "finput\tfloat\n(int; int; int; ...)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float})",
            "trigger": "finput\tfloat\n(int; int; int; float; float)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:...})",
            "trigger": "finput\tfloat\n(int; int; int; float; float; ...)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:float}, ${6:float}, ${7:int})",
            "trigger": "finput\tfloat\n(int; int; int; int; float; float; int)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:float}, ${6:float}, ${7:int}, ${8:...})",
            "trigger": "finput\tfloat\n(int; int; int; int; float; float; int; ...)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int})",
            "trigger": "finput\tfloat\n(int; int; int; int; int)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:...})",
            "trigger": "finput\tfloat\n(int; int; int; int; int; ...)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "finput\tfloat\n(int; int; int; int; int; int; int)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int}, ${8:...})",
            "trigger": "finput\tfloat\n(int; int; int; int; int; int; int; ...)"
        },
        {
            "contents": "finput(${1:float}, ${2:float})",
            "trigger": "finput\tvector4\n(float; float)"
        },
        {
            "contents": "finput(${1:float}, ${2:float}, ${3:...})",
            "trigger": "finput\tvector4\n(float; float; ...)"
        },
        {
            "contents": "finput(${1:int}, ${2:int})",
            "trigger": "finput\tvector4\n(int; int)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:...})",
            "trigger": "finput\tvector4\n(int; int; ...)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "finput\tvector4\n(int; int; float; float)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "finput\tvector4\n(int; int; float; float; ...)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int})",
            "trigger": "finput\tvector4\n(int; int; int; float; float; int)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int}, ${7:...})",
            "trigger": "finput\tvector4\n(int; int; int; float; float; int; ...)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "finput\tvector4\n(int; int; int; int)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:...})",
            "trigger": "finput\tvector4\n(int; int; int; int; ...)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int})",
            "trigger": "finput\tvector4\n(int; int; int; int; int; int)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:...})",
            "trigger": "finput\tvector4\n(int; int; int; int; int; int; ...)"
        },
        {
            "contents": "finput(${1:float}, ${2:float})",
            "trigger": "finput\tvector\n(float; float)"
        },
        {
            "contents": "finput(${1:float}, ${2:float}, ${3:...})",
            "trigger": "finput\tvector\n(float; float; ...)"
        },
        {
            "contents": "finput(${1:int}, ${2:int})",
            "trigger": "finput\tvector\n(int; int)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:...})",
            "trigger": "finput\tvector\n(int; int; ...)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:float}, ${4:float})",
            "trigger": "finput\tvector\n(int; int; float; float)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "finput\tvector\n(int; int; float; float; ...)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int})",
            "trigger": "finput\tvector\n(int; int; int; float; float; int)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:float}, ${5:float}, ${6:int}, ${7:...})",
            "trigger": "finput\tvector\n(int; int; int; float; float; int; ...)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int})",
            "trigger": "finput\tvector\n(int; int; int; int)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:...})",
            "trigger": "finput\tvector\n(int; int; int; int; ...)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int})",
            "trigger": "finput\tvector\n(int; int; int; int; int; int)"
        },
        {
            "contents": "finput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:...})",
            "trigger": "finput\tvector\n(int; int; int; int; int; int; ...)"
        },
        {
            "contents": "hasmetadata(${1:int}, ${2:string})",
            "trigger": "hasmetadata\tint\n(int; string)"
        },
        {
            "contents": "hasplane(${1:string})",
            "trigger": "hasplane\tint\n(string)"
        },
        {
            "contents": "iaspect(${1:int})",
            "trigger": "iaspect\tfloat\n(int)"
        },
        {
            "contents": "ichname(${1:int}, ${2:int}, ${3:int})",
            "trigger": "ichname\tstring\n(int; int; int)"
        },
        {
            "contents": "iend(${1:int})",
            "trigger": "iend\tint\n(int)"
        },
        {
            "contents": "iendtime(${1:int})",
            "trigger": "iendtime\tfloat\n(int)"
        },
        {
            "contents": "ihasplane(${1:int}, ${2:string})",
            "trigger": "ihasplane\tint\n(int; string)"
        },
        {
            "contents": "inumplanes(${1:int})",
            "trigger": "inumplanes\tint\n(int)"
        },
        {
            "contents": "iplaneindex(${1:int}, ${2:string})",
            "trigger": "iplaneindex\tint\n(int; string)"
        },
        {
            "contents": "iplanename(${1:int}, ${2:int})",
            "trigger": "iplanename\tstring\n(int; int)"
        },
        {
            "contents": "iplanesize(${1:int}, ${2:int})",
            "trigger": "iplanesize\tint\n(int; int)"
        },
        {
            "contents": "irate(${1:int})",
            "trigger": "irate\tfloat\n(int)"
        },
        {
            "contents": "istart(${1:int})",
            "trigger": "istart\tint\n(int)"
        },
        {
            "contents": "istarttime(${1:int})",
            "trigger": "istarttime\tfloat\n(int)"
        },
        {
            "contents": "ixres(${1:int})",
            "trigger": "ixres\tint\n(int)"
        },
        {
            "contents": "iyres(${1:int})",
            "trigger": "iyres\tint\n(int)"
        },
        {
            "contents": "lumname()",
            "trigger": "lumname\tstring\n(void)"
        },
        {
            "contents": "maskname()",
            "trigger": "maskname\tstring\n(void)"
        },
        {
            "contents": "metadata(${1:int}, ${2:string})",
            "trigger": "metadata\tmatrix2\n(int; string)"
        },
        {
            "contents": "metadata(${1:int}, ${2:string})",
            "trigger": "metadata\tmatrix3\n(int; string)"
        },
        {
            "contents": "metadata(${1:int}, ${2:string})",
            "trigger": "metadata\tmatrix\n(int; string)"
        },
        {
            "contents": "metadata(${1:int}, ${2:string})",
            "trigger": "metadata\tfloat\n(int; string)"
        },
        {
            "contents": "metadata(${1:int}, ${2:string}, ${3:int})",
            "trigger": "metadata\tfloat\n(int; string; int)"
        },
        {
            "contents": "metadata(${1:int}, ${2:string})",
            "trigger": "metadata\tint\n(int; string)"
        },
        {
            "contents": "metadata(${1:int}, ${2:string}, ${3:int})",
            "trigger": "metadata\tint\n(int; string; int)"
        },
        {
            "contents": "metadata(${1:int}, ${2:string})",
            "trigger": "metadata\tvector4\n(int; string)"
        },
        {
            "contents": "metadata(${1:int}, ${2:string})",
            "trigger": "metadata\tstring\n(int; string)"
        },
        {
            "contents": "metadata(${1:int}, ${2:string})",
            "trigger": "metadata\tvector\n(int; string)"
        },
        {
            "contents": "ninput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:float}, ${6:float}, ${7:int})",
            "trigger": "ninput\tmatrix3\n(int; int; int; int; float; float; int)"
        },
        {
            "contents": "ninput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:float}, ${6:float}, ${7:int}, ${8:...})",
            "trigger": "ninput\tmatrix3\n(int; int; int; int; float; float; int; ...)"
        },
        {
            "contents": "ninput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int})",
            "trigger": "ninput\tmatrix3\n(int; int; int; int; int; int; int)"
        },
        {
            "contents": "ninput(${1:int}, ${2:int}, ${3:int}, ${4:int}, ${5:int}, ${6:int}, ${7:int}, ${8:...})",
            "trigger": "ninput\tmatrix3\n(int; int; int; int; int; int; int; ...)"
        },
        {
            "contents": "normalname()",
            "trigger": "normalname\tstring\n(void)"
        },
        {
            "contents": "planeindex(${1:string})",
            "trigger": "planeindex\tint\n(string)"
        },
        {
            "contents": "planename(${1:int})",
            "trigger": "planename\tstring\n(int)"
        },
        {
            "contents": "planesize(${1:int})",
            "trigger": "planesize\tint\n(int)"
        },
        {
            "contents": "pointname()",
            "trigger": "pointname\tstring\n(void)"
        },
        {
            "contents": "velocityname()",
            "trigger": "velocityname\tstring\n(void)"
        },
        {
            "contents": "ambient()",
            "trigger": "ambient\tvector\n()"
        },
        {
            "contents": "ambient(${1:...})",
            "trigger": "ambient\tvector\n(...)"
        },
        {
            "contents": "ashikhmin(${1:float}, ${2:float}, ${3:vector}, ${4:vector})",
            "trigger": "ashikhmin\tbsdf\n(float; float; vector; vector)"
        },
        {
            "contents": "ashikhmin(${1:float}, ${2:float}, ${3:vector}, ${4:vector}, ${5:...})",
            "trigger": "ashikhmin\tbsdf\n(float; float; vector; vector; ...)"
        },
        {
            "contents": "blinn(${1:float})",
            "trigger": "blinn\tbsdf\n(float)"
        },
        {
            "contents": "blinn(${1:float}, ${2:...})",
            "trigger": "blinn\tbsdf\n(float; ...)"
        },
        {
            "contents": "blinn(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "blinn\tvector\n(vector; vector; float)"
        },
        {
            "contents": "blinn(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "blinn\tvector\n(vector; vector; float; ...)"
        },
        {
            "contents": "cone(${1:vector}, ${2:float})",
            "trigger": "cone\tbsdf\n(vector; float)"
        },
        {
            "contents": "cone(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "cone\tbsdf\n(vector; float; ...)"
        },
        {
            "contents": "diffuse(${1:float})",
            "trigger": "diffuse\tbsdf\n(float)"
        },
        {
            "contents": "diffuse(${1:float}, ${2:...})",
            "trigger": "diffuse\tbsdf\n(float; ...)"
        },
        {
            "contents": "diffuse()",
            "trigger": "diffuse\tbsdf\n()"
        },
        {
            "contents": "diffuse(${1:...})",
            "trigger": "diffuse\tbsdf\n(...)"
        },
        {
            "contents": "diffuse(${1:vector})",
            "trigger": "diffuse\tvector\n(vector)"
        },
        {
            "contents": "diffuse(${1:vector}, ${2:...})",
            "trigger": "diffuse\tvector\n(vector; ...)"
        },
        {
            "contents": "diffuse(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "diffuse\tvector\n(vector; vector; float)"
        },
        {
            "contents": "diffuse(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "diffuse\tvector\n(vector; vector; float; ...)"
        },
        {
            "contents": "fastshadow(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "fastshadow\tfloat\n(vector; vector; float)"
        },
        {
            "contents": "fastshadow(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "fastshadow\tfloat\n(vector; vector; float; ...)"
        },
        {
            "contents": "filtershadow(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "filtershadow\tvector\n(vector; vector; float)"
        },
        {
            "contents": "filtershadow(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "filtershadow\tvector\n(vector; vector; float; ...)"
        },
        {
            "contents": "frontface(${1:vector}, ${2:vector})",
            "trigger": "frontface\tvector\n(vector; vector)"
        },
        {
            "contents": "getblurP(${1:float})",
            "trigger": "getblurP\tvector\n(float)"
        },
        {
            "contents": "getcomp(${1:light[]}, ${2:int})",
            "trigger": "getcomp\tlight\n(light[]; int)"
        },
        {
            "contents": "getcomp(${1:material[]}, ${2:int})",
            "trigger": "getcomp\tmaterial\n(material[]; int)"
        },
        {
            "contents": "getcomponents()",
            "trigger": "getcomponents\tstring[]\n(void)"
        },
        {
            "contents": "getderiv(${1:float}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:float &}, ${7:float &})",
            "trigger": "getderiv\tvoid\n(float; string; int; float; float; float &; float &)"
        },
        {
            "contents": "getderiv(${1:float}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:float &}, ${7:float &}, ${8:...})",
            "trigger": "getderiv\tvoid\n(float; string; int; float; float; float &; float &; ...)"
        },
        {
            "contents": "getderiv(${1:vector4}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector4 &}, ${7:vector4 &})",
            "trigger": "getderiv\tvoid\n(vector4; string; int; float; float; vector4 &; vector4 &)"
        },
        {
            "contents": "getderiv(${1:vector4}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector4 &}, ${7:vector4 &}, ${8:...})",
            "trigger": "getderiv\tvoid\n(vector4; string; int; float; float; vector4 &; vector4 &; ...)"
        },
        {
            "contents": "getderiv(${1:vector}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector &}, ${7:vector &})",
            "trigger": "getderiv\tvoid\n(vector; string; int; float; float; vector &; vector &)"
        },
        {
            "contents": "getderiv(${1:vector}, ${2:string}, ${3:int}, ${4:float}, ${5:float}, ${6:vector &}, ${7:vector &}, ${8:...})",
            "trigger": "getderiv\tvoid\n(vector; string; int; float; float; vector &; vector &; ...)"
        },
        {
            "contents": "getfogname()",
            "trigger": "getfogname\tstring\n(void)"
        },
        {
            "contents": "getglobalraylevel()",
            "trigger": "getglobalraylevel\tint\n(void)"
        },
        {
            "contents": "getgroupid()",
            "trigger": "getgroupid\tint\n(void)"
        },
        {
            "contents": "getlight(${1:int})",
            "trigger": "getlight\tlight\n(int)"
        },
        {
            "contents": "getlightid(${1:string})",
            "trigger": "getlightid\tint\n(string)"
        },
        {
            "contents": "getlightname()",
            "trigger": "getlightname\tstring\n(void)"
        },
        {
            "contents": "getlightname(${1:int})",
            "trigger": "getlightname\tstring\n(int)"
        },
        {
            "contents": "getlights()",
            "trigger": "getlights\tint[]\n()"
        },
        {
            "contents": "getlights(${1:...})",
            "trigger": "getlights\tint[]\n(...)"
        },
        {
            "contents": "getlights(${1:material}, ${2:vector})",
            "trigger": "getlights\tint[]\n(material; vector)"
        },
        {
            "contents": "getlights(${1:material}, ${2:vector}, ${3:...})",
            "trigger": "getlights\tint[]\n(material; vector; ...)"
        },
        {
            "contents": "getlights(${1:vector})",
            "trigger": "getlights\tint[]\n(vector)"
        },
        {
            "contents": "getlights(${1:vector}, ${2:...})",
            "trigger": "getlights\tint[]\n(vector; ...)"
        },
        {
            "contents": "getlightscope(${1:material}, ${2:string &}, ${3:string &})",
            "trigger": "getlightscope\tvoid\n(material; string &; string &)"
        },
        {
            "contents": "getlocalcurvature(${1:float}, ${2:float})",
            "trigger": "getlocalcurvature\tvector\n(float; float)"
        },
        {
            "contents": "getmaterial()",
            "trigger": "getmaterial\tmaterial\n(void)"
        },
        {
            "contents": "getmaterialid()",
            "trigger": "getmaterialid\tint\n(void)"
        },
        {
            "contents": "getobjectid()",
            "trigger": "getobjectid\tint\n(void)"
        },
        {
            "contents": "getobjectname()",
            "trigger": "getobjectname\tstring\n(void)"
        },
        {
            "contents": "getphotonlight()",
            "trigger": "getphotonlight\tint\n(void)"
        },
        {
            "contents": "getprimid()",
            "trigger": "getprimid\tint\n(void)"
        },
        {
            "contents": "getptextureid()",
            "trigger": "getptextureid\tint\n(void)"
        },
        {
            "contents": "getraylevel()",
            "trigger": "getraylevel\tint\n(void)"
        },
        {
            "contents": "getrayweight()",
            "trigger": "getrayweight\tfloat\n(void)"
        },
        {
            "contents": "getsamplestore(${1:string}, ${2:vector}, ${3:float &})",
            "trigger": "getsamplestore\tint\n(string; vector; float &)"
        },
        {
            "contents": "getsamplestore(${1:string}, ${2:vector}, ${3:int &})",
            "trigger": "getsamplestore\tint\n(string; vector; int &)"
        },
        {
            "contents": "getsamplestore(${1:string}, ${2:vector}, ${3:vector4 &})",
            "trigger": "getsamplestore\tint\n(string; vector; vector4 &)"
        },
        {
            "contents": "getsamplestore(${1:string}, ${2:vector}, ${3:vector &})",
            "trigger": "getsamplestore\tint\n(string; vector; vector &)"
        },
        {
            "contents": "getscope(${1:material}, ${2:string}, ${3:string &}, ${4:string &})",
            "trigger": "getscope\tvoid\n(material; string; string &; string &)"
        },
        {
            "contents": "getsmoothP(${1:vector &}, ${2:vector})",
            "trigger": "getsmoothP\tint\n(vector &; vector)"
        },
        {
            "contents": "getsmoothP(${1:vector &}, ${2:vector}, ${3:...})",
            "trigger": "getsmoothP\tint\n(vector &; vector; ...)"
        },
        {
            "contents": "getsmoothP()",
            "trigger": "getsmoothP\tvector\n()"
        },
        {
            "contents": "getsmoothP(${1:...})",
            "trigger": "getsmoothP\tvector\n(...)"
        },
        {
            "contents": "getuvtangents(${1:string}, ${2:vector}, ${3:vector}, ${4:vector &}, ${5:vector &})",
            "trigger": "getuvtangents\tvoid\n(string; vector; vector; vector &; vector &)"
        },
        {
            "contents": "getuvtangents(${1:string}, ${2:vector}, ${3:vector}, ${4:vector &}, ${5:vector &}, ${6:vector &})",
            "trigger": "getuvtangents\tvoid\n(string; vector; vector; vector &; vector &; vector &)"
        },
        {
            "contents": "gradient(${1:float})",
            "trigger": "gradient\tvector\n(float)"
        },
        {
            "contents": "gradient(${1:float}, ${2:...})",
            "trigger": "gradient\tvector\n(float; ...)"
        },
        {
            "contents": "haslight(${1:material}, ${2:vector}, ${3:int})",
            "trigger": "haslight\tint\n(material; vector; int)"
        },
        {
            "contents": "haslight(${1:material}, ${2:vector}, ${3:int}, ${4:...})",
            "trigger": "haslight\tint\n(material; vector; int; ...)"
        },
        {
            "contents": "intersect_lights(${1:int[]}, ${2:vector}, ${3:vector}, ${4:float}, ${5:int &}, ${6:float &}, ${7:vector &}, ${8:float &})",
            "trigger": "intersect_lights\tint\n(int[]; vector; vector; float; int &; float &; vector &; float &)"
        },
        {
            "contents": "intersect_lights(${1:int[]}, ${2:vector}, ${3:vector}, ${4:float}, ${5:int &}, ${6:float &}, ${7:vector &}, ${8:float &}, ${9:...})",
            "trigger": "intersect_lights\tint\n(int[]; vector; vector; float; int &; float &; vector &; float &; ...)"
        },
        {
            "contents": "irradiance(${1:vector}, ${2:vector})",
            "trigger": "irradiance\tvector\n(vector; vector)"
        },
        {
            "contents": "irradiance(${1:vector}, ${2:vector}, ${3:...})",
            "trigger": "irradiance\tvector\n(vector; vector; ...)"
        },
        {
            "contents": "israytracing()",
            "trigger": "israytracing\tint\n(void)"
        },
        {
            "contents": "isuvrendering()",
            "trigger": "isuvrendering\tint\n(void)"
        },
        {
            "contents": "isvarying(${1:light})",
            "trigger": "isvarying\tint\n(light)"
        },
        {
            "contents": "isvarying(${1:material})",
            "trigger": "isvarying\tint\n(material)"
        },
        {
            "contents": "isvarying(${1:light[]})",
            "trigger": "isvarying\tint\n(light[])"
        },
        {
            "contents": "isvarying(${1:material[]})",
            "trigger": "isvarying\tint\n(material[])"
        },
        {
            "contents": "len(${1:light[]})",
            "trigger": "len\tint\n(light[])"
        },
        {
            "contents": "len(${1:material[]})",
            "trigger": "len\tint\n(material[])"
        },
        {
            "contents": "lightbounces(${1:light})",
            "trigger": "lightbounces\tint\n(light)"
        },
        {
            "contents": "lightid(${1:light})",
            "trigger": "lightid\tint\n(light)"
        },
        {
            "contents": "limport(${1:string}, ${2:matrix2 &})",
            "trigger": "limport\tint\n(string; matrix2 &)"
        },
        {
            "contents": "limport(${1:string}, ${2:matrix3 &})",
            "trigger": "limport\tint\n(string; matrix3 &)"
        },
        {
            "contents": "limport(${1:string}, ${2:matrix &})",
            "trigger": "limport\tint\n(string; matrix &)"
        },
        {
            "contents": "limport(${1:string}, ${2:float &})",
            "trigger": "limport\tint\n(string; float &)"
        },
        {
            "contents": "limport(${1:string}, ${2:int &})",
            "trigger": "limport\tint\n(string; int &)"
        },
        {
            "contents": "limport(${1:string}, ${2:vector4 &})",
            "trigger": "limport\tint\n(string; vector4 &)"
        },
        {
            "contents": "limport(${1:string}, ${2:string &})",
            "trigger": "limport\tint\n(string; string &)"
        },
        {
            "contents": "limport(${1:string}, ${2:vector2 &})",
            "trigger": "limport\tint\n(string; vector2 &)"
        },
        {
            "contents": "limport(${1:string}, ${2:vector &})",
            "trigger": "limport\tint\n(string; vector &)"
        },
        {
            "contents": "matchvex_blinn(${1:float})",
            "trigger": "matchvex_blinn\tbsdf\n(float)"
        },
        {
            "contents": "matchvex_blinn(${1:float}, ${2:...})",
            "trigger": "matchvex_blinn\tbsdf\n(float; ...)"
        },
        {
            "contents": "matchvex_specular(${1:float})",
            "trigger": "matchvex_specular\tbsdf\n(float)"
        },
        {
            "contents": "matchvex_specular(${1:float}, ${2:...})",
            "trigger": "matchvex_specular\tbsdf\n(float; ...)"
        },
        {
            "contents": "newsampler()",
            "trigger": "newsampler\tint\n()"
        },
        {
            "contents": "newsampler(${1:...})",
            "trigger": "newsampler\tint\n(...)"
        },
        {
            "contents": "newsampler(${1:int})",
            "trigger": "newsampler\tint\n(int)"
        },
        {
            "contents": "newsampler(${1:int}, ${2:...})",
            "trigger": "newsampler\tint\n(int; ...)"
        },
        {
            "contents": "nextsample(${1:int &}, ${2:float &}, ${3:float &})",
            "trigger": "nextsample\tvoid\n(int &; float &; float &)"
        },
        {
            "contents": "nextsample(${1:int &}, ${2:float &}, ${3:float &}, ${4:...})",
            "trigger": "nextsample\tvoid\n(int &; float &; float &; ...)"
        },
        {
            "contents": "nextsample(${1:int &}, ${2:vector &})",
            "trigger": "nextsample\tvoid\n(int &; vector &)"
        },
        {
            "contents": "nextsample(${1:int &}, ${2:vector &}, ${3:...})",
            "trigger": "nextsample\tvoid\n(int &; vector &; ...)"
        },
        {
            "contents": "occlusion(${1:float &}, ${2:vector &}, ${3:vector}, ${4:vector})",
            "trigger": "occlusion\tvoid\n(float &; vector &; vector; vector)"
        },
        {
            "contents": "occlusion(${1:float &}, ${2:vector &}, ${3:vector}, ${4:vector}, ${5:...})",
            "trigger": "occlusion\tvoid\n(float &; vector &; vector; vector; ...)"
        },
        {
            "contents": "occlusion(${1:vector}, ${2:vector})",
            "trigger": "occlusion\tvector\n(vector; vector)"
        },
        {
            "contents": "occlusion(${1:vector}, ${2:vector}, ${3:...})",
            "trigger": "occlusion\tvector\n(vector; vector; ...)"
        },
        {
            "contents": "opend(${1:int})",
            "trigger": "opend\tvoid\n(int)"
        },
        {
            "contents": "opstart(${1:string})",
            "trigger": "opstart\tint\n(string)"
        },
        {
            "contents": "pathtrace(${1:vector}, ${2:vector})",
            "trigger": "pathtrace\tvector\n(vector; vector)"
        },
        {
            "contents": "pathtrace(${1:vector}, ${2:vector}, ${3:...})",
            "trigger": "pathtrace\tvector\n(vector; vector; ...)"
        },
        {
            "contents": "phong(${1:float})",
            "trigger": "phong\tbsdf\n(float)"
        },
        {
            "contents": "phong(${1:float}, ${2:...})",
            "trigger": "phong\tbsdf\n(float; ...)"
        },
        {
            "contents": "phong(${1:vector}, ${2:float})",
            "trigger": "phong\tbsdf\n(vector; float)"
        },
        {
            "contents": "phong(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "phong\tbsdf\n(vector; float; ...)"
        },
        {
            "contents": "phong(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "phong\tvector\n(vector; vector; float)"
        },
        {
            "contents": "phong(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "phong\tvector\n(vector; vector; float; ...)"
        },
        {
            "contents": "phonglobe(${1:vector}, ${2:float}, ${3:float}, ${4:vector}, ${5:vector})",
            "trigger": "phonglobe\tbsdf\n(vector; float; float; vector; vector)"
        },
        {
            "contents": "phonglobe(${1:vector}, ${2:float}, ${3:float}, ${4:vector}, ${5:vector}, ${6:...})",
            "trigger": "phonglobe\tbsdf\n(vector; float; float; vector; vector; ...)"
        },
        {
            "contents": "phonglobe(${1:vector}, ${2:float})",
            "trigger": "phonglobe\tbsdf\n(vector; float)"
        },
        {
            "contents": "phonglobe(${1:vector}, ${2:float}, ${3:...})",
            "trigger": "phonglobe\tbsdf\n(vector; float; ...)"
        },
        {
            "contents": "pop(${1:light[] &}, ${2:int})",
            "trigger": "pop\tlight\n(light[] &; int)"
        },
        {
            "contents": "pop(${1:material[] &}, ${2:int})",
            "trigger": "pop\tmaterial\n(material[] &; int)"
        },
        {
            "contents": "pop(${1:light[] &})",
            "trigger": "pop\tlight\n(light[] &)"
        },
        {
            "contents": "pop(${1:material[] &})",
            "trigger": "pop\tmaterial\n(material[] &)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int})",
            "trigger": "ptexture\tmatrix3\n(string; int)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:...})",
            "trigger": "ptexture\tmatrix3\n(string; int; ...)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int})",
            "trigger": "ptexture\tmatrix\n(string; int)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:...})",
            "trigger": "ptexture\tmatrix\n(string; int; ...)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int})",
            "trigger": "ptexture\tfloat\n(string; int)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:...})",
            "trigger": "ptexture\tfloat\n(string; int; ...)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int})",
            "trigger": "ptexture\tvector4\n(string; int)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:...})",
            "trigger": "ptexture\tvector4\n(string; int; ...)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int})",
            "trigger": "ptexture\tvector\n(string; int)"
        },
        {
            "contents": "ptexture(${1:string}, ${2:int}, ${3:...})",
            "trigger": "ptexture\tvector\n(string; int; ...)"
        },
        {
            "contents": "push(${1:light[] &}, ${2:light})",
            "trigger": "push\tvoid\n(light[] &; light)"
        },
        {
            "contents": "push(${1:material[] &}, ${2:material})",
            "trigger": "push\tvoid\n(material[] &; material)"
        },
        {
            "contents": "push(${1:light[] &}, ${2:light[]})",
            "trigger": "push\tvoid\n(light[] &; light[])"
        },
        {
            "contents": "push(${1:material[] &}, ${2:material[]})",
            "trigger": "push\tvoid\n(material[] &; material[])"
        },
        {
            "contents": "rayhittest(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "rayhittest\tfloat\n(vector; vector; float)"
        },
        {
            "contents": "rayhittest(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "rayhittest\tfloat\n(vector; vector; float; ...)"
        },
        {
            "contents": "rayhittest(${1:vector}, ${2:vector}, ${3:vector &}, ${4:vector &}, ${5:float})",
            "trigger": "rayhittest\tfloat\n(vector; vector; vector &; vector &; float)"
        },
        {
            "contents": "rayhittest(${1:vector}, ${2:vector}, ${3:vector &}, ${4:vector &}, ${5:float}, ${6:...})",
            "trigger": "rayhittest\tfloat\n(vector; vector; vector &; vector &; float; ...)"
        },
        {
            "contents": "reflectlight(${1:float}, ${2:float})",
            "trigger": "reflectlight\tvector\n(float; float)"
        },
        {
            "contents": "reflectlight(${1:float}, ${2:float}, ${3:...})",
            "trigger": "reflectlight\tvector\n(float; float; ...)"
        },
        {
            "contents": "reflectlight(${1:vector}, ${2:vector}, ${3:float}, ${4:float})",
            "trigger": "reflectlight\tvector\n(vector; vector; float; float)"
        },
        {
            "contents": "reflectlight(${1:vector}, ${2:vector}, ${3:float}, ${4:float}, ${5:...})",
            "trigger": "reflectlight\tvector\n(vector; vector; float; float; ...)"
        },
        {
            "contents": "reflectlight(${1:vector}, ${2:vector}, ${3:vector}, ${4:float}, ${5:float})",
            "trigger": "reflectlight\tvector\n(vector; vector; vector; float; float)"
        },
        {
            "contents": "reflectlight(${1:vector}, ${2:vector}, ${3:vector}, ${4:float}, ${5:float}, ${6:...})",
            "trigger": "reflectlight\tvector\n(vector; vector; vector; float; float; ...)"
        },
        {
            "contents": "refractlight(${1:vector &}, ${2:vector &}, ${3:float &}, ${4:vector}, ${5:vector}, ${6:float}, ${7:float})",
            "trigger": "refractlight\tvoid\n(vector &; vector &; float &; vector; vector; float; float)"
        },
        {
            "contents": "refractlight(${1:vector &}, ${2:vector &}, ${3:float &}, ${4:vector}, ${5:vector}, ${6:float}, ${7:float}, ${8:...})",
            "trigger": "refractlight\tvoid\n(vector &; vector &; float &; vector; vector; float; float; ...)"
        },
        {
            "contents": "refractlight(${1:vector &}, ${2:vector &}, ${3:float &}, ${4:vector}, ${5:vector}, ${6:vector}, ${7:float}, ${8:float}, ${9:float})",
            "trigger": "refractlight\tvoid\n(vector &; vector &; float &; vector; vector; vector; float; float; float)"
        },
        {
            "contents": "refractlight(${1:vector &}, ${2:vector &}, ${3:float &}, ${4:vector}, ${5:vector}, ${6:vector}, ${7:float}, ${8:float}, ${9:float}, ${10:...})",
            "trigger": "refractlight\tvoid\n(vector &; vector &; float &; vector; vector; vector; float; float; float; ...)"
        },
        {
            "contents": "renderstate(${1:material}, ${2:string}, ${3:matrix3 &})",
            "trigger": "renderstate\tint\n(material; string; matrix3 &)"
        },
        {
            "contents": "renderstate(${1:material}, ${2:string}, ${3:matrix &})",
            "trigger": "renderstate\tint\n(material; string; matrix &)"
        },
        {
            "contents": "renderstate(${1:material}, ${2:string}, ${3:float &})",
            "trigger": "renderstate\tint\n(material; string; float &)"
        },
        {
            "contents": "renderstate(${1:material}, ${2:string}, ${3:int &})",
            "trigger": "renderstate\tint\n(material; string; int &)"
        },
        {
            "contents": "renderstate(${1:material}, ${2:string}, ${3:vector4 &})",
            "trigger": "renderstate\tint\n(material; string; vector4 &)"
        },
        {
            "contents": "renderstate(${1:material}, ${2:string}, ${3:string &})",
            "trigger": "renderstate\tint\n(material; string; string &)"
        },
        {
            "contents": "renderstate(${1:material}, ${2:string}, ${3:vector &})",
            "trigger": "renderstate\tint\n(material; string; vector &)"
        },
        {
            "contents": "renderstate(${1:string}, ${2:matrix3 &})",
            "trigger": "renderstate\tint\n(string; matrix3 &)"
        },
        {
            "contents": "renderstate(${1:string}, ${2:matrix &})",
            "trigger": "renderstate\tint\n(string; matrix &)"
        },
        {
            "contents": "renderstate(${1:string}, ${2:float &})",
            "trigger": "renderstate\tint\n(string; float &)"
        },
        {
            "contents": "renderstate(${1:string}, ${2:int &})",
            "trigger": "renderstate\tint\n(string; int &)"
        },
        {
            "contents": "renderstate(${1:string}, ${2:vector4 &})",
            "trigger": "renderstate\tint\n(string; vector4 &)"
        },
        {
            "contents": "renderstate(${1:string}, ${2:string &})",
            "trigger": "renderstate\tint\n(string; string &)"
        },
        {
            "contents": "renderstate(${1:string}, ${2:vector &})",
            "trigger": "renderstate\tint\n(string; vector &)"
        },
        {
            "contents": "resize(${1:light[] &}, ${2:int})",
            "trigger": "resize\tvoid\n(light[] &; int)"
        },
        {
            "contents": "resize(${1:material[] &}, ${2:int})",
            "trigger": "resize\tvoid\n(material[] &; int)"
        },
        {
            "contents": "resolvemissedray(${1:vector}, ${2:float}, ${3:int})",
            "trigger": "resolvemissedray\tvector\n(vector; float; int)"
        },
        {
            "contents": "resolvemissedray(${1:vector}, ${2:float}, ${3:int}, ${4:...})",
            "trigger": "resolvemissedray\tvector\n(vector; float; int; ...)"
        },
        {
            "contents": "sample_geometry(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "sample_geometry\tint\n(vector; vector; float)"
        },
        {
            "contents": "sample_geometry(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "sample_geometry\tint\n(vector; vector; float; ...)"
        },
        {
            "contents": "sample_light(${1:int}, ${2:vector}, ${3:vector}, ${4:float}, ${5:vector &}, ${6:vector &}, ${7:float &})",
            "trigger": "sample_light\tint\n(int; vector; vector; float; vector &; vector &; float &)"
        },
        {
            "contents": "sample_light(${1:int}, ${2:vector}, ${3:vector}, ${4:float}, ${5:vector &}, ${6:vector &}, ${7:float &}, ${8:...})",
            "trigger": "sample_light\tint\n(int; vector; vector; float; vector &; vector &; float &; ...)"
        },
        {
            "contents": "sample_photon(${1:light}, ${2:vector &}, ${3:vector &}, ${4:float &}, ${5:float})",
            "trigger": "sample_photon\tint\n(light; vector &; vector &; float &; float)"
        },
        {
            "contents": "scatter(${1:vector}, ${2:vector}, ${3:vector}, ${4:vector}, ${5:float}, ${6:float}, ${7:vector &}, ${8:vector &}, ${9:vector &})",
            "trigger": "scatter\tint\n(vector; vector; vector; vector; float; float; vector &; vector &; vector &)"
        },
        {
            "contents": "select(${1:int}, ${2:light}, ${3:light})",
            "trigger": "select\tlight\n(int; light; light)"
        },
        {
            "contents": "select(${1:int}, ${2:material}, ${3:material})",
            "trigger": "select\tmaterial\n(int; material; material)"
        },
        {
            "contents": "select(${1:int}, ${2:light[]}, ${3:light[]})",
            "trigger": "select\tlight[]\n(int; light[]; light[])"
        },
        {
            "contents": "select(${1:int}, ${2:material[]}, ${3:material[]})",
            "trigger": "select\tmaterial[]\n(int; material[]; material[])"
        },
        {
            "contents": "set(${1:light})",
            "trigger": "set\tlight\n(light)"
        },
        {
            "contents": "set(${1:material})",
            "trigger": "set\tmaterial\n(material)"
        },
        {
            "contents": "set(${1:light[]})",
            "trigger": "set\tlight[]\n(light[])"
        },
        {
            "contents": "set(${1:material[]})",
            "trigger": "set\tmaterial[]\n(material[])"
        },
        {
            "contents": "setcomp(${1:light[] &}, ${2:light}, ${3:int})",
            "trigger": "setcomp\tlight\n(light[] &; light; int)"
        },
        {
            "contents": "setcomp(${1:material[] &}, ${2:material}, ${3:int})",
            "trigger": "setcomp\tmaterial\n(material[] &; material; int)"
        },
        {
            "contents": "setcurrentlight(${1:int})",
            "trigger": "setcurrentlight\tint\n(int)"
        },
        {
            "contents": "setsamplestore(${1:string}, ${2:vector}, ${3:float})",
            "trigger": "setsamplestore\tint\n(string; vector; float)"
        },
        {
            "contents": "setsamplestore(${1:string}, ${2:vector}, ${3:int})",
            "trigger": "setsamplestore\tint\n(string; vector; int)"
        },
        {
            "contents": "setsamplestore(${1:string}, ${2:vector}, ${3:vector4})",
            "trigger": "setsamplestore\tint\n(string; vector; vector4)"
        },
        {
            "contents": "setsamplestore(${1:string}, ${2:vector}, ${3:vector})",
            "trigger": "setsamplestore\tint\n(string; vector; vector)"
        },
        {
            "contents": "shadow(${1:vector &})",
            "trigger": "shadow\tvoid\n(vector &)"
        },
        {
            "contents": "shadow(${1:vector})",
            "trigger": "shadow\tvector\n(vector)"
        },
        {
            "contents": "shadow(${1:vector &}, ${2:vector}, ${3:vector})",
            "trigger": "shadow\tvoid\n(vector &; vector; vector)"
        },
        {
            "contents": "shadow(${1:vector}, ${2:vector}, ${3:vector})",
            "trigger": "shadow\tvector\n(vector; vector; vector)"
        },
        {
            "contents": "shadow_light(${1:int}, ${2:vector}, ${3:vector}, ${4:float})",
            "trigger": "shadow_light\tvector\n(int; vector; vector; float)"
        },
        {
            "contents": "shadow_light(${1:int}, ${2:vector}, ${3:vector}, ${4:float}, ${5:...})",
            "trigger": "shadow_light\tvector\n(int; vector; vector; float; ...)"
        },
        {
            "contents": "specular(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "specular\tvector\n(vector; vector; float)"
        },
        {
            "contents": "specular(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "specular\tvector\n(vector; vector; float; ...)"
        },
        {
            "contents": "storelightexport(${1:string}, ${2:string}, ${3:float})",
            "trigger": "storelightexport\tvoid\n(string; string; float)"
        },
        {
            "contents": "storelightexport(${1:string}, ${2:string}, ${3:int})",
            "trigger": "storelightexport\tvoid\n(string; string; int)"
        },
        {
            "contents": "storelightexport(${1:string}, ${2:string}, ${3:vector4})",
            "trigger": "storelightexport\tvoid\n(string; string; vector4)"
        },
        {
            "contents": "storelightexport(${1:string}, ${2:string}, ${3:vector})",
            "trigger": "storelightexport\tvoid\n(string; string; vector)"
        },
        {
            "contents": "storelightexport(${1:string}, ${2:string}, ${3:float[]})",
            "trigger": "storelightexport\tvoid\n(string; string; float[])"
        },
        {
            "contents": "storelightexport(${1:string}, ${2:string}, ${3:int[]})",
            "trigger": "storelightexport\tvoid\n(string; string; int[])"
        },
        {
            "contents": "storelightexport(${1:string}, ${2:string}, ${3:vector4[]})",
            "trigger": "storelightexport\tvoid\n(string; string; vector4[])"
        },
        {
            "contents": "storelightexport(${1:string}, ${2:string}, ${3:vector[]})",
            "trigger": "storelightexport\tvoid\n(string; string; vector[])"
        },
        {
            "contents": "texture(${1:string})",
            "trigger": "texture\tvector4\n(string)"
        },
        {
            "contents": "texture(${1:string}, ${2:...})",
            "trigger": "texture\tvector4\n(string; ...)"
        },
        {
            "contents": "texture(${1:string})",
            "trigger": "texture\tvector\n(string)"
        },
        {
            "contents": "texture(${1:string}, ${2:...})",
            "trigger": "texture\tvector\n(string; ...)"
        },
        {
            "contents": "trace(${1:vector}, ${2:vector}, ${3:float})",
            "trigger": "trace\tint\n(vector; vector; float)"
        },
        {
            "contents": "trace(${1:vector}, ${2:vector}, ${3:float}, ${4:...})",
            "trigger": "trace\tint\n(vector; vector; float; ...)"
        },
        {
            "contents": "trace(${1:vector &}, ${2:vector &}, ${3:float &}, ${4:vector}, ${5:vector}, ${6:float}, ${7:float})",
            "trigger": "trace\tvoid\n(vector &; vector &; float &; vector; vector; float; float)"
        },
        {
            "contents": "trace(${1:vector &}, ${2:vector &}, ${3:float &}, ${4:vector}, ${5:vector}, ${6:float}, ${7:float}, ${8:...})",
            "trigger": "trace\tvoid\n(vector &; vector &; float &; vector; vector; float; float; ...)"
        },
        {
            "contents": "upush(${1:light[] &}, ${2:light})",
            "trigger": "upush\tvoid\n(light[] &; light)"
        },
        {
            "contents": "upush(${1:material[] &}, ${2:material})",
            "trigger": "upush\tvoid\n(material[] &; material)"
        },
        {
            "contents": "writepixel(${1:string}, ${2:float}, ${3:float}, ${4:vector})",
            "trigger": "writepixel\tvoid\n(string; float; float; vector)"
        },
        {
            "contents": "dimport(${1:string}, ${2:matrix2 &})",
            "trigger": "dimport\tint\n(string; matrix2 &)"
        },
        {
            "contents": "dimport(${1:string}, ${2:matrix3 &})",
            "trigger": "dimport\tint\n(string; matrix3 &)"
        },
        {
            "contents": "dimport(${1:string}, ${2:matrix &})",
            "trigger": "dimport\tint\n(string; matrix &)"
        },
        {
            "contents": "dimport(${1:string}, ${2:float &})",
            "trigger": "dimport\tint\n(string; float &)"
        },
        {
            "contents": "dimport(${1:string}, ${2:int &})",
            "trigger": "dimport\tint\n(string; int &)"
        },
        {
            "contents": "dimport(${1:string}, ${2:vector4 &})",
            "trigger": "dimport\tint\n(string; vector4 &)"
        },
        {
            "contents": "dimport(${1:string}, ${2:string &})",
            "trigger": "dimport\tint\n(string; string &)"
        },
        {
            "contents": "dimport(${1:string}, ${2:vector2 &})",
            "trigger": "dimport\tint\n(string; vector2 &)"
        },
        {
            "contents": "dimport(${1:string}, ${2:vector &})",
            "trigger": "dimport\tint\n(string; vector &)"
        },
        {
            "contents": "rayimport(${1:string}, ${2:matrix2 &})",
            "trigger": "rayimport\tint\n(string; matrix2 &)"
        },
        {
            "contents": "rayimport(${1:string}, ${2:matrix3 &})",
            "trigger": "rayimport\tint\n(string; matrix3 &)"
        },
        {
            "contents": "rayimport(${1:string}, ${2:matrix &})",
            "trigger": "rayimport\tint\n(string; matrix &)"
        },
        {
            "contents": "rayimport(${1:string}, ${2:float &})",
            "trigger": "rayimport\tint\n(string; float &)"
        },
        {
            "contents": "rayimport(${1:string}, ${2:int &})",
            "trigger": "rayimport\tint\n(string; int &)"
        },
        {
            "contents": "rayimport(${1:string}, ${2:vector4 &})",
            "trigger": "rayimport\tint\n(string; vector4 &)"
        },
        {
            "contents": "rayimport(${1:string}, ${2:string &})",
            "trigger": "rayimport\tint\n(string; string &)"
        },
        {
            "contents": "rayimport(${1:string}, ${2:vector2 &})",
            "trigger": "rayimport\tint\n(string; vector2 &)"
        },
        {
            "contents": "rayimport(${1:string}, ${2:vector &})",
            "trigger": "rayimport\tint\n(string; vector &)"
        },
        {
            "contents": "shimport(${1:string}, ${2:matrix2 &})",
            "trigger": "shimport\tint\n(string; matrix2 &)"
        },
        {
            "contents": "shimport(${1:string}, ${2:matrix3 &})",
            "trigger": "shimport\tint\n(string; matrix3 &)"
        },
        {
            "contents": "shimport(${1:string}, ${2:matrix &})",
            "trigger": "shimport\tint\n(string; matrix &)"
        },
        {
            "contents": "shimport(${1:string}, ${2:float &})",
            "trigger": "shimport\tint\n(string; float &)"
        },
        {
            "contents": "shimport(${1:string}, ${2:int &})",
            "trigger": "shimport\tint\n(string; int &)"
        },
        {
            "contents": "shimport(${1:string}, ${2:vector4 &})",
            "trigger": "shimport\tint\n(string; vector4 &)"
        },
        {
            "contents": "shimport(${1:string}, ${2:string &})",
            "trigger": "shimport\tint\n(string; string &)"
        },
        {
            "contents": "shimport(${1:string}, ${2:vector2 &})",
            "trigger": "shimport\tint\n(string; vector2 &)"
        },
        {
            "contents": "shimport(${1:string}, ${2:vector &})",
            "trigger": "shimport\tint\n(string; vector &)"
        },
        {
            "contents": "simport(${1:string}, ${2:matrix2 &})",
            "trigger": "simport\tint\n(string; matrix2 &)"
        },
        {
            "contents": "simport(${1:string}, ${2:matrix3 &})",
            "trigger": "simport\tint\n(string; matrix3 &)"
        },
        {
            "contents": "simport(${1:string}, ${2:matrix &})",
            "trigger": "simport\tint\n(string; matrix &)"
        },
        {
            "contents": "simport(${1:string}, ${2:float &})",
            "trigger": "simport\tint\n(string; float &)"
        },
        {
            "contents": "simport(${1:string}, ${2:int &})",
            "trigger": "simport\tint\n(string; int &)"
        },
        {
            "contents": "simport(${1:string}, ${2:vector4 &})",
            "trigger": "simport\tint\n(string; vector4 &)"
        },
        {
            "contents": "simport(${1:string}, ${2:string &})",
            "trigger": "simport\tint\n(string; string &)"
        },
        {
            "contents": "simport(${1:string}, ${2:vector2 &})",
            "trigger": "simport\tint\n(string; vector2 &)"
        },
        {
            "contents": "simport(${1:string}, ${2:vector &})",
            "trigger": "simport\tint\n(string; vector &)"
        },
        {
            "contents": "mattrib(${1:string}, ${2:vector})",
            "trigger": "mattrib\tmatrix3\n(string; vector)"
        },
        {
            "contents": "mattrib(${1:string}, ${2:vector})",
            "trigger": "mattrib\tmatrix\n(string; vector)"
        },
        {
            "contents": "mattrib(${1:string}, ${2:vector})",
            "trigger": "mattrib\tfloat\n(string; vector)"
        },
        {
            "contents": "mattrib(${1:string}, ${2:vector})",
            "trigger": "mattrib\tvector4\n(string; vector)"
        },
        {
            "contents": "mattrib(${1:string}, ${2:vector})",
            "trigger": "mattrib\tvector\n(string; vector)"
        },
        {
            "contents": "mdensity(${1:vector})",
            "trigger": "mdensity\tfloat\n(vector)"
        },
        {
            "contents": "mspace(${1:vector})",
            "trigger": "mspace\tvector\n(vector)"
        },
        {
            "contents": "isfogray()",
            "trigger": "isfogray\tint\n(void)"
        },
        {
            "contents": "addattribute(${1:string}, ${2:matrix3})",
            "trigger": "addattribute\tvoid\n(string; matrix3)"
        },
        {
            "contents": "addattribute(${1:string}, ${2:matrix3}, ${3:...})",
            "trigger": "addattribute\tvoid\n(string; matrix3; ...)"
        },
        {
            "contents": "addattribute(${1:string}, ${2:matrix})",
            "trigger": "addattribute\tvoid\n(string; matrix)"
        },
        {
            "contents": "addattribute(${1:string}, ${2:matrix}, ${3:...})",
            "trigger": "addattribute\tvoid\n(string; matrix; ...)"
        },
        {
            "contents": "addattribute(${1:string}, ${2:float})",
            "trigger": "addattribute\tvoid\n(string; float)"
        },
        {
            "contents": "addattribute(${1:string}, ${2:float}, ${3:...})",
            "trigger": "addattribute\tvoid\n(string; float; ...)"
        },
        {
            "contents": "addattribute(${1:string}, ${2:int})",
            "trigger": "addattribute\tvoid\n(string; int)"
        },
        {
            "contents": "addattribute(${1:string}, ${2:int}, ${3:...})",
            "trigger": "addattribute\tvoid\n(string; int; ...)"
        },
        {
            "contents": "addattribute(${1:string}, ${2:vector4})",
            "trigger": "addattribute\tvoid\n(string; vector4)"
        },
        {
            "contents": "addattribute(${1:string}, ${2:vector4}, ${3:...})",
            "trigger": "addattribute\tvoid\n(string; vector4; ...)"
        },
        {
            "contents": "addattribute(${1:string}, ${2:string})",
            "trigger": "addattribute\tvoid\n(string; string)"
        },
        {
            "contents": "addattribute(${1:string}, ${2:string}, ${3:...})",
            "trigger": "addattribute\tvoid\n(string; string; ...)"
        },
        {
            "contents": "addattribute(${1:string}, ${2:vector})",
            "trigger": "addattribute\tvoid\n(string; vector)"
        },
        {
            "contents": "addattribute(${1:string}, ${2:vector}, ${3:...})",
            "trigger": "addattribute\tvoid\n(string; vector; ...)"
        },
        {
            "contents": "addattribute(${1:string}, ${2:float[]}, ${3:int})",
            "trigger": "addattribute\tvoid\n(string; float[]; int)"
        },
        {
            "contents": "addattribute(${1:string}, ${2:float[]}, ${3:int}, ${4:...})",
            "trigger": "addattribute\tvoid\n(string; float[]; int; ...)"
        },
        {
            "contents": "addgroup(${1:string}, ${2:int})",
            "trigger": "addgroup\tvoid\n(string; int)"
        },
        {
            "contents": "addvariablename(${1:string}, ${2:string})",
            "trigger": "addvariablename\tvoid\n(string; string)"
        },
        {
            "contents": "computenormal(${1:int})",
            "trigger": "computenormal\tvoid\n(int)"
        },
        {
            "contents": "import(${1:string}, ${2:matrix3 &}, ${3:int})",
            "trigger": "import\tint\n(string; matrix3 &; int)"
        },
        {
            "contents": "import(${1:string}, ${2:matrix3 &}, ${3:int}, ${4:int})",
            "trigger": "import\tint\n(string; matrix3 &; int; int)"
        },
        {
            "contents": "import(${1:string}, ${2:matrix &}, ${3:int})",
            "trigger": "import\tint\n(string; matrix &; int)"
        },
        {
            "contents": "import(${1:string}, ${2:matrix &}, ${3:int}, ${4:int})",
            "trigger": "import\tint\n(string; matrix &; int; int)"
        },
        {
            "contents": "import(${1:string}, ${2:float &}, ${3:int})",
            "trigger": "import\tint\n(string; float &; int)"
        },
        {
            "contents": "import(${1:string}, ${2:float &}, ${3:int}, ${4:int})",
            "trigger": "import\tint\n(string; float &; int; int)"
        },
        {
            "contents": "import(${1:string}, ${2:int &}, ${3:int})",
            "trigger": "import\tint\n(string; int &; int)"
        },
        {
            "contents": "import(${1:string}, ${2:int &}, ${3:int}, ${4:int})",
            "trigger": "import\tint\n(string; int &; int; int)"
        },
        {
            "contents": "import(${1:string}, ${2:vector4 &}, ${3:int})",
            "trigger": "import\tint\n(string; vector4 &; int)"
        },
        {
            "contents": "import(${1:string}, ${2:vector4 &}, ${3:int}, ${4:int})",
            "trigger": "import\tint\n(string; vector4 &; int; int)"
        },
        {
            "contents": "import(${1:string}, ${2:vector &}, ${3:int})",
            "trigger": "import\tint\n(string; vector &; int)"
        },
        {
            "contents": "import(${1:string}, ${2:vector &}, ${3:int}, ${4:int})",
            "trigger": "import\tint\n(string; vector &; int; int)"
        },
        {
            "contents": "import(${1:string}, ${2:float[] &}, ${3:int})",
            "trigger": "import\tint\n(string; float[] &; int)"
        },
        {
            "contents": "import(${1:string}, ${2:float[] &}, ${3:int}, ${4:int})",
            "trigger": "import\tint\n(string; float[] &; int; int)"
        },
        {
            "contents": "ingroup(${1:string}, ${2:int})",
            "trigger": "ingroup\tint\n(string; int)"
        },
        {
            "contents": "newgroup(${1:string})",
            "trigger": "newgroup\tvoid\n(string)"
        },
        {
            "contents": "removegroup(${1:string}, ${2:int})",
            "trigger": "removegroup\tvoid\n(string; int)"
        },
        {
            "contents": "isshadowray()",
            "trigger": "isshadowray\tint\n(void)"
        }
    ],
    "scope": "source.vex"
}